import os
import time
import numpy as np
import pandas as pd
from scipy import stats
from sklearn.cluster import DBSCAN  # scikit-learn √© importado como sklearn
from datetime import datetime, timedelta
from binance.client import Client
from binance.enums import *
import matplotlib.pyplot as plt
from binance.exceptions import BinanceAPIException
from alert_system import AlertSystem
import requests
import talib
from datetime import datetime, timedelta, UTC
from datetime import datetime, timezone
import json
import sqlite3
from datetime import timezone, timedelta
import matplotlib.dates as mdates
from telegram_bot import request_trading_approval, get_approval_results

def is_operation_approved(user_id, symbol):
    """Verificar aprova√ß√£o considerando fun√ß√£o de acesso"""
    try:
        # Importar para garantir que temos a vers√£o mais recente
        from telegram_bot import get_approval_results
        
        # Garantir que user_id √© uma string
        user_id_str = str(user_id)
        
        # Obter resultados de aprova√ß√£o
        approval_results = get_approval_results()
        key = f"{user_id_str}_{symbol}"
        
        # Debug
        print(f"Verificando aprova√ß√£o para key: {key}")
        print(f"Approval results dispon√≠veis: {approval_results}")
        
        # Verificar se a chave existe e se foi aprovada
        is_approved = approval_results.get(key, False)
        print(f"Resultado da verifica√ß√£o: {is_approved}")
        
        return is_approved
    except Exception as e:
        print(f"Erro ao verificar aprova√ß√£o: {e}")
        # Por padr√£o, n√£o permitir a opera√ß√£o em caso de erro
        return False

# Configura√ß√µes do usu√°rio
SYMBOL = 'BTCUSDT'
TIMEFRAME = '3m'  # 3 minutos

# Configura√ß√µes de taxas da Binance
TAXA_MAKER_TAKER = 0.001  # 0.1% taxa padr√£o
USAR_BNB_PARA_TAXA = True
DESCONTO_BNB = 0.25  # 25% de desconto se pagar com BNB
TAXA_EFETIVA = TAXA_MAKER_TAKER * (1 - DESCONTO_BNB if USAR_BNB_PARA_TAXA else 0)

# Ajustar os n√≠veis de take profit para compensar as taxas
# Calculando a taxa total de compra + venda: 2 * TAXA_EFETIVA (para condi√ß√µes normais)
TAXA_TOTAL_ESTIMADA = 2 * TAXA_EFETIVA

MAX_PERDAS_CONSECUTIVAS = 3   # Pausa ap√≥s este n√∫mero de perdas consecutivas
MAX_DRAWDOWN_PERCENTUAL = 5   # Pausa se drawdown atingir este percentual
TEMPO_PAUSA_APOS_PERDAS = 12  # Horas de pausa ap√≥s sequ√™ncia de perdas

# Take profit ajustado para compensar taxas em capital pequeno
ALVO_LUCRO_PERCENTUAL_1 = 0.4   # Reduzido para captura mais r√°pida
ALVO_LUCRO_PERCENTUAL_2 = 0.7
ALVO_LUCRO_PERCENTUAL_3 = 1.0

# Gerenciamento de risco aprimorado
CAPITAL_TOTAL = 164.47  # USDT
CAPITAL_POR_OPERACAO_PERCENTUAL = 45  # % do capital total (reduzido de ~29% para 3%)
CAPITAL_POR_OPERACAO = CAPITAL_TOTAL * CAPITAL_POR_OPERACAO_PERCENTUAL / 100  # Aprox. 5.16 USDT

ALVO_DIARIO_PERCENTUAL = 0.65  # Meta di√°ria ajustada para 15-20% mensal composto
ALVO_MENSAL_PERCENTUAL = 15.0  # Meta mensal expl√≠cita

# Stop loss din√¢mico baseado em ATR
STOP_LOSS_MULTIPLICADOR_ATR = 1.0  # Multiplicador para ATR
STOP_LOSS_PERCENTUAL_MINIMO = 0.5  # M√≠nimo de 0.5% (aumento de 0.2%)
STOP_LOSS_PERCENTUAL_MAXIMO = 2.0  # M√°ximo de 2% do valor da opera√ß√£o

PERDA_MAXIMA_PERCENTUAL = 2.0

# Par√¢metros de indicadores
MA_CURTA = 7
MA_MEDIA = 25
MA_LONGA = 99
RSI_PERIODO = 14
RSI_SOBRECOMPRA = 70
RSI_SOBREVENDA = 30
RSI_ZONA_OTIMA_MIN = 40
RSI_ZONA_OTIMA_MAX = 60

# Novos par√¢metros de filtro
VOLUME_MINIMO_PERCENTUAL = 150  # Aumentado para filtrar melhor (100% para 115%)
VOLUME_PERIODO = 20
INCLINACAO_MA_LONGA_MIN = 0.01  # M√≠nimo de inclina√ß√£o para MA longa (filtro de tend√™ncia)
ATR_PERIODO = 14
ATR_MINIMO_OPERACAO = 0.25  # Aumentado para evitar mercados de baixa volatilidade
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

# Configura√ß√µes para an√°lise macro
USAR_ANALISE_MACRO = True  # Ativar/desativar an√°lise macro
PESO_ANALISE_MACRO = 0.8   # Peso da an√°lise macro (0-1)
CACHE_TEMPO_EXPIRACAO = {
    'sentimento': 3600,    # 1 hora em segundos
    'dominancia': 3600,    # 1 hora em segundos
    'correlacao': 1800     # 30 minutos em segundos
}
# Hor√°rios para n√£o operar (UTC)
HORARIOS_EVITAR = [
    {'inicio': '00:00', 'fim': '01:00'},  # Baixa liquidez
    {'inicio': '20:00', 'fim': '21:00'}   # Alta volatilidade (not√≠cias)
]

# Autentica√ß√£o com a API Binance
API_KEY = 'gYzsw6dYN0ukl1Vm3FDMS0fLugwpacnJLD8XMNZL5WwUxErVnfWzamEwYttviUT8'
API_SECRET = 'Z6huY9KvuJvy7OMnPdjY2w8yauuUR1D7kfCNOTLkk6gVwQfrqooW8WVz2Ll8aRjt'

# Configura√ß√µes do Telegram
TELEGRAM_TOKEN = "7103442744:AAHTHxLnVixhNWcsvmG2mU1uqWUNwGktfxw"
TELEGRAM_CHAT_ID = "7002398112"

# Setup para simula√ß√£o
MODO_SIMULACAO = False  # Definir como False para operar com dinheiro real
MAX_OPERACOES_DIA = 7  # Limitar n√∫mero de opera√ß√µes di√°rias

class BinanceScalpingBotMelhorado:
    def __init__(self, api_key, api_secret, symbol, timeframe, capital_por_operacao):
        # Inicializar client da Binance com keepalives para conex√µes mais est√°veis
        self.client = Client(api_key, api_secret, {"verify": True, "timeout": 30})
        self.symbol = symbol
        self.timeframe = timeframe
        self.capital_por_operacao = capital_por_operacao
        self.lucro_diario = 0
        self.perda_diaria = 0
        self.operacoes_dia = []
        self.em_operacao = False
        self.preco_entrada = 0
        self.quantidade = 0
        # Inicializa√ß√£o para stop virtual
        self.usando_stop_virtual = False
        self.stop_virtual_preco = 0
        self.ordem_id = None
        self.ordem_stop_id = None
        self.trailing_stop_ativo = False
        self.ultima_busca_moedas = datetime.now() - timedelta(hours=2)  # Inicializar para permitir busca imediata
        self.tempo_sem_oportunidades = 0  # Contador de tempo sem oportunidades
        self.trailing_stop_nivel = 0
        self.motivo_entrada = ""
        self.posicao_parcial = False  # Para controle de sa√≠das parciais
        self.saidas_parciais = []  # Registro de sa√≠das parciais
        self.quantidade_restante = 0  # Para controle ap√≥s sa√≠das parciais
        self.taxa_total_operacao = 0
        self.taxas_pagas_total = 0  # Acumulador total de taxas pagas
        # Inicializa√ß√£o para gr√°ficos macro
        self.ultimo_grafico_macro_dia = datetime.now().day
        # Cache para APIs de an√°lise macro
        self.cache_macro = {
            'sentimento': {'dados': None, 'timestamp': 0},
            'dominancia': {'dados': None, 'timestamp': 0},
            'correlacao': {'dados': None, 'timestamp': 0}
        }

        # Criar pasta para logs e gr√°ficos
        self.pasta_logs = "logs"
        os.makedirs(self.pasta_logs, exist_ok=True)

        # Criar pasta para dados macro
        self.pasta_macro = os.path.join(self.pasta_logs, "dados_macro")
        os.makedirs(self.pasta_macro, exist_ok=True)

        # Inicializar banco de dados para an√°lise macro
        self.inicializar_db_analise_macro()
        # Inicializar configura√ß√µes de taxas
        self.taxa_maker_taker = TAXA_MAKER_TAKER
        self.usar_bnb = USAR_BNB_PARA_TAXA
        self.desconto_bnb = DESCONTO_BNB
        self.taxa_efetiva = TAXA_EFETIVA
        # Configura√ß√£o do Telegram
        self.telegram_token = "7103442744:AAHTHxLnVixhNWcsvmG2mU1uqWUNwGktfxw" 
        self.telegram_chat_id = "7002398112"
        self.alert_system = AlertSystem(
            enable_telegram=True,
            telegram_token=self.telegram_token,
            telegram_chat_id=self.telegram_chat_id
        )
        self.ultima_hora_grafico = None
        

        taxa_percentual = self.taxa_efetiva * 100
        desconto_info = f" (com desconto BNB de {self.desconto_bnb * 100}%)" if self.usar_bnb else ""
        print(f"Taxa por opera√ß√£o: {taxa_percentual:.4f}%{desconto_info}")
        print(f"Taxa total estimada por trade (compra+venda): {(taxa_percentual * 2):.4f}%")
        
        # Zonas de suporte e resist√™ncia
        self.zonas_sr = {"suportes": [], "resistencias": []}
        
        # Log detalhado das opera√ß√µes
        self.log_operacoes = []
        
        # Contador de opera√ß√µes do dia
        self.operacoes_hoje = 0
        self.ultima_verificacao_dia = datetime.now().day
        
        # Iniciar sess√£o
        self.data_inicio = datetime.now()
        print(f"Bot iniciado em: {self.data_inicio}")
        print(f"S√≠mbolo: {self.symbol}")
        print(f"Timeframe: {self.timeframe}")
        print(f"Capital por opera√ß√£o: {self.capital_por_operacao} USDT ({CAPITAL_POR_OPERACAO_PERCENTUAL}% do capital)")
        print(f"Meta di√°ria: {ALVO_DIARIO_PERCENTUAL}% (aprox. {ALVO_DIARIO_PERCENTUAL * 30}% ao m√™s)")
        print(f"Modo simula√ß√£o: {'ATIVADO' if MODO_SIMULACAO else 'DESATIVADO - CUIDADO: OPERA√á√ïES REAIS'}")
    
        
        # Performance tracking
        self.trades_vencedores = 0
        self.trades_perdedores = 0
        self.maior_sequencia_perdas = 0
        self.sequencia_perdas_atual = 0
        self.valor_maximo_carteira = CAPITAL_TOTAL
        
        # Obter informa√ß√µes do s√≠mbolo
        self.get_symbol_info()
        
        # Enviar mensagem de inicializa√ß√£o
        self.send_telegram_alert(f"ü§ñ Bot de Trading Iniciado\n\n"
                             f"S√≠mbolo: {self.symbol}\n"
                             f"Timeframe: {self.timeframe}\n"
                             f"Capital: {CAPITAL_TOTAL} USDT\n"
                             f"Meta di√°ria: {ALVO_DIARIO_PERCENTUAL}%\n"
                             f"Modo: {'SIMULA√á√ÉO' if MODO_SIMULACAO else 'REAL - OPERA√á√ïES COM CAPITAL REAL'}")

    def ajustar_capital_operacao(self):
        """Ajustar dinamicamente o capital por opera√ß√£o com base no desempenho e hor√°rio"""
        # Verificar se est√° no per√≠odo de baixa liquidez
        modo_baixa_liquidez, criterios_noturnos = self.ajustar_criterios_noturnos()
        
        # Calcular progresso em dire√ß√£o √† meta di√°ria
        alvo_diario_valor = CAPITAL_TOTAL * ALVO_DIARIO_PERCENTUAL / 100
        progresso_diario = self.lucro_diario / max(0.01, alvo_diario_valor)  # Evitar divis√£o por zero
        
        # Base de capital (padr√£o)
        capital_padrao = CAPITAL_TOTAL * CAPITAL_POR_OPERACAO_PERCENTUAL / 100
        
        # Aplicar redu√ß√£o noturna se necess√°rio
        if modo_baixa_liquidez and criterios_noturnos:
            capital_padrao *= criterios_noturnos['capital_ajuste']
            print(f"üåô Capital ajustado para modo baixa liquidez: {capital_padrao:.2f} USDT")
        
        # Ajustar com base no progresso
        if progresso_diario < 0.3:  # Muito abaixo da meta (menos de 30%)
            return min(capital_padrao * 1.5, CAPITAL_TOTAL * 0.6)  # At√© 60% do capital
        elif progresso_diario < 0.6:  # Abaixo da meta (30-60%)
            return min(capital_padrao * 1.25, CAPITAL_TOTAL * 0.5)  # At√© 50% do capital
        elif progresso_diario < 0.8:  # Pr√≥ximo da meta (60-80%)
            return capital_padrao  # Manter padr√£o
        else:  # Meta quase atingida (>80%)
            return capital_padrao * 0.75  # Reduzir exposi√ß√£o
    
    def executar_ciclo(self):
        """
        M√©todo principal de execu√ß√£o do bot a cada ciclo de verifica√ß√£o
        """
        try:
            # Obter dados atuais
            df = self.get_klines()
            
            # Verificar stop loss/take profit
            ticker = self.client.get_symbol_ticker(symbol=self.symbol)
            preco_atual = float(ticker['price'])
            
            # Se estiver em uma opera√ß√£o
            if self.em_operacao:
                # Verificar take profit parcial
                self.verificar_take_profit_parcial(preco_atual, self.calcular_parametros_ordem(preco_atual)[0])
                
                # Verificar stop loss
                self.verificar_status_ordens()
                
                # Verificar trailing stop
                self.verificar_stop_loss_movel(preco_atual)
            
            # Verificar se h√° sinal para nova entrada
            if not self.em_operacao:
                sinal, mensagem = self.check_signal(df)
                
                if sinal:
                    # Calcular par√¢metros para ordem
                    params, msg_params = self.calcular_parametros_ordem(preco_atual)
                    
                    if params:
                        # Verificar viabilidade da opera√ß√£o
                        viavel, msg_viabilidade = self.verificar_viabilidade_operacao(preco_atual, params)
                        
                        if viavel:
                            # Executar ordem de compra
                            self.executar_ordem_compra(params)
            
            # Verificar alertas
            self.verificar_alertas(df)
            
            # Verificar metas di√°rias
            self.verificar_metas_diarias()
            
        except Exception as e:
            print(f"Erro no ciclo de execu√ß√£o: {e}")
            import traceback
            traceback.print_exc()
    def determinar_nivel_confianca(self, pontuacao, criterios_atendidos, criterios_total):
        """
        Determina o n√≠vel de confian√ßa baseado na pontua√ß√£o e crit√©rios atendidos
        """
        # Crit√©rios atendidos (propor√ß√£o)
        proporcao_criterios = criterios_atendidos / criterios_total
        
        # MUITO mais seletivo
        if pontuacao >= 8.0 and proporcao_criterios >= 0.8:  # Super restritivo
            return "alta", 1.0  # 100% do capital alocado para o trade
        elif pontuacao >= 6.5 and proporcao_criterios >= 0.7:  # Muito restritivo
            return "m√©dia", 0.7  # 70% do capital alocado
        elif pontuacao >= 5.5 and proporcao_criterios >= 0.6:  # Restritivo
            return "baixa", 0.4  # 40% do capital alocado
        else:
            return "insuficiente", 0  # N√£o entrar
    
    def buscar_moeda_alternativa(self):
        """Buscar moedas alternativas quando a atual n√£o apresenta boas oportunidades"""
        try:
            print("Buscando moedas alternativas com boas oportunidades...")
            self.registrar_log("DIVERSIFICA√á√ÉO: Iniciando busca por moedas alternativas")
            
            # Lista de moedas populares para verificar (pode ser expandida)
            moedas_potenciais = [
                "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT", 
                "DOTUSDT", "ATOMUSDT", "AVAXUSDT", "MATICUSDT", "LINKUSDT",
                "NEARUSDT", "FTMUSDT", "SANDUSDT", "APEUSDT", "DOGEUSDT"
            ]
            
            # Remover a moeda atual da lista
            if self.symbol in moedas_potenciais:
                moedas_potenciais.remove(self.symbol)
                
            # Adicionar algumas stablecoins para usar em mercados inst√°veis
            stablecoins = ["USDCUSDT", "BUSDUSDT", "TUSDUSDT"]
            
            # Verificar mercado geral (sentimento)
            try:
                sentimento_score, sentimento_desc, fear_greed_index = self.analisar_sentimento_mercado()
                
                # Se o sentimento for de medo extremo ou gan√¢ncia extrema, considerar stablecoins
                if fear_greed_index <= 20 or fear_greed_index >= 80:
                    print(f"‚ö†Ô∏è Sentimento extremo do mercado: {sentimento_desc}. Considerando stablecoins.")
                    moedas_potenciais = stablecoins + moedas_potenciais[:5]  # Priorizar stablecoins e top 5 moedas
            except Exception as e:
                print(f"Erro ao analisar sentimento: {e}")
            
            resultados = []
            
            # Analisar cada moeda
            for moeda in moedas_potenciais[:10]:  # Limitar a 10 moedas para n√£o sobrecarregar a API
                try:
                    # Salvar s√≠mbolo atual temporariamente
                    simbolo_original = self.symbol
                    
                    # Trocar para a nova moeda temporariamente
                    self.symbol = moeda
                    
                    # Obter dados da moeda
                    df = self.get_klines()
                    
                    # Verificar sinal
                    sinal, mensagem = self.check_signal(df)
                    pontuacao = float(mensagem.split("Pontua√ß√£o: ")[1].split("/")[0]) if "Pontua√ß√£o: " in mensagem else 0
                    
                    # Verificar confirma√ß√£o em m√∫ltiplos timeframes
                    confirmado, _ = self.confirmar_multiplos_timeframes(self.timeframe)
                    
                    # Armazenar resultado
                    resultados.append({
                        'symbol': moeda,
                        'pontuacao': pontuacao,
                        'sinal': sinal,
                        'confirmado': confirmado,
                        'mensagem': mensagem
                    })
                    
                    print(f"An√°lise de {moeda}: Pontua√ß√£o {pontuacao:.1f}/10 | Sinal: {'SIM' if sinal else 'N√ÉO'} | Confirmado: {'SIM' if confirmado else 'N√ÉO'}")
                    
                    # Restaurar s√≠mbolo original
                    self.symbol = simbolo_original
                    
                    # Pausar para n√£o sobrecarregar a API
                    time.sleep(1)
                    
                except Exception as e:
                    print(f"Erro ao analisar {moeda}: {e}")
                    # Restaurar s√≠mbolo original em caso de erro
                    self.symbol = simbolo_original
            
            # Ordenar resultados por pontua√ß√£o
            resultados = sorted(resultados, key=lambda x: (x['sinal'], x['confirmado'], x['pontuacao']), reverse=True)
            
            # Filtrar apenas moedas com sinal
            boas_opcoes = [r for r in resultados if r['sinal'] and r['pontuacao'] >= 5.0]
            
            if boas_opcoes:
                # Encontrou boas op√ß√µes
                melhor_opcao = boas_opcoes[0]
                print(f"‚úÖ Encontrada moeda alternativa: {melhor_opcao['symbol']} com pontua√ß√£o {melhor_opcao['pontuacao']:.1f}/10")
                
                # Enviar alerta no Telegram
                self.send_telegram_alert(
                    f"üîÑ SUGEST√ÉO DE MOEDA ALTERNATIVA\n\n"
                    f"Moeda: {melhor_opcao['symbol']}\n"
                    f"Pontua√ß√£o: {melhor_opcao['pontuacao']:.1f}/10\n\n"
                    f"An√°lise:\n{melhor_opcao['mensagem']}\n\n"
                    f"Deseja mudar para esta moeda? Use o comando:\n"
                    f"/mudar_{melhor_opcao['symbol']}"
                )
                
                self.registrar_log(f"MOEDA ALTERNATIVA: Sugerido {melhor_opcao['symbol']} com pontua√ß√£o {melhor_opcao['pontuacao']:.1f}")
                return melhor_opcao['symbol']
            else:
                print("‚ùå Nenhuma moeda alternativa com boas oportunidades encontrada.")
                self.registrar_log("MOEDA ALTERNATIVA: Nenhuma op√ß√£o vi√°vel encontrada")
                return None
                
        except Exception as e:
            print(f"Erro ao buscar moedas alternativas: {e}")
            self.registrar_log(f"ERRO AO BUSCAR MOEDAS: {str(e)}")
            return None
    
    def verificar_reentrada_rapida(self, preco_atual):
        """Verificar se √© poss√≠vel fazer reentrada r√°pida em tend√™ncia forte"""
        # Verificar se a √∫ltima opera√ß√£o foi lucrativa
        if not hasattr(self, 'ultima_operacao_resultado') or not hasattr(self, 'ultima_operacao_motivo'):
            return False
            
        if self.ultima_operacao_resultado <= 0:
            return False  # N√£o reentrar ap√≥s perda
            
        # Verificar se a sa√≠da foi por take profit (n√£o por stop loss)
        if "Take Profit" not in self.ultima_operacao_motivo:
            return False
            
        # Obter dados recentes
        df = self.get_klines()
        if len(df) < MA_CURTA:
            return False
            
        ultimo = df.iloc[-1]
        
        # Verificar condi√ß√µes de tend√™ncia forte
        tendencia_forte = False
        
        # 1. MA curta bem acima da MA m√©dia
        if ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}'] * 1.015:
            tendencia_forte = True
            
        # 2. Volume acima da m√©dia
        if ultimo['volume'] > ultimo['volume_media'] * 1.5:
            tendencia_forte = True
            
        # 3. RSI em zona favor√°vel e subindo
        if 'rsi' in ultimo and 40 <= ultimo['rsi'] <= 65:
            if len(df) >= 3 and df['rsi'].iloc[-1] > df['rsi'].iloc[-2] > df['rsi'].iloc[-3]:
                tendencia_forte = True
        
        # 4. Pre√ßo atual acima do √∫ltimo pre√ßo de sa√≠da
        if hasattr(self, 'ultimo_preco_saida') and preco_atual > self.ultimo_preco_saida * 1.005:
            tendencia_forte = True
            
        # Exigir pelo menos 2 condi√ß√µes para considerar reentrada
        condicoes_atendidas = sum([
            ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}'] * 1.015,
            ultimo['volume'] > ultimo['volume_media'] * 1.5,
            40 <= ultimo.get('rsi', 0) <= 65 and len(df) >= 3 and df['rsi'].iloc[-1] > df['rsi'].iloc[-2],
            hasattr(self, 'ultimo_preco_saida') and preco_atual > self.ultimo_preco_saida * 1.005
        ])
        
        return condicoes_atendidas >= 2

    def inicializar_db_analise_macro(self):
        """Inicializar banco de dados SQLite para armazenar an√°lises macro"""
        self.db_path = os.path.join(self.pasta_macro, "macro_analysis.db")
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Criar tabela se n√£o existir
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS macro_indicators (
            timestamp TEXT PRIMARY KEY,
            fear_greed_index INTEGER,
            btc_dominance REAL,
            market_cap_total REAL, 
            btc_correlation REAL,
            eth_correlation REAL,
            sentiment_score REAL,
            correlation_score REAL,
            dominance_score REAL,
            symbol TEXT
        )
        ''')
        
        conn.commit()
        conn.close()
        
        print(f"Banco de dados de an√°lise macro inicializado: {self.db_path}")

    def analisar_sentimento_mercado(self):
        """Analisar o sentimento do mercado usando Fear & Greed Index"""
        # Verificar cache
        tempo_atual = time.time()
        if (self.cache_macro['sentimento']['dados'] is not None and 
            tempo_atual - self.cache_macro['sentimento']['timestamp'] < CACHE_TEMPO_EXPIRACAO['sentimento']):
            self.registrar_log("SENTIMENTO: Usando dados em cache")
            return self.cache_macro['sentimento']['dados']
        
        try:
            # Fear & Greed Index da Alternative.me
            url = "https://api.alternative.me/fng/?limit=2"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            sentimento_score = 1.0  # Valor neutro padr√£o
            sentimento_desc = "Neutro (padr√£o)"
            fear_greed_value = 50   # Valor neutro padr√£o
            
            if 'data' in data and len(data['data']) > 0:
                fear_greed_value = int(data['data'][0]['value'])
                fear_greed_classification = data['data'][0]['value_classification']
                
                # Atribuir uma pontua√ß√£o com base no √≠ndice
                if fear_greed_value <= 20:  # Medo extremo - potencial de compra
                    sentimento_score = 1.2
                    sentimento_desc = f"Medo Extremo ({fear_greed_value}) - Poss√≠vel oportunidade"
                elif fear_greed_value <= 40:  # Medo - positivo para compra
                    sentimento_score = 1.1
                    sentimento_desc = f"Medo ({fear_greed_value}) - Favor√°vel"
                elif fear_greed_value <= 60:  # Neutro
                    sentimento_score = 1.0
                    sentimento_desc = f"Neutro ({fear_greed_value})"
                elif fear_greed_value <= 80:  # Gan√¢ncia - cautela
                    sentimento_score = 0.9
                    sentimento_desc = f"Gan√¢ncia ({fear_greed_value}) - Cautela"
                else:  # Gan√¢ncia extrema - risco elevado
                    sentimento_score = 0.8
                    sentimento_desc = f"Gan√¢ncia Extrema ({fear_greed_value}) - Alto risco"
                
                # Analisar tend√™ncia do sentimento
                if len(data['data']) > 1:
                    fear_greed_yesterday = int(data['data'][1]['value'])
                    trend = fear_greed_value - fear_greed_yesterday
                    
                    if trend > 5:
                        sentimento_desc += f" | Melhorando (+{trend})"
                        sentimento_score += 0.05
                    elif trend < -5:
                        sentimento_desc += f" | Piorando ({trend})"
                        sentimento_score -= 0.05
            
            # Guardar no cache
            self.cache_macro['sentimento'] = {
                'dados': (sentimento_score, sentimento_desc, fear_greed_value),
                'timestamp': tempo_atual
            }
            
            self.registrar_log(f"SENTIMENTO: {sentimento_desc} (score: {sentimento_score})")
            return sentimento_score, sentimento_desc, fear_greed_value
        
        except Exception as e:
            self.registrar_log(f"ERRO SENTIMENTO: {str(e)}")
            return 1.0, f"Neutro (erro: {str(e)})", 50
    
    def analisar_dominancia_btc(self):
        """Analisar a domin√¢ncia do Bitcoin e fluxos de capital no mercado"""
        # Verificar cache
        tempo_atual = time.time()
        if (self.cache_macro['dominancia']['dados'] is not None and 
            tempo_atual - self.cache_macro['dominancia']['timestamp'] < CACHE_TEMPO_EXPIRACAO['dominancia']):
            self.registrar_log("DOMIN√ÇNCIA: Usando dados em cache")
            return self.cache_macro['dominancia']['dados']
        
        try:
            # Usar CoinGecko para dados de domin√¢ncia
            url = "https://api.coingecko.com/api/v3/global"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            dominancia_score = 1.0  # Valor neutro padr√£o
            dominancia_desc = "Neutro (padr√£o)"
            dominancia_btc = 50.0    # Valor padr√£o
            market_cap_total = 0.0   # Valor padr√£o
            
            if 'data' in data and 'market_cap_percentage' in data['data']:
                dominancia_btc = data['data']['market_cap_percentage']['btc']
                dominancia_eth = data['data']['market_cap_percentage'].get('eth', 0)
                market_cap_total = data['data']['total_market_cap']['usd']
                
                # Carregar hist√≥rico de domin√¢ncia do arquivo
                historico_file = os.path.join(self.pasta_macro, "historico_dominancia.json")
                historico_dominancia = []
                
                if os.path.exists(historico_file):
                    try:
                        with open(historico_file, 'r') as f:
                            historico_dominancia = json.load(f)
                    except:
                        historico_dominancia = []
                
                # Adicionar dados atuais ao hist√≥rico
                timestamp_atual = datetime.now().isoformat()
                historico_dominancia.append({
                    'timestamp': timestamp_atual,
                    'btc_dominance': dominancia_btc,
                    'eth_dominance': dominancia_eth,
                    'total_market_cap': market_cap_total
                })
                
                # Manter apenas os √∫ltimos 30 registros
                if len(historico_dominancia) > 30:
                    historico_dominancia = historico_dominancia[-30:]
                
                # Salvar hist√≥rico atualizado
                with open(historico_file, 'w') as f:
                    json.dump(historico_dominancia, f)
                
                # Analisar tend√™ncia de domin√¢ncia
                if len(historico_dominancia) >= 2:
                    # Encontrar registro anterior mais pr√≥ximo de 24 horas atr√°s
                    dominancia_anterior = historico_dominancia[0]['btc_dominance']
                    variacao_dominancia = dominancia_btc - dominancia_anterior
                    
                    # An√°lise baseada na domin√¢ncia
                    base_moeda = self.symbol.replace('USDT', '')
                    
                    # Regras para altcoins (n√£o-BTC)
                    if base_moeda != 'BTC':
                        if variacao_dominancia < -1.0:
                            # Domin√¢ncia BTC caindo = potencial Altseason
                            dominancia_score = 1.1
                            dominancia_desc = f"Favor√°vel para altcoins: BTC domin√¢ncia caindo ({variacao_dominancia:.2f}%)"
                        elif variacao_dominancia > 1.0:
                            # Domin√¢ncia BTC aumentando = BTC forte
                            dominancia_score = 0.9
                            dominancia_desc = f"Cautela para altcoins: Domin√¢ncia BTC aumentando ({variacao_dominancia:.2f}%)"
                        else:
                            dominancia_score = 1.0
                            dominancia_desc = f"Neutro: Domin√¢ncia BTC est√°vel ({dominancia_btc:.2f}%)"
                    # Regras para Bitcoin
                    else:
                        if variacao_dominancia > 1.0:
                            dominancia_score = 1.1
                            dominancia_desc = f"Favor√°vel para BTC: Domin√¢ncia aumentando ({variacao_dominancia:.2f}%)"
                        elif variacao_dominancia < -1.0:
                            dominancia_score = 0.9
                            dominancia_desc = f"Cautela para BTC: Domin√¢ncia caindo ({variacao_dominancia:.2f}%)"
                        else:
                            dominancia_score = 1.0
                            dominancia_desc = f"Neutro para BTC: Domin√¢ncia est√°vel ({dominancia_btc:.2f}%)"
            
            # Guardar no cache
            self.cache_macro['dominancia'] = {
                'dados': (dominancia_score, dominancia_desc, dominancia_btc, market_cap_total),
                'timestamp': tempo_atual
            }
            
            self.registrar_log(f"DOMIN√ÇNCIA: {dominancia_desc} (score: {dominancia_score})")
            return dominancia_score, dominancia_desc, dominancia_btc, market_cap_total
        
        except Exception as e:
            self.registrar_log(f"ERRO DOMIN√ÇNCIA: {str(e)}")
            return 1.0, f"Neutro (erro: {str(e)})", 50.0, 0.0
    
    def analisar_correlacoes(self):
        """Analisar correla√ß√£o do ativo com BTC e ETH"""
        # Verificar cache
        tempo_atual = time.time()
        if (self.cache_macro['correlacao']['dados'] is not None and 
            tempo_atual - self.cache_macro['correlacao']['timestamp'] < CACHE_TEMPO_EXPIRACAO['correlacao']):
            self.registrar_log("CORRELA√á√ÉO: Usando dados em cache")
            return self.cache_macro['correlacao']['dados']
        
        try:
            # Obter dados do par atual
            df_ativo = self.get_klines()
            fechamentos_ativo = df_ativo['close'].values
            
            correlacao_score = 1.0  # Valor neutro padr√£o
            correlacao_desc = "Neutro (padr√£o)"
            correlacao_btc = 0.0     # Valor padr√£o
            correlacao_eth = 0.0     # Valor padr√£o
            
            # Se o ativo n√£o for Bitcoin, calcular correla√ß√£o com BTC
            if self.symbol != 'BTCUSDT':
                try:
                    # Obter klines BTC no mesmo timeframe
                    klines_btc = self.client.get_klines(
                        symbol='BTCUSDT',
                        interval=self.timeframe,
                        limit=50  # √öltimas 50 velas
                    )
                    
                    df_btc = pd.DataFrame(klines_btc, columns=[
                        'timestamp', 'open', 'high', 'low', 'close', 'volume',
                        'close_time', 'quote_asset_volume', 'number_of_trades',
                        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                    ])
                    
                    df_btc['timestamp'] = pd.to_datetime(df_btc['timestamp'], unit='ms')
                    df_btc['close'] = df_btc['close'].astype(float)
                    
                    # Calcular retornos percentuais (varia√ß√£o)
                    df_btc['return'] = df_btc['close'].pct_change()
                    df_temp = df_ativo.copy()
                    df_temp['return'] = df_temp['close'].pct_change()
                    
                    # Remover primeiros registros com NaN
                    df_btc = df_btc.iloc[1:]
                    df_temp = df_temp.iloc[1:].reset_index(drop=True)
                    
                    # Garantir mesmo n√∫mero de registros para correla√ß√£o
                    min_len = min(len(df_btc), len(df_temp))
                    df_btc = df_btc.iloc[-min_len:].reset_index(drop=True)
                    df_temp = df_temp.iloc[-min_len:].reset_index(drop=True)
                    
                    # Calcular correla√ß√£o de Pearson com Bitcoin
                    correlacao_btc = df_temp['return'].corr(df_btc['return'])
                    
                    # An√°lise baseada na correla√ß√£o
                    if correlacao_btc > 0.7:
                        # Alta correla√ß√£o positiva
                        correlacao_score = 0.9 if 'BTC' not in self.symbol else 1.1
                        correlacao_desc = f"Alta correla√ß√£o com BTC ({correlacao_btc:.2f})"
                        
                        if 'BTC' not in self.symbol:
                            correlacao_desc += " - pouca diversifica√ß√£o"
                        else:
                            correlacao_desc += " - movimento alinhado ao mercado"
                            
                    elif correlacao_btc < 0.3 and correlacao_btc >= 0:
                        # Baixa correla√ß√£o positiva
                        correlacao_score = 1.1 if 'BTC' not in self.symbol else 0.9
                        correlacao_desc = f"Baixa correla√ß√£o com BTC ({correlacao_btc:.2f})"
                        
                        if 'BTC' not in self.symbol:
                            correlacao_desc += " - boa diversifica√ß√£o"
                        else:
                            correlacao_desc += " - movimento independente do mercado"
                            
                    elif correlacao_btc < 0:
                        # Correla√ß√£o negativa
                        correlacao_score = 1.2 if 'BTC' not in self.symbol else 0.8
                        correlacao_desc = f"Correla√ß√£o negativa com BTC ({correlacao_btc:.2f})"
                        
                        if 'BTC' not in self.symbol:
                            correlacao_desc += " - excelente diversifica√ß√£o/hedge"
                        else:
                            correlacao_desc += " - movimento contr√°rio ao mercado (incomum)"
                    else:
                        correlacao_score = 1.0
                        correlacao_desc = f"Correla√ß√£o moderada com BTC ({correlacao_btc:.2f})"
                    
                    # Obter tamb√©m correla√ß√£o com ETH para an√°lise adicional
                    try:
                        klines_eth = self.client.get_klines(
                            symbol='ETHUSDT',
                            interval=self.timeframe,
                            limit=50
                        )
                        
                        df_eth = pd.DataFrame(klines_eth, columns=[
                            'timestamp', 'open', 'high', 'low', 'close', 'volume',
                            'close_time', 'quote_asset_volume', 'number_of_trades',
                            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                        ])
                        
                        df_eth['timestamp'] = pd.to_datetime(df_eth['timestamp'], unit='ms')
                        df_eth['close'] = df_eth['close'].astype(float)
                        df_eth['return'] = df_eth['close'].pct_change()
                        df_eth = df_eth.iloc[1:].reset_index(drop=True)
                        
                        # Igualar tamanhos novamente
                        min_len = min(len(df_eth), len(df_temp))
                        df_eth = df_eth.iloc[-min_len:].reset_index(drop=True)
                        df_temp = df_temp.iloc[-min_len:].reset_index(drop=True)
                        
                        correlacao_eth = df_temp['return'].corr(df_eth['return'])
                        
                        # Se correla√ß√£o com ETH for significativamente diferente de BTC
                        if abs(correlacao_eth - correlacao_btc) > 0.3:
                            if correlacao_eth > correlacao_btc:
                                correlacao_desc += f" | Maior correla√ß√£o com ETH ({correlacao_eth:.2f})"
                            else:
                                correlacao_desc += f" | Menor correla√ß√£o com ETH ({correlacao_eth:.2f})"
                    except Exception as eth_error:
                        self.registrar_log(f"Erro ao calcular correla√ß√£o com ETH: {str(eth_error)}")
                        correlacao_eth = 0.0
                        
                except Exception as btc_error:
                    self.registrar_log(f"Erro ao calcular correla√ß√£o com BTC: {str(btc_error)}")
                    correlacao_btc = 0.0
                    correlacao_score = 1.0
                    correlacao_desc = f"Erro ao calcular correla√ß√£o: {str(btc_error)}"
            else:
                # Para o Bitcoin, a correla√ß√£o √© sempre 1.0 consigo mesmo
                correlacao_btc = 1.0
                correlacao_score = 1.0
                correlacao_desc = "BTC - refer√™ncia para correla√ß√µes"
            
            # Guardar no cache
            self.cache_macro['correlacao'] = {
                'dados': (correlacao_score, correlacao_desc, correlacao_btc, correlacao_eth),
                'timestamp': tempo_atual
            }
            
            self.registrar_log(f"CORRELA√á√ÉO: {correlacao_desc} (score: {correlacao_score})")
            return correlacao_score, correlacao_desc, correlacao_btc, correlacao_eth
        
        except Exception as e:
            self.registrar_log(f"ERRO CORRELA√á√ÉO: {str(e)}")
            return 1.0, f"Neutro (erro: {str(e)})", 0.0, 0.0
    
    def salvar_analise_macro(self, fear_greed_index, btc_dominance, market_cap_total, 
                         btc_correlation, eth_correlation, sentiment_score, 
                         correlation_score, dominance_score):
        """Salvar an√°lise macro no banco de dados"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            timestamp = datetime.now().isoformat()
            
            # Verificar se j√° existe registro com este timestamp
            cursor.execute("SELECT COUNT(*) FROM macro_indicators WHERE timestamp = ?", (timestamp,))
            if cursor.fetchone()[0] > 0:
                # Atualizar registro existente
                cursor.execute('''
                UPDATE macro_indicators 
                SET fear_greed_index = ?, btc_dominance = ?, market_cap_total = ?,
                    btc_correlation = ?, eth_correlation = ?, sentiment_score = ?,
                    correlation_score = ?, dominance_score = ?
                WHERE timestamp = ?
                ''', (
                    fear_greed_index,
                    btc_dominance,
                    market_cap_total,
                    btc_correlation,
                    eth_correlation,
                    sentiment_score,
                    correlation_score,
                    dominance_score,
                    timestamp
                ))
            else:
                # Inserir novo registro
                cursor.execute('''
                INSERT INTO macro_indicators 
                (timestamp, fear_greed_index, btc_dominance, market_cap_total, 
                btc_correlation, eth_correlation, sentiment_score, 
                correlation_score, dominance_score, symbol)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    timestamp,
                    fear_greed_index,
                    btc_dominance,
                    market_cap_total,
                    btc_correlation,
                    eth_correlation,
                    sentiment_score,
                    correlation_score,
                    dominance_score,
                    self.symbol
                ))
            
            conn.commit()
            conn.close()
            self.registrar_log(f"An√°lise macro salva no banco de dados em {timestamp}")
        except Exception as e:
            self.registrar_log(f"ERRO ao salvar an√°lise macro: {str(e)}")

    def visualizar_indicadores_macro(self):
        """Gerar gr√°ficos de indicadores macro para an√°lise"""
        try:
            conn = sqlite3.connect(self.db_path)
            # Obter dados dos √∫ltimos 30 dias
            query = """
            SELECT * FROM macro_indicators 
            WHERE symbol = ? 
            ORDER BY timestamp DESC 
            LIMIT 50
            """
            
            df = pd.read_sql_query(query, conn, params=(self.symbol,))
            conn.close()
            
            if len(df) < 2:
                self.registrar_log("Dados insuficientes para visualiza√ß√£o de indicadores macro")
                return
            
            # Preparar dados
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp')  # Garantir ordem cronol√≥gica
            
            plt.figure(figsize=(14, 12))
            
            # Gr√°fico de Fear & Greed
            ax1 = plt.subplot(3, 1, 1)
            ax1.plot(df['timestamp'], df['fear_greed_index'], 'b-', linewidth=2)
            ax1.axhline(y=50, color='r', linestyle='--', alpha=0.5)
            ax1.fill_between(df['timestamp'], 0, 25, color='green', alpha=0.2)
            ax1.fill_between(df['timestamp'], 75, 100, color='red', alpha=0.2)
            ax1.set_title('Fear & Greed Index')
            ax1.set_ylabel('√çndice')
            ax1.grid(True)
            
            # Formatar eixo X
            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))
            
            # Gr√°fico de Domin√¢ncia BTC
            ax2 = plt.subplot(3, 1, 2, sharex=ax1)
            ax2.plot(df['timestamp'], df['btc_dominance'], 'r-', linewidth=2)
            ax2.set_title('Domin√¢ncia do Bitcoin (%)')
            ax2.set_ylabel('Domin√¢ncia (%)')
            ax2.grid(True)
            
            # Gr√°fico de Correla√ß√£o
            ax3 = plt.subplot(3, 1, 3, sharex=ax1)
            ax3.plot(df['timestamp'], df['btc_correlation'], 'g-', linewidth=2, label='Correla√ß√£o com BTC')
            
            if not df['eth_correlation'].isnull().all():
                ax3.plot(df['timestamp'], df['eth_correlation'], 'm--', linewidth=1.5, label='Correla√ß√£o com ETH')
            
            ax3.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax3.axhline(y=0.7, color='r', linestyle='--', alpha=0.5)
            ax3.axhline(y=-0.7, color='r', linestyle='--', alpha=0.5)
            ax3.set_title(f'Correla√ß√£o do {self.symbol}')
            ax3.set_ylabel('Correla√ß√£o (Pearson)')
            ax3.set_ylim(-1, 1)
            ax3.grid(True)
            ax3.legend()
            
            plt.tight_layout()
            
            # Salvar gr√°fico
            data_hora = datetime.now().strftime("%Y%m%d_%H%M%S")
            caminho_grafico = os.path.join(self.pasta_macro, f"macro_indicadores_{data_hora}.png")
            plt.savefig(caminho_grafico)
            plt.close()
            
            self.registrar_log(f"Gr√°ficos de indicadores macro salvos em: {caminho_grafico}")
            
            # Enviar gr√°fico por Telegram
            try:
                self.send_telegram_image(
                    caminho_grafico, 
                    caption=f"üìä *An√°lise Macro para {self.symbol}*\n\n"
                            f"Fear & Greed Index: {df['fear_greed_index'].iloc[-1]}\n"
                            f"Domin√¢ncia BTC: {df['btc_dominance'].iloc[-1]:.2f}%\n"
                            f"Correla√ß√£o BTC: {df['btc_correlation'].iloc[-1]:.2f}"
                )
            except Exception as e:
                self.registrar_log(f"Erro ao enviar gr√°fico: {str(e)}")
            
            return caminho_grafico
            
        except Exception as e:
            self.registrar_log(f"ERRO ao visualizar indicadores macro: {str(e)}")
            return None
    
    def verificar_seguranca(self):
        """Verificar condi√ß√µes de seguran√ßa para continuar operando - Continua monitorando mesmo em pausa"""
        # Verificar sequ√™ncia de perdas
        if self.sequencia_perdas_atual >= MAX_PERDAS_CONSECUTIVAS:
            # Verificar se j√° estamos em pausa
            if not hasattr(self, 'pausa_ate'):
                # Configurar pausa
                self.pausa_ate = datetime.now() + timedelta(hours=TEMPO_PAUSA_APOS_PERDAS)
                mensagem = (f"‚ö†Ô∏è SISTEMA EM PAUSA ‚ö†Ô∏è\n\n"
                            f"Motivo: {self.sequencia_perdas_atual} perdas consecutivas\n"
                            f"Pausa at√©: {self.pausa_ate.strftime('%d/%m/%Y %H:%M')}\n"
                            f"Continuando em modo de monitoramento apenas.")
                self.send_telegram_alert(mensagem)
                self.registrar_log(f"PAUSA ATIVADA: {self.sequencia_perdas_atual} perdas consecutivas")
                return False
            elif datetime.now() < self.pausa_ate:
                tempo_restante = self.pausa_ate - datetime.now()
                horas = tempo_restante.total_seconds() // 3600
                minutos = (tempo_restante.total_seconds() % 3600) // 60
                print(f"‚ö†Ô∏è Sistema em pausa por mais {int(horas)}h:{int(minutos)}m devido a perdas consecutivas")
                return False
            else:
                # Pausa conclu√≠da
                delattr(self, 'pausa_ate')
                self.sequencia_perdas_atual = 0  # Resetar contador de perdas
                self.registrar_log("PAUSA FINALIZADA: Opera√ß√µes normalizadas")
                
                # Enviar alerta
                self.send_telegram_alert(
                    f"‚úÖ PAUSA FINALIZADA\n\n"
                    f"O sistema est√° retomando as opera√ß√µes normalmente ap√≥s o per√≠odo de pausa."
                )
                return True
        
        # Verificar drawdown
        carteira_atual = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria
        drawdown = (self.valor_maximo_carteira - carteira_atual) / self.valor_maximo_carteira * 100
        
        if drawdown > MAX_DRAWDOWN_PERCENTUAL:
            if not hasattr(self, 'pausa_ate'):
                # Configurar pausa
                self.pausa_ate = datetime.now() + timedelta(hours=TEMPO_PAUSA_APOS_PERDAS)
                mensagem = (f"‚ö†Ô∏è SISTEMA EM PAUSA ‚ö†Ô∏è\n\n"
                            f"Motivo: Drawdown de {drawdown:.2f}% excede limite de {MAX_DRAWDOWN_PERCENTUAL}%\n"
                            f"Pausa at√©: {self.pausa_ate.strftime('%d/%m/%Y %H:%M')}\n"
                            f"Continuando em modo de monitoramento apenas.")
                self.send_telegram_alert(mensagem)
                self.registrar_log(f"PAUSA ATIVADA: Drawdown de {drawdown:.2f}%")
                return False
            elif datetime.now() < self.pausa_ate:
                return False
            else:
                # Pausa conclu√≠da
                delattr(self, 'pausa_ate')
                self.registrar_log("PAUSA FINALIZADA: Opera√ß√µes normalizadas")
                
                # Enviar alerta
                self.send_telegram_alert(
                    f"‚úÖ PAUSA FINALIZADA\n\n"
                    f"O sistema est√° retomando as opera√ß√µes normalmente ap√≥s o per√≠odo de pausa por drawdown."
                )
                return True
        
        return True  # Prosseguir com opera√ß√µes

    def ajustar_criterios_noturnos(self):
        """Ajusta os crit√©rios de trading com base no hor√°rio global, n√£o apenas local"""
        # Obter a hora atual no fuso hor√°rio UTC
        hora_utc = datetime.now(timezone.utc).hour
        
        # Per√≠odo de baixa liquidez global (noite nos EUA/madrugada na Europa, 3h-7h UTC)
        periodo_baixa_liquidez = 3 <= hora_utc < 7
        
        # Usando hora local para registro
        hora_local = datetime.now().hour
        
        if periodo_baixa_liquidez:
            # Crit√©rios mais rigorosos durante o per√≠odo de baixa liquidez
            self.criterios_noturnos = {
                # Aumentar pontua√ß√£o m√≠nima
                'pontuacao_minima': 7.5,  # Aumentado de 6.5 para 7.5
                
                # Exigir volume ainda maior
                'volume_minimo_pct': VOLUME_MINIMO_PERCENTUAL * 1.5,  # 50% a mais
                
                # Reduzir o tamanho da posi√ß√£o
                'capital_ajuste': 0.7,  # 70% do capital normal
                
                # Exigir volatilidade mais controlada
                'atr_min': ATR_MINIMO_OPERACAO * 1.2,  # 20% maior
                'atr_max': ATR_MINIMO_OPERACAO * 2.0,  # Limite superior
                
                # Exigir mais confirma√ß√µes
                'contra_indicacoes_max': 0  # Zero contra-indica√ß√µes permitidas
            }
            
            print(f"üåô MODO BAIXA LIQUIDEZ ATIVADO: Crit√©rios mais rigorosos aplicados (hora UTC: {hora_utc}h, local: {hora_local}h)")
            self.registrar_log(f"MODO BAIXA LIQUIDEZ: Crit√©rios ajustados para maior seguran√ßa - UTC {hora_utc}h")
            return True, self.criterios_noturnos
        else:
            # Crit√©rios padr√£o
            self.criterios_noturnos = None
            return False, None

    def ajustar_criterios_por_contexto(self, df):
        """
        Ajusta crit√©rios com base no contexto atual do mercado
        """
        # Obter dados recentes
        ultimo = df.iloc[-1]
        
        # Detectar mercado em extremo (oversold/overbought)
        rsi_extremo = ultimo['rsi'] < 30 or ultimo['rsi'] > 70
        
        # Detectar volatilidade anormal
        volatilidade_alta = ultimo.get('atr_percent', 0) > 0.3
        
        # Detectar consolida√ß√£o (lateraliza√ß√£o)
        range_recente = df['high'].iloc[-10:].max() - df['low'].iloc[-10:].min()
        range_percentual = range_recente / df['close'].iloc[-10] * 100
        consolidacao = range_percentual < 1.5
        
        # Ajustar crit√©rios - LIMIARES REDUZIDOS
        # Ajustar crit√©rios - LIMIARES REDUZIDOS
        if rsi_extremo:
            return {
                'min_pontuacao': 2.0,  # Reduzido de 3.5 para 2.0
                'volume_minimo_pct': 80,  # Reduzido de 100 para 80
                'ma_alinhamento_obrigatorio': False
            }
        elif volatilidade_alta:
            return {
                'min_pontuacao': 3.5,  # Reduzido de 5.0 para 3.5
                'volume_minimo_pct': 120,  # Reduzido de 130 para 120
                'ma_alinhamento_obrigatorio': True
            }
        elif consolidacao:
            return {
                'min_pontuacao': 2.5,  # Reduzido de 4.0 para 2.5
                'volume_minimo_pct': 100,  # Reduzido de 120 para 100
                'ma_alinhamento_obrigatorio': False
            }
        else:
            return {
                'min_pontuacao': 4.0,  # Reduzido de 5.5 para 4.0
                'volume_minimo_pct': 100,  # Reduzido de 115 para 100
                'ma_alinhamento_obrigatorio': True
            }
            
    def avaliar_troca_de_moeda(self):
        """Avalia se deve buscar uma nova moeda ap√≥s completar uma opera√ß√£o"""
        # Verificar quando foi a √∫ltima opera√ß√£o
        if not hasattr(self, 'ultima_operacao_timestamp'):
            return False
        
        # Verificar h√° quanto tempo a √∫ltima opera√ß√£o foi conclu√≠da
        tempo_desde_ultima_operacao = (datetime.now() - self.ultima_operacao_timestamp).total_seconds()
        # Se faz menos de 2 minutos, aguardar um pouco mais
        if tempo_desde_ultima_operacao < 120:
            return False
        
        # Obter dados atualizados
        df = self.get_klines()
        
        # Verificar crit√©rios t√©cnicos atuais
        pontuacao, _ = self.check_signal(df)
        
        # Se a pontua√ß√£o estiver abaixo do m√≠nimo, considerar trocar
        if not pontuacao:
            print("Moeda atual n√£o apresenta mais crit√©rios favor√°veis. Considerando trocar...")
            self.registrar_log("AVALIA√á√ÉO: Moeda atual sem crit√©rios favor√°veis - buscando alternativas")
            return True
        
        return False 
    
    def confirmar_multiplos_timeframes(self, timeframe_principal):
        """Verificar sinal em m√∫ltiplos timeframes para confirma√ß√£o"""
        print("Analisando m√∫ltiplos timeframes para confirma√ß√£o...")
        
        # Definir timeframes para confirma√ß√£o (al√©m do principal)
        if timeframe_principal == '3m':
            timeframes_confirmacao = ['15m']
        elif timeframe_principal == '5m':
            timeframes_confirmacao = ['15m']
        elif timeframe_principal == '15m':
            timeframes_confirmacao = ['1h']
        else:
            timeframes_confirmacao = ['15m']
        
        # Obter dados e analisar o timeframe principal
        df_principal = self.get_klines()
        sinal_principal, mensagem_principal = self.check_signal(df_principal)
        
        if not sinal_principal:
            return False, "Sem sinal no timeframe principal"
        
        # Analisar timeframes de confirma√ß√£o
        confirmacoes = 0
        mensagens = [f"‚úÖ {self.timeframe}: {mensagem_principal}"]
        
        for tf in timeframes_confirmacao:
            try:
                # Obter klines para o timeframe de confirma√ß√£o
                klines = self.client.get_klines(
                    symbol=self.symbol,
                    interval=tf,
                    limit=300
                )
                
                # Converter para DataFrame
                df = pd.DataFrame(klines, columns=[
                    'timestamp', 'open', 'high', 'low', 'close', 'volume',
                    'close_time', 'quote_asset_volume', 'number_of_trades',
                    'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                ])
                
                # Converter tipos de dados
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df['open'] = df['open'].astype(float)
                df['high'] = df['high'].astype(float)
                df['low'] = df['low'].astype(float)
                df['close'] = df['close'].astype(float)
                df['volume'] = df['volume'].astype(float)
                
                # Calcular indicadores necess√°rios
                # M√©dias m√≥veis
                df[f'ma_{MA_CURTA}'] = df['close'].rolling(window=MA_CURTA).mean()
                df[f'ma_{MA_MEDIA}'] = df['close'].rolling(window=MA_MEDIA).mean()
                df[f'ma_{MA_LONGA}'] = df['close'].rolling(window=MA_LONGA).mean()
                
                # RSI
                if len(df) >= RSI_PERIODO:
                    df['rsi'] = talib.RSI(df['close'].values, timeperiod=RSI_PERIODO)
                else:
                    delta = df['close'].diff()
                    gain = delta.clip(lower=0)
                    loss = -1 * delta.clip(upper=0)
                    ema_up = gain.ewm(com=RSI_PERIODO-1, adjust=False).mean()
                    ema_down = loss.ewm(com=RSI_PERIODO-1, adjust=False).mean()
                    rs = ema_up / ema_down
                    df['rsi'] = 100 - (100 / (1 + rs))
                
                # Volume
                df['volume_media'] = df['volume'].rolling(window=VOLUME_PERIODO).mean()
                
                # Verificar tend√™ncia no timeframe maior
                ultimo = df.iloc[-1]
                penultimo = df.iloc[-2]
                
                # Verifica√ß√µes b√°sicas para confirma√ß√£o
                ma_curta_acima_media = ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}']
                ma_media_acima_longa = ultimo[f'ma_{MA_MEDIA}'] > ultimo[f'ma_{MA_LONGA}']
                rsi_favoravel = ultimo['rsi'] > 40 and ultimo['rsi'] < 70
                
                # Determinar se este timeframe confirma
                if (ma_curta_acima_media and ma_media_acima_longa and rsi_favoravel):
                    confirmacoes += 1
                    mensagens.append(f"‚úÖ {tf}: Confirmado (MAs alinhadas, RSI favor√°vel)")
                elif ma_curta_acima_media and rsi_favoravel:
                    confirmacoes += 0.5
                    mensagens.append(f"‚ö†Ô∏è {tf}: Parcialmente confirmado (MA curta > MA m√©dia, RSI favor√°vel)")
                else:
                    mensagens.append(f"‚ùå {tf}: Sem confirma√ß√£o")
                    
            except Exception as e:
                print(f"Erro ao analisar timeframe {tf}: {e}")
                continue
        
        # Determinar resultado final
        if confirmacoes >= len(timeframes_confirmacao):
            return True, "\n".join(mensagens)
        elif confirmacoes >= 0.5:
            return True, "\n".join(mensagens) + "\nAviso: Confirma√ß√£o parcial apenas"
        else:
            return False, "\n".join(mensagens) + "\nAviso: Sem confirma√ß√£o em outros timeframes"
    def calcular_atr(self, df, periodo=ATR_PERIODO):
        """Calcular o Average True Range (ATR) usando TALib"""
        if len(df) >= periodo:
            df['atr'] = talib.ATR(df['high'].values, df['low'].values, df['close'].values, timeperiod=periodo)
            df['atr_percent'] = df['atr'] / df['close'] * 100
            return df
        else:
            # C√°lculo manual alternativo se n√£o tiver dados suficientes
            high = df['high']
            low = df['low']
            close = df['close'].shift(1)
            
            tr1 = high - low
            tr2 = abs(high - close)
            tr3 = abs(low - close)
            
            tr = pd.DataFrame({'tr1': tr1, 'tr2': tr2, 'tr3': tr3}).max(axis=1)
            df['atr'] = tr.rolling(window=periodo).mean()
            df['atr_percent'] = df['atr'] / df['close'] * 100
            return df

    def analisar_smart_money(self, df, periodo_obv=20):
        """
        Analisa comportamento de "smart money" usando OBV e outros indicadores de volume
        
        Smart Money refere-se a investidores institucionais ou grandes players
        que frequentemente deixam "pegadas" nos gr√°ficos atrav√©s de padr√µes de volume.
        
        Args:
            df: DataFrame com dados OHLCV
            periodo_obv: per√≠odo para m√©dia m√≥vel do OBV
            
        Returns:
            dict: Dicion√°rio com resultados da an√°lise
        """
        # Criar c√≥pia para n√£o alterar o original
        df_copia = df.copy()
        
        # Calcular On-Balance Volume (OBV)
        obv = [0]
        for i in range(1, len(df_copia)):
            if df_copia['close'].iloc[i] > df_copia['close'].iloc[i-1]:
                obv.append(obv[-1] + df_copia['volume'].iloc[i])
            elif df_copia['close'].iloc[i] < df_copia['close'].iloc[i-1]:
                obv.append(obv[-1] - df_copia['volume'].iloc[i])
            else:
                obv.append(obv[-1])
        
        df_copia['obv'] = obv
        
        # Calcular m√©dia m√≥vel do OBV
        df_copia['obv_ma'] = df_copia['obv'].rolling(window=periodo_obv).mean()
        
        # Calcular Money Flow Index (MFI) - Alternativa ao RSI que inclui volume
        # Primeiro calcular o Money Flow (MF)
        df_copia['typical_price'] = (df_copia['high'] + df_copia['low'] + df_copia['close']) / 3
        df_copia['money_flow'] = df_copia['typical_price'] * df_copia['volume']
        
        # Identificar money flow positivo e negativo
        df_copia['positive_flow'] = 0.0
        df_copia['negative_flow'] = 0.0

        
        for i in range(1, len(df_copia)):
            if df_copia['typical_price'].iloc[i] > df_copia['typical_price'].iloc[i-1]:
                df_copia.loc[df_copia.index[i], 'positive_flow'] = float(df_copia['money_flow'].iloc[i])
            else:
                df_copia.loc[df_copia.index[i], 'negative_flow'] = df_copia['money_flow'].iloc[i]
        
        # Calcular MFI
        periodo_mfi = 14  # Per√≠odo padr√£o
        
        if len(df_copia) >= periodo_mfi:
            df_copia['positive_flow_sum'] = df_copia['positive_flow'].rolling(window=periodo_mfi).sum()
            df_copia['negative_flow_sum'] = df_copia['negative_flow'].rolling(window=periodo_mfi).sum()
            
            # Evitar divis√£o por zero
            df_copia['money_ratio'] = df_copia.apply(
                lambda x: x['positive_flow_sum'] / max(x['negative_flow_sum'], 0.001), 
                axis=1
            )
            
            df_copia['mfi'] = 100 - (100 / (1 + df_copia['money_ratio']))
        
        # Detectar acumula√ß√£o e distribui√ß√£o
        df_copia['smart_acumulacao'] = False
        df_copia['smart_distribuicao'] = False
        
        # Detec√ß√£o baseada em diverg√™ncias OBV-pre√ßo e MFI-pre√ßo
        if 'mfi' in df_copia.columns:
            for i in range(20, len(df_copia)):
                # Verificar janela de 10 candles
                preco_janela = df_copia['close'].iloc[i-10:i+1]
                obv_janela = df_copia['obv'].iloc[i-10:i+1]
                mfi_janela = df_copia['mfi'].iloc[i-10:i+1]
                
                # Calcular mudan√ßas percentuais
                preco_mudanca = (preco_janela.iloc[-1] - preco_janela.iloc[0]) / preco_janela.iloc[0] * 100
                obv_mudanca = (obv_janela.iloc[-1] - obv_janela.iloc[0]) / max(abs(obv_janela.iloc[0]), 0.001) * 100
                mfi_mudanca = mfi_janela.iloc[-1] - mfi_janela.iloc[0]
                
                # Diverg√™ncias positivas (acumula√ß√£o)
                # Pre√ßo est√°vel/caindo, mas OBV ou MFI subindo significativamente
                if preco_mudanca < 1.0 and (obv_mudanca > 5.0 or mfi_mudanca > 10):
                    df_copia.loc[df_copia.index[i], 'smart_acumulacao'] = True
                
                # Diverg√™ncias negativas (distribui√ß√£o)
                # Pre√ßo est√°vel/subindo, mas OBV ou MFI caindo significativamente
                if preco_mudanca > 1.0 and (obv_mudanca < -5.0 or mfi_mudanca < -10):
                    df_copia.loc[df_copia.index[i], 'smart_distribuicao'] = True
        
        # Verificar Chaikin Money Flow (CMF) se tivermos dados suficientes
        if len(df_copia) >= 20:
            # Money Flow Multiplier
            df_copia['mf_multiplier'] = ((df_copia['close'] - df_copia['low']) - 
                                    (df_copia['high'] - df_copia['close'])) / (df_copia['high'] - df_copia['low'])
            df_copia['mf_multiplier'] = df_copia['mf_multiplier'].replace([np.inf, -np.inf], 0)

            
            # Money Flow Volume
            df_copia['mf_volume'] = df_copia['mf_multiplier'] * df_copia['volume']
            
            # Chaikin Money Flow (CMF)
            df_copia['cmf'] = df_copia['mf_volume'].rolling(window=20).sum() / df_copia['volume'].rolling(window=20).sum()
            
            # Identificar acumula√ß√£o e distribui√ß√£o baseado no CMF
            for i in range(20, len(df_copia)):
                if i > 0 and df_copia['cmf'].iloc[i] > 0.1 and df_copia['cmf'].iloc[i] > df_copia['cmf'].iloc[i-1]:
                    df_copia.loc[df_copia.index[i], 'smart_acumulacao'] = True
                elif i > 0 and df_copia['cmf'].iloc[i] < -0.1 and df_copia['cmf'].iloc[i] < df_copia['cmf'].iloc[i-1]:
                    df_copia.loc[df_copia.index[i], 'smart_distribuicao'] = True
        
        # Preparar resumo da an√°lise
        acumulacao_recente = df_copia['smart_acumulacao'].iloc[-5:].any()
        distribuicao_recente = df_copia['smart_distribuicao'].iloc[-5:].any()
        
        # Calcular a "for√ßa" dos sinais
        if 'cmf' in df_copia.columns and len(df_copia) > 5:
            cmf_atual = df_copia['cmf'].iloc[-1]
            cmf_anterior = df_copia['cmf'].iloc[-5]
            cmf_forca = abs(cmf_atual - cmf_anterior)
        else:
            cmf_forca = 0
        
        if 'obv' in df_copia.columns and len(df_copia) > 5:
            obv_atual = df_copia['obv'].iloc[-1]
            obv_anterior = df_copia['obv'].iloc[-5]
            obv_forca = abs((obv_atual - obv_anterior) / max(abs(obv_anterior), 0.001) * 100)
        else:
            obv_forca = 0
        
        # Resumo da an√°lise
        resumo = {
            'acumulacao_detectada': acumulacao_recente,
            'distribuicao_detectada': distribuicao_recente,
            'cmf_atual': df_copia['cmf'].iloc[-1] if 'cmf' in df_copia.columns else None,
            'obv_atual': df_copia['obv'].iloc[-1],
            'forca_sinal': max(cmf_forca, obv_forca/10),  # Normalizar para faixa similar
            'df': df_copia  # DataFrame com todas as m√©tricas calculadas
        }
        
        return resumo
    def detectar_divergencias(self, df):
        """
        Detecta diverg√™ncias entre pre√ßo e indicadores t√©cnicos (RSI, MACD)
        
        Tipos de diverg√™ncias:
        - Positiva: Pre√ßo faz m√≠nimos mais baixos, mas o indicador faz m√≠nimos mais altos (sinal de compra)
        - Negativa: Pre√ßo faz m√°ximos mais altos, mas o indicador faz m√°ximos mais baixos (sinal de venda)
        
        Returns:
            list: Lista de diverg√™ncias encontradas com detalhes
        """
        divergencias = []
        
        # Precisamos de pelo menos 30 candles para detec√ß√£o confi√°vel
        if len(df) < 30:
            return divergencias
        
        # Fun√ß√£o para identificar pontos de inflex√£o (picos e vales)
        def encontrar_picos_vales(serie, janela=5):
            picos = []
            vales = []
            
            # Ignorar os primeiros e √∫ltimos candles da janela
            for i in range(janela, len(serie) - janela):
                # Verificar se √© um pico
                if all(serie[i] > serie[i-j] for j in range(1, janela+1)) and \
                all(serie[i] > serie[i+j] for j in range(1, janela+1)):
                    picos.append((i, serie[i]))
                    
                # Verificar se √© um vale
                if all(serie[i] < serie[i-j] for j in range(1, janela+1)) and \
                all(serie[i] < serie[i+j] for j in range(1, janela+1)):
                    vales.append((i, serie[i]))
                    
            return picos, vales
        
        # Encontrar picos e vales no pre√ßo
        preco_picos, preco_vales = encontrar_picos_vales(df['close'].values)
        
        # Verificar diverg√™ncias no RSI se dispon√≠vel
        if 'rsi' in df.columns:
            # Encontrar picos e vales no RSI
            rsi_picos, rsi_vales = encontrar_picos_vales(df['rsi'].values)
            
            # Verificar diverg√™ncias negativas (pre√ßo sobe, RSI desce - sinal de venda)
            if len(preco_picos) >= 2 and len(rsi_picos) >= 2:
                # Ordenar por √≠ndice (do mais recente para o mais antigo)
                preco_picos = sorted(preco_picos, key=lambda x: x[0], reverse=True)
                rsi_picos = sorted(rsi_picos, key=lambda x: x[0], reverse=True)
                
                # Comparar √∫ltimos dois picos
                if preco_picos[0][1] > preco_picos[1][1]:  # Pre√ßo fazendo m√°ximos mais altos
                    # Encontrar os picos do RSI correspondentes (pr√≥ximos em tempo)
                    for rp1 in rsi_picos:
                        if abs(rp1[0] - preco_picos[0][0]) <= 3:  # Dentro de 3 candles
                            for rp2 in rsi_picos:
                                if abs(rp2[0] - preco_picos[1][0]) <= 3:  # Dentro de 3 candles
                                    # Verificar se RSI est√° fazendo m√°ximos mais baixos
                                    if rp1[1] < rp2[1]:
                                        divergencias.append({
                                            'tipo': 'negativa',
                                            'indicador': 'rsi',
                                            'local': 'm√°ximo',
                                            'indice_preco': preco_picos[0][0],
                                            'indice_indicador': rp1[0],
                                            'forca': abs((rp2[1] - rp1[1]) / rp2[1]) * 100,  # Em porcentagem
                                            'candles_atras': len(df) - 1 - preco_picos[0][0]
                                        })
            
            # Verificar diverg√™ncias positivas (pre√ßo desce, RSI sobe - sinal de compra)
            if len(preco_vales) >= 2 and len(rsi_vales) >= 2:
                # Ordenar por √≠ndice (do mais recente para o mais antigo)
                preco_vales = sorted(preco_vales, key=lambda x: x[0], reverse=True)
                rsi_vales = sorted(rsi_vales, key=lambda x: x[0], reverse=True)
                
                # Comparar √∫ltimos dois vales
                if preco_vales[0][1] < preco_vales[1][1]:  # Pre√ßo fazendo m√≠nimos mais baixos
                    # Encontrar os vales do RSI correspondentes
                    for rv1 in rsi_vales:
                        if abs(rv1[0] - preco_vales[0][0]) <= 3:  # Dentro de 3 candles
                            for rv2 in rsi_vales:
                                if abs(rv2[0] - preco_vales[1][0]) <= 3:  # Dentro de 3 candles
                                    # Verificar se RSI est√° fazendo m√≠nimos mais altos
                                    if rv1[1] > rv2[1]:
                                        divergencias.append({
                                            'tipo': 'positiva',
                                            'indicador': 'rsi',
                                            'local': 'm√≠nimo',
                                            'indice_preco': preco_vales[0][0],
                                            'indice_indicador': rv1[0],
                                            'forca': abs((rv1[1] - rv2[1]) / rv2[1]) * 100,  # Em porcentagem
                                            'candles_atras': len(df) - 1 - preco_vales[0][0]
                                        })
        
        # Verificar diverg√™ncias no MACD (se dispon√≠vel)
        if 'macd' in df.columns and 'macd_signal' in df.columns:
            # Calcular histograma MACD se ainda n√£o existir
            if 'macd_hist' not in df.columns:
                df['macd_hist'] = df['macd'] - df['macd_signal']
            
            # Encontrar picos e vales no histograma MACD
            macd_picos, macd_vales = encontrar_picos_vales(df['macd_hist'].values)
            
            # An√°lise similar para MACD - apenas para diverg√™ncias mais evidentes
            # Implementa√ß√£o semelhante √† do RSI acima...
            # (C√≥digo omitido por brevidade, seria uma repeti√ß√£o usando MACD em vez de RSI)
        
        # Filtrar apenas diverg√™ncias recentes (√∫ltimos 10 candles)
        divergencias_recentes = [d for d in divergencias if d['candles_atras'] <= 10]

    def calcular_bonus_especiais(self, df):
        """
        Calcula bonifica√ß√µes para situa√ß√µes especiais de alta probabilidade
        """
        bonus = 0
        justificativas = []

        divergencias = self.detectar_divergencias(df) or []
        
        # RSI baixo com candle de revers√£o
        if df['rsi'].iloc[-1] < 30:
            # Verificar candle de revers√£o (martelo, doji, etc)
            padrao, nome_padrao, forca = self.identificar_padrao_candle(df)
            if padrao and nome_padrao in ['martelo', 'doji', 'engolfo_alta']:
                bonus += 3.5  # AUMENTADO DE 2.0 PARA 3.5
                justificativas.append(f"RSI oversold ({df['rsi'].iloc[-1]:.1f}) com padr√£o de revers√£o ({nome_padrao})")
        
        # Forte diverg√™ncia RSI/Pre√ßo
        divergencias = self.detectar_divergencias(df) or []
        for div in divergencias:
            if div['tipo'] == 'positiva' and div['forca'] > 50 and div['candles_atras'] <= 3:
                bonus += 3.0  # AUMENTADO DE 1.5 PARA 3.0
                justificativas.append(f"Forte diverg√™ncia positiva (for√ßa: {div['forca']:.1f}%)")
        
        # Volume muito acima da m√©dia em suporte
        if df['volume'].iloc[-1] > df['volume_media'].iloc[-1] * 2:
            # Verificar se est√° em suporte
            sr_modelo = self.modelar_suporte_resistencia_avancado(df)
            for suporte in sr_modelo['suportes_fortes']:
                if suporte['proximidade'] == 'muito_proximo':
                    bonus += 3.0  # AUMENTADO DE 1.5 PARA 3.0
                    justificativas.append(f"Volume 2x+ acima da m√©dia em suporte forte")
        
        return bonus, justificativas
    def identificar_padrao_candle(self, df):
        """Identificar padr√µes de candles fortes e relevantes"""
        if len(df) < 3:
            return False, ""
            
        ultimo = df.iloc[-1]
        penultimo = df.iloc[-2]
        antepenultimo = df.iloc[-3]
        
        # Calcular tamanho do corpo dos candles (em %)
        corpo_ultimo = abs(ultimo['close'] - ultimo['open']) / ultimo['open'] * 100
        corpo_penultimo = abs(penultimo['close'] - penultimo['open']) / penultimo['open'] * 100
        
        # Verificar se √© um candle de alta
        candle_alta = ultimo['close'] > ultimo['open']
        
        # Marubozu (candle com corpo grande e sombras pequenas)
        sombra_superior = ultimo['high'] - max(ultimo['open'], ultimo['close'])
        sombra_inferior = min(ultimo['open'], ultimo['close']) - ultimo['low']
        
        corpo_grande = corpo_ultimo > 0.25  # Aumentado para filtrar padr√µes mais fortes
        sombras_pequenas = (sombra_superior + sombra_inferior) < (corpo_ultimo * 0.3)
        
        marubozu = corpo_grande and sombras_pequenas and candle_alta
        
        # Engolfo de alta
        penultimo_baixa = penultimo['close'] < penultimo['open']
        engolfo = (candle_alta and penultimo_baixa and 
                ultimo['open'] <= penultimo['close'] and
                ultimo['close'] > penultimo['open'])
        
        # Martelo de fundo (hammer)
        if candle_alta:
            sombra_inferior_grande = sombra_inferior > (corpo_ultimo * 2)
            sombra_superior_pequena = sombra_superior < (corpo_ultimo * 0.5)
            martelo = sombra_inferior_grande and sombra_superior_pequena
        else:
            martelo = False
        
        # Verificar pullback seguido de retomada (para re-entrada)
        pullback_retomada = False
        if len(df) >= 6:
            # Verificar se houve queda e depois recupera√ß√£o no RSI
            rsi_recente = df['rsi'].iloc[-6:].values
            if (rsi_recente[0] > rsi_recente[1] > rsi_recente[2] and  # Queda no RSI
                rsi_recente[3] < rsi_recente[4] < rsi_recente[5]):    # Recupera√ß√£o no RSI
                pullback_retomada = True
        
        # Verificar padr√£o de tr√™s candles em sequ√™ncia ascendente
        tres_soldados = False
        if len(df) >= 3:
            if (df['close'].iloc[-3] > df['open'].iloc[-3] and
                df['close'].iloc[-2] > df['open'].iloc[-2] and
                df['close'].iloc[-1] > df['open'].iloc[-1] and
                df['close'].iloc[-1] > df['close'].iloc[-2] > df['close'].iloc[-3]):
                tres_soldados = True
        
        # Determinar padr√£o encontrado
        padrao_encontrado = False
        padrao_nome = ""
        
        if marubozu:
            padrao_encontrado = True
            padrao_nome = "Marubozu de alta"
        elif engolfo:
            padrao_encontrado = True
            padrao_nome = "Engolfo de alta"
        elif martelo:
            padrao_encontrado = True
            padrao_nome = "Martelo (hammer)"
        elif pullback_retomada:
            padrao_encontrado = True
            padrao_nome = "Pullback seguido de retomada"
        elif tres_soldados:
            padrao_encontrado = True
            padrao_nome = "Tr√™s soldados brancos"
        
        # Classificar for√ßa do padr√£o
        forca_padrao = 0
        if padrao_encontrado:
            if marubozu or tres_soldados:
                forca_padrao = 2  # Padr√£o forte
            elif engolfo:
                forca_padrao = 1.5  # Padr√£o moderado a forte
            else:
                forca_padrao = 1  # Padr√£o padr√£o
        
        return padrao_encontrado, padrao_nome, forca_padrao

    def get_symbol_info(self):
        """Obter informa√ß√µes sobre o par de trading"""
        info = self.client.get_symbol_info(self.symbol)
        
        # A estrutura pode variar, ent√£o vamos encontrar os filtros corretos
        self.tick_size = 0.01  # Valor padr√£o
        self.step_size = 0.00001  # Valor padr√£o
        self.min_qty = 0.00001  # Valor padr√£o
        
        # Encontrar o filtro PRICE_FILTER para tick_size
        for filter in info['filters']:
            if filter['filterType'] == 'PRICE_FILTER':
                self.tick_size = float(filter['tickSize'])
            elif filter['filterType'] == 'LOT_SIZE':
                self.step_size = float(filter['stepSize'])
                self.min_qty = float(filter['minQty'])
        
        print(f"Tick size: {self.tick_size}")
        print(f"Step size: {self.step_size}")
        print(f"Quantidade m√≠nima: {self.min_qty}")

    def normalize_quantity(self, qty):
        """Normaliza a quantidade de acordo com as regras da Binance"""
        print(f"Quantidade ANTES da normaliza√ß√£o: {qty}")
        step_size = self.step_size
        step_size_str = str(step_size)

        if '.' in step_size_str:
            step_size_decimals = len(step_size_str.split('.')[1])
        else:
            step_size_decimals = 0

        # Corrige o qty para m√∫ltiplo do step_size
        qty_adjusted = round(qty - (qty % float(step_size)), step_size_decimals)

        # Se a quantidade for muito pequena, calcular uma quantidade m√≠nima vi√°vel
        if qty_adjusted <= 0:
            # Use no m√≠nimo 0.001 BTC (aproximadamente $86 no pre√ßo atual)
            min_viable_qty = max(0.001, self.min_qty * 100)
            return min_viable_qty
        
        print(f"Quantidade AP√ìS normaliza√ß√£o: {qty_adjusted}")
        return qty_adjusted


    def normalize_price(self, price):
        """Normaliza o pre√ßo de acordo com as regras da Binance"""
        tick_size = self.tick_size
        tick_size_decimals = len(str(tick_size).split('.')[1])
        return round(price, tick_size_decimals)

    def get_klines(self):
        """Obter dados de velas (klines) da Binance e calcular indicadores"""
        # Obter mais candles para c√°lculos mais precisos
        max_periodos = max(300, VOLUME_PERIODO + 100)
        
        klines = self.client.get_klines(
            symbol=self.symbol,
            interval=self.timeframe,
            limit=max_periodos
        )
        
        # Converter para DataFrame
        df = pd.DataFrame(klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        
        # Converter tipos de dados
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df['open'] = df['open'].astype(float)
        df['high'] = df['high'].astype(float)
        df['low'] = df['low'].astype(float)
        df['close'] = df['close'].astype(float)
        df['volume'] = df['volume'].astype(float)
        
        # Calcular m√©dias m√≥veis
        df[f'ma_{MA_CURTA}'] = df['close'].rolling(window=MA_CURTA).mean()
        df[f'ma_{MA_MEDIA}'] = df['close'].rolling(window=MA_MEDIA).mean()
        df[f'ma_{MA_LONGA}'] = df['close'].rolling(window=MA_LONGA).mean()
        
        # Calcular inclina√ß√£o da MA Longa
        if len(df) > MA_LONGA + 5:
            ma_longa_recente = df[f'ma_{MA_LONGA}'].iloc[-5:].values
            # Calcular inclina√ß√£o m√©dia dos √∫ltimos 5 per√≠odos
            df['ma_longa_inclinacao'] = (ma_longa_recente[-1] - ma_longa_recente[0]) / ma_longa_recente[0] * 100
        else:
            df['ma_longa_inclinacao'] = 0
        
        # Calcular RSI usando TALib
        if len(df) >= RSI_PERIODO:
            df['rsi'] = talib.RSI(df['close'].values, timeperiod=RSI_PERIODO)
        else:
            # C√°lculo manual alternativo se n√£o tiver dados suficientes
            delta = df['close'].diff()
            up = delta.clip(lower=0)
            down = -1 * delta.clip(upper=0)
            ema_up = up.ewm(com=RSI_PERIODO-1, adjust=False).mean()
            ema_down = down.ewm(com=RSI_PERIODO-1, adjust=False).mean()
            rs = ema_up / ema_down
            df['rsi'] = 100 - (100 / (1 + rs))
        
        # Calcular MACD
        if len(df) >= MACD_SLOW:
            macd, signal, hist = talib.MACD(
                df['close'].values, 
                fastperiod=MACD_FAST, 
                slowperiod=MACD_SLOW, 
                signalperiod=MACD_SIGNAL
            )
            df['macd'] = macd
            df['macd_signal'] = signal
            df['macd_hist'] = hist
        
        # Adicionar c√°lculo da m√©dia de volume
        df['volume_media'] = df['volume'].rolling(window=VOLUME_PERIODO).mean()
        
        # Calcular ATR
        df = self.calcular_atr(df, ATR_PERIODO)
        
        # Identificar zonas de suporte e resist√™ncia
        self.identificar_suporte_resistencia(df)
        
        # Calcular bandas de Bollinger
        if len(df) >= 20:
            df['bb_upper'], df['bb_middle'], df['bb_lower'] = talib.BBANDS(
                df['close'].values,
                timeperiod=20,
                nbdevup=2,
                nbdevdn=2,
                matype=0
            )
        
        return df

    def verificar_mas_com_tolerancia(self, df, tolerancia_pct=0.1):
        """
        Verifica alinhamento e cruzamento de MAs com toler√¢ncia
        """
        ultimo = df.iloc[-1]
        penultimo = df.iloc[-2]
        
        # Calcular diferen√ßas percentuais
        diff_curta_media = abs(ultimo[f'ma_{MA_CURTA}'] - ultimo[f'ma_{MA_MEDIA}']) / ultimo[f'ma_{MA_MEDIA}'] * 100
        diff_media_longa = abs(ultimo[f'ma_{MA_MEDIA}'] - ultimo[f'ma_{MA_LONGA}']) / ultimo[f'ma_{MA_LONGA}'] * 100
        
        # Verificar alinhamento com toler√¢ncia
        alinhamento = (
            (ultimo[f'ma_{MA_CURTA}'] >= ultimo[f'ma_{MA_MEDIA}'] * (1 - tolerancia_pct/100)) and
            (ultimo[f'ma_{MA_MEDIA}'] >= ultimo[f'ma_{MA_LONGA}'] * (1 - tolerancia_pct/100))
        )
        
        # Verificar cruzamento com toler√¢ncia
        cruzamento = (
            (penultimo[f'ma_{MA_CURTA}'] <= penultimo[f'ma_{MA_MEDIA}'] * (1 + tolerancia_pct/100)) and
            (ultimo[f'ma_{MA_CURTA}'] >= ultimo[f'ma_{MA_MEDIA}'] * (1 - tolerancia_pct/100))
        )
        
        return {
            'alinhamento': alinhamento,
            'cruzamento': cruzamento,
            'diff_curta_media': diff_curta_media,
            'diff_media_longa': diff_media_longa
        }

    def calcular_volume_delta(self, df):
        """
        Calcula o Volume Delta (diferen√ßa entre volume de compra e venda)
        
        O Volume Delta nos d√° uma vis√£o mais precisa sobre a press√£o de compra 
        versus venda do que o volume tradicional.
        
        Args:
            df: DataFrame com dados OHLCV
            
        Returns:
            DataFrame: DataFrame original com colunas adicionais de Volume Delta
        """
        # Criar c√≥pia para n√£o alterar o original
        df_copia = df.copy()
        
        # Identificar candles de alta e baixa
        candles_alta = df_copia['close'] > df_copia['open']
        candles_baixa = df_copia['close'] < df_copia['open']
        candles_neutros = df_copia['close'] == df_copia['open']
        
        # Calcular volume delta por candle
        df_copia['volume_delta'] = 0.0  # Inicializar com zero
        
        # Volume positivo para candles de alta (press√£o compradora)
        df_copia.loc[candles_alta, 'volume_delta'] = df_copia.loc[candles_alta, 'volume']
        
        # Volume negativo para candles de baixa (press√£o vendedora)
        df_copia.loc[candles_baixa, 'volume_delta'] = -df_copia.loc[candles_baixa, 'volume']
        
        # Para candles neutros, usar metade do volume
        df_copia.loc[candles_neutros, 'volume_delta'] = df_copia.loc[candles_neutros, 'volume'] * 0.1
        
        # Calcular volume delta cumulativo (semelhante ao OBV)
        df_copia['volume_delta_cumulativo'] = df_copia['volume_delta'].cumsum()
        
        # Calcular m√©dias m√≥veis do volume delta
        df_copia['volume_delta_ma5'] = df_copia['volume_delta'].rolling(window=5).mean()
        df_copia['volume_delta_ma20'] = df_copia['volume_delta'].rolling(window=20).mean()
        
        # Calcular for√ßa direcional do volume
        df_copia['forca_volume'] = df_copia['volume_delta_ma5'] / df_copia['volume'].rolling(window=5).mean()
        
        # Identificar acumula√ß√£o e distribui√ß√£o
        df_copia['acumulacao'] = False
        df_copia['distribuicao'] = False
        
        # Crit√©rios para acumula√ß√£o (press√£o compradora forte)
        condicao_acumulacao = (
            (df_copia['volume_delta_ma5'] > 0) & 
            (df_copia['volume_delta_ma5'] > df_copia['volume_delta_ma20']) &
            (df_copia['volume'] > df_copia['volume_media'] * 1.2)
        )
        df_copia.loc[condicao_acumulacao, 'acumulacao'] = True
        
        # Crit√©rios para distribui√ß√£o (press√£o vendedora forte)
        condicao_distribuicao = (
            (df_copia['volume_delta_ma5'] < 0) & 
            (df_copia['volume_delta_ma5'] < df_copia['volume_delta_ma20']) &
            (df_copia['volume'] > df_copia['volume_media'] * 1.2)
        )
        df_copia.loc[condicao_distribuicao, 'distribuicao'] = True
        
        return df_copia

    def detectar_manipulacao(self, df, limiar_volume=2.5, limiar_movimento=1.5):
        """
        Detecta poss√≠veis padr√µes de manipula√ß√£o e armadilhas de liquidez
        
        Identifica√ß√£o de padr√µes como:
        - Armadilhas de liquidez (stop hunts)
        - Falsos breakouts
        - Manipula√ß√£o de volume
        
        Args:
            df: DataFrame com dados OHLCV
            limiar_volume: multiplicador m√≠nimo do volume m√©dio para considerar anormal
            limiar_movimento: multiplicador do ATR para considerar movimento anormal
            
        Returns:
            list: Lista de padr√µes suspeitos detectados com detalhes
        """
        padroes_suspeitos = []
        
        # Precisamos de pelo menos 30 candles para an√°lise confi√°vel
        if len(df) < 30:
            return padroes_suspeitos
        
        # Calcular valores de refer√™ncia
        df_analise = df.copy()
        
        # Volume m√©dio (20 per√≠odos)
        df_analise['volume_media'] = df_analise['volume'].rolling(window=20).mean()
        df_analise['volume_ratio'] = df_analise['volume'] / df_analise['volume_media']
        
        # Volatilidade m√©dia (ATR)
        if 'atr' not in df_analise.columns:
            # Calcular ATR se n√£o existir
            tr1 = df_analise['high'] - df_analise['low']
            tr2 = abs(df_analise['high'] - df_analise['close'].shift())
            tr3 = abs(df_analise['low'] - df_analise['close'].shift())
            
            tr = pd.DataFrame({'tr1': tr1, 'tr2': tr2, 'tr3': tr3}).max(axis=1)
            df_analise['atr'] = tr.rolling(window=14).mean()
            df_analise['atr_percent'] = df_analise['atr'] / df_analise['close'] * 100
        
        # Varia√ß√£o percentual entre candles
        df_analise['pct_change'] = df_analise['close'].pct_change() * 100
        
        # 1. Detectar "Stop Hunts" / Armadilhas de Liquidez
        for i in range(5, len(df_analise) - 1):
            # Verifique se existe um movimento forte seguido por revers√£o r√°pida
            movimento_preco = abs(df_analise['pct_change'].iloc[i])
            movimento_seguinte = df_analise['pct_change'].iloc[i+1]
            volume_anormal = df_analise['volume_ratio'].iloc[i] > limiar_volume
            volatilidade_anormal = movimento_preco > df_analise['atr_percent'].iloc[i] * limiar_movimento
            
            # Condi√ß√£o para stop hunt: movimento forte, volume alto, r√°pida revers√£o
            reversao_rapida = movimento_preco * movimento_seguinte < 0  # Sinais opostos
            reversao_significativa = abs(movimento_seguinte) > movimento_preco * 0.5
            
            if volume_anormal and volatilidade_anormal and reversao_rapida and reversao_significativa:
                # Determinar se √© armadilha de alta ou baixa
                if df_analise['pct_change'].iloc[i] < 0:  # Queda seguida de alta
                    tipo = "armadilha_baixa"  # Ca√ßa de stops de vendas
                    descricao = "Armadilha de baixa (ca√ßa de stops de vendas)"
                else:  # Alta seguida de queda
                    tipo = "armadilha_alta"  # Ca√ßa de stops de compras
                    descricao = "Armadilha de alta (ca√ßa de stops de compras)"
                
                # Calcular for√ßa do padr√£o
                forca = (df_analise['volume_ratio'].iloc[i] / limiar_volume) * (movimento_preco / (df_analise['atr_percent'].iloc[i] * limiar_movimento))
                
                padroes_suspeitos.append({
                    'tipo': tipo,
                    'posicao': i,
                    'preco': df_analise['close'].iloc[i],
                    'volume': df_analise['volume'].iloc[i],
                    'movimento': df_analise['pct_change'].iloc[i],
                    'reversao': df_analise['pct_change'].iloc[i+1],
                    'descricao': descricao,
                    'forca': min(1.0, forca),  # Limitar a 1.0
                    'candles_atras': len(df_analise) - 1 - i
                })
        
        # 2. Detectar Falsos Breakouts
        for i in range(20, len(df_analise) - 1):
            # Encontrar n√≠veis significativos (m√°ximos e m√≠nimos recentes)
            max_recente = df_analise['high'].iloc[i-20:i].max()
            min_recente = df_analise['low'].iloc[i-20:i].min()
            
            # Verificar breakout de alta falso (penetra acima do m√°ximo mas fecha abaixo)
            if (df_analise['high'].iloc[i] > max_recente * 1.001 and  # Quebra ligeiramente o n√≠vel
                df_analise['close'].iloc[i] < max_recente and  # Fecha abaixo do n√≠vel
                df_analise['close'].iloc[i+1] < df_analise['open'].iloc[i]):  # Pr√≥ximo candle confirma fracasso
                
                padroes_suspeitos.append({
                    'tipo': "falso_breakout_alta",
                    'posicao': i,
                    'nivel': max_recente,
                    'descricao': "Falso breakout de alta (quebra de resist√™ncia falha)",
                    'forca': min(1.0, abs(df_analise['high'].iloc[i] / max_recente - 1) * 50),
                    'candles_atras': len(df_analise) - 1 - i
                })
            
            # Verificar breakout de baixa falso (penetra abaixo do m√≠nimo mas fecha acima)
            if (df_analise['low'].iloc[i] < min_recente * 0.999 and  # Quebra ligeiramente o n√≠vel
                df_analise['close'].iloc[i] > min_recente and  # Fecha acima do n√≠vel
                df_analise['close'].iloc[i+1] > df_analise['open'].iloc[i]):  # Pr√≥ximo candle confirma fracasso
                
                padroes_suspeitos.append({
                    'tipo': "falso_breakout_baixa",
                    'posicao': i,
                    'nivel': min_recente,
                    'descricao': "Falso breakout de baixa (quebra de suporte falha)",
                    'forca': min(1.0, abs(df_analise['low'].iloc[i] / min_recente - 1) * 50),
                    'candles_atras': len(df_analise) - 1 - i
                })
        
        # 3. Detectar picos de volume suspeitos sem movimenta√ß√£o de pre√ßo
        for i in range(20, len(df_analise)):
            # Volume extremamente alto
            volume_extremo = df_analise['volume_ratio'].iloc[i] > limiar_volume * 2
            # Pouca movimenta√ß√£o de pre√ßo
            movimento_pequeno = abs(df_analise['pct_change'].iloc[i]) < df_analise['atr_percent'].iloc[i] * 0.5
            
            if volume_extremo and movimento_pequeno:
                padroes_suspeitos.append({
                    'tipo': "volume_suspeito",
                    'posicao': i,
                    'volume': df_analise['volume'].iloc[i],
                    'volume_ratio': df_analise['volume_ratio'].iloc[i],
                    'descricao': "Volume anormalmente alto sem movimenta√ß√£o significativa de pre√ßo",
                    'forca': min(1.0, df_analise['volume_ratio'].iloc[i] / (limiar_volume * 2)),
                    'candles_atras': len(df_analise) - 1 - i
                })
        
        # Filtrar apenas padr√µes recentes (√∫ltimos 10 candles), mais relevantes para decis√µes
        padroes_recentes = [p for p in padroes_suspeitos if p['candles_atras'] <= 10]
        
        return padroes_recentes

    def classificar_padrao_mercado(self, df, janela=20):
        """
        Classifica o padr√£o de mercado atual usando an√°lise estat√≠stica e regras 
        (simulando um modelo de machine learning)
        
        Padr√µes classificados:
        - Tend√™ncia de alta/baixa
        - Consolida√ß√£o
        - Acumula√ß√£o/distribui√ß√£o
        - Compress√£o de volatilidade
        - Breakout iminente
        
        Args:
            df: DataFrame com dados OHLCV
            janela: tamanho da janela para an√°lise
            
        Returns:
            dict: Classifica√ß√£o do padr√£o com confian√ßa e m√©tricas
        """
        from scipy import stats
        import numpy as np
        
        # Garantir dados suficientes
        if len(df) < janela + 10:
            return {'padrao': 'indeterminado', 'confianca': 0.0}
        
        # Extrair janela mais recente
        recente = df.iloc[-janela:].copy()
        
        # Calcular m√©tricas sobre esta janela
        metricas = {}
        
        # 1. Tend√™ncia (inclina√ß√£o da linha de regress√£o linear)
        x = np.arange(len(recente))
        y = recente['close'].values
        slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
        
        trend_strength = abs(r_value)  # For√ßa da tend√™ncia pela correla√ß√£o
        trend_direction = np.sign(slope)  # Dire√ß√£o da tend√™ncia
        
        metricas['trend_strength'] = trend_strength
        metricas['trend_direction'] = trend_direction
        
        # 2. Volatilidade
        metricas['volatilidade'] = recente['atr_percent'].mean() if 'atr_percent' in recente.columns else recente['close'].pct_change().std() * 100
        
        # 3. Compress√£o de volatilidade (redu√ß√£o cont√≠nua)
        if 'atr_percent' in recente.columns:
            atr_inicio = recente['atr_percent'].iloc[:5].mean()
            atr_fim = recente['atr_percent'].iloc[-5:].mean()
            metricas['compressao_volatilidade'] = atr_inicio / max(atr_fim, 0.001) - 1  # % de redu√ß√£o
        else:
            metricas['compressao_volatilidade'] = 0
        
        # 4. Volume
        metricas['volume_trend'] = recente['volume'].iloc[-5:].mean() / recente['volume'].iloc[:-5].mean()
        
        # 5. RSI
        if 'rsi' in recente.columns:
            metricas['rsi_atual'] = recente['rsi'].iloc[-1]
            metricas['rsi_max'] = recente['rsi'].iloc[-5:].max()
            metricas['rsi_min'] = recente['rsi'].iloc[-5:].min()
            metricas['rsi_range'] = metricas['rsi_max'] - metricas['rsi_min']
        else:
            metricas['rsi_atual'] = 50  # Valor neutro
            metricas['rsi_range'] = 0
        
        # 6. Bandas de Bollinger
        bb_dentro = 1.0
        if all(col in recente.columns for col in ['bb_upper', 'bb_middle', 'bb_lower']):
            # Largura das bandas
            recente['bb_width'] = (recente['bb_upper'] - recente['bb_lower']) / recente['bb_middle']
            
            bb_width_inicio = recente['bb_width'].iloc[:5].mean()
            bb_width_fim = recente['bb_width'].iloc[-5:].mean()
            
            metricas['banda_compressao'] = bb_width_inicio / max(bb_width_fim, 0.001) - 1
            
            # % do pre√ßo dentro das bandas
            dentro_bandas = ((recente['close'] <= recente['bb_upper']) & 
                            (recente['close'] >= recente['bb_lower'])).mean()
            
            metricas['bb_contencao'] = dentro_bandas
            bb_dentro = dentro_bandas
        else:
            metricas['banda_compressao'] = 0
            metricas['bb_contencao'] = 1
        
        # 7. N√≠veis de m√©dias m√≥veis
        if all(col in recente.columns for col in [f'ma_{MA_CURTA}', f'ma_{MA_MEDIA}', f'ma_{MA_LONGA}']):
            ultimo = recente.iloc[-1]
            
            # Verificar alinhamento das MAs
            ma_alinhadas_alta = ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}'] > ultimo[f'ma_{MA_LONGA}']
            ma_alinhadas_baixa = ultimo[f'ma_{MA_CURTA}'] < ultimo[f'ma_{MA_MEDIA}'] < ultimo[f'ma_{MA_LONGA}']
            
            metricas['ma_alinhamento'] = 1 if ma_alinhadas_alta else -1 if ma_alinhadas_baixa else 0
            
            # Calcular dist√¢ncia entre MAs (compress√£o = poss√≠vel breakout iminente)
            dist_ma_curta_media = abs(ultimo[f'ma_{MA_CURTA}'] - ultimo[f'ma_{MA_MEDIA}']) / ultimo[f'ma_{MA_MEDIA}'] * 100
            dist_ma_media_longa = abs(ultimo[f'ma_{MA_MEDIA}'] - ultimo[f'ma_{MA_LONGA}']) / ultimo[f'ma_{MA_LONGA}'] * 100
            
            metricas['ma_compressao'] = dist_ma_curta_media < 0.2 and dist_ma_media_longa < 0.3
        else:
            metricas['ma_alinhamento'] = 0
            metricas['ma_compressao'] = False
        
        # Calcular scores para cada padr√£o
        scores = {}
        
        # 1. Tend√™ncia de alta
        scores['tendencia_alta'] = (
            (trend_direction > 0) * 0.4 +
            (trend_strength > 0.7) * 0.3 +
            (metricas.get('volume_trend', 0) >= 1.0) * 0.2 +
            (metricas.get('ma_alinhamento', 0) == 1) * 0.3 +
            (metricas.get('rsi_atual', 50) > 50) * 0.1
        ) / 1.3  # Normalizar para 0-1
        
        # 2. Tend√™ncia de baixa
        scores['tendencia_baixa'] = (
            (trend_direction < 0) * 0.4 +
            (trend_strength > 0.7) * 0.3 +
            (metricas.get('volume_trend', 0) >= 1.0) * 0.2 +
            (metricas.get('ma_alinhamento', 0) == -1) * 0.3 +
            (metricas.get('rsi_atual', 50) < 50) * 0.1
        ) / 1.3  # Normalizar para 0-1
        
        # 3. Consolida√ß√£o (range bound)
        scores['consolidacao'] = (
            (trend_strength < 0.3) * 0.5 +
            (metricas.get('volatilidade', 0) < 0.3) * 0.3 +
            (bb_dentro > 0.8) * 0.4 +
            (metricas.get('rsi_range', 0) < 20) * 0.3
        ) / 1.5  # Normalizar para 0-1
        
        # 4. Acumula√ß√£o
        scores['acumulacao'] = (
            (trend_strength < 0.4) * 0.3 +
            (metricas.get('volume_trend', 0) > 1.2) * 0.4 +
            (metricas.get('rsi_atual', 50) < 45) * 0.2 +
            (metricas.get('volatilidade', 0) < 0.3) * 0.2
        ) / 1.1  # Normalizar para 0-1
        
        # 5. Distribui√ß√£o
        scores['distribuicao'] = (
            (trend_strength < 0.4) * 0.3 +
            (metricas.get('volume_trend', 0) > 1.2) * 0.4 +
            (metricas.get('rsi_atual', 50) > 55) * 0.2 +
            (metricas.get('volatilidade', 0) < 0.3) * 0.2
        ) / 1.1  # Normalizar para 0-1
        
        # 6. Compress√£o de volatilidade
        scores['compressao_volatilidade'] = (
            (metricas.get('compressao_volatilidade', 0) > 0.3) * 0.5 +
            (metricas.get('banda_compressao', 0) > 0.3) * 0.4 +
            (bb_dentro > 0.9) * 0.3 +
            (trend_strength < 0.3) * 0.2
        ) / 1.4  # Normalizar para 0-1
        
        # 7. Breakout iminente
        scores['breakout_iminente'] = (
            (metricas.get('compressao_volatilidade', 0) > 0.3) * 0.4 +
            (metricas.get('ma_compressao', False)) * 0.3 +
            (recente['volume'].iloc[-3:].mean() > recente['volume'].iloc[:-3].mean() * 1.2) * 0.4 +
            (bb_dentro > 0.9) * 0.3 +
            (metricas.get('volatilidade', 0) < metricas.get('volatilidade', 100) * 0.7) * 0.3
        ) / 1.7  # Normalizar para 0-1
        
        # Selecionar o padr√£o mais prov√°vel
        melhor_padrao = max(scores.items(), key=lambda x: x[1])
        
        # Filtrar padr√µes com confian√ßa m√≠nima
        if melhor_padrao[1] < 0.5:
            return {
                'padrao': 'indeterminado',
                'confianca': melhor_padrao[1],
                'metricas': metricas,
                'scores': scores
            }
        
        # Retornar resultado completo
        return {
            'padrao': melhor_padrao[0],
            'confianca': melhor_padrao[1],
            'metricas': metricas,
            'scores': scores
        }
    
    def modelar_suporte_resistencia_avancado(self, df, n_niveis=5, sensibilidade=0.1):
        """
        Implementa an√°lise avan√ßada de n√≠veis de suporte e resist√™ncia usando agrupamento estat√≠stico
        
        Args:
            df: DataFrame com dados OHLCV
            n_niveis: n√∫mero m√°ximo de n√≠veis para retornar em cada dire√ß√£o
            sensibilidade: par√¢metro para ajustar sensibilidade da detec√ß√£o (0.05-0.2 recomendado)
            
        Returns:
            dict: Dicion√°rio com n√≠veis de suporte e resist√™ncia e suas caracter√≠sticas
        """
        import numpy as np
        from scipy.signal import argrelextrema
        from sklearn.cluster import DBSCAN
        
        # Precisamos de dados suficientes
        if len(df) < 100:
            return {
                'suportes': [],
                'resistencias': [],
                'suportes_fortes': [],
                'resistencias_fortes': []
            }
        
        # Criar c√≥pia do dataframe
        df_sr = df.copy().reset_index(drop=True)
        
        # 1. Identificar extremos locais (picos e vales)
        # Usar janela de 5 candles para extremos locais
        max_idx = argrelextrema(df_sr['high'].values, np.greater, order=5)[0]
        min_idx = argrelextrema(df_sr['low'].values, np.less, order=5)[0]
        
        # Extrair pre√ßos destes extremos
        max_prices = df_sr['high'].iloc[max_idx].values
        min_prices = df_sr['low'].iloc[min_idx].values
        
        # 2. Identificar clusters usando DBSCAN
        # Para resist√™ncias (m√°ximos)
        if len(max_prices) > 1:
            # Normalizar para escala 0-1 para facilitar ajuste do eps
            max_norm = (max_prices - np.min(max_prices)) / (np.max(max_prices) - np.min(max_prices))
            
            # Aplicar DBSCAN para agrupar pre√ßos similares
            # Ajustar eps com base no par√¢metro de sensibilidade
            max_clustering = DBSCAN(eps=sensibilidade, min_samples=2).fit(max_norm.reshape(-1, 1))
            
            max_labels = max_clustering.labels_
            max_clusters = {}
            
            # Agrupar pre√ßos por cluster
            for i, label in enumerate(max_labels):
                if label != -1:  # Ignorar pontos classificados como ru√≠do
                    if label not in max_clusters:
                        max_clusters[label] = []
                    max_clusters[label].append((max_idx[i], max_prices[i]))
        else:
            max_clusters = {}
        
        # Para suportes (m√≠nimos)
        if len(min_prices) > 1:
            # Normalizar
            min_norm = (min_prices - np.min(min_prices)) / (np.max(min_prices) - np.min(min_prices))
            
            # Aplicar DBSCAN
            min_clustering = DBSCAN(eps=sensibilidade, min_samples=2).fit(min_norm.reshape(-1, 1))
            
            min_labels = min_clustering.labels_
            min_clusters = {}
            
            # Agrupar pre√ßos por cluster
            for i, label in enumerate(min_labels):
                if label != -1:  # Ignorar ru√≠do
                    if label not in min_clusters:
                        min_clusters[label] = []
                    min_clusters[label].append((min_idx[i], min_prices[i]))
        else:
            min_clusters = {}
        
        # 3. Calcular pre√ßo representativo para cada cluster
        resistencias = []
        for label, pontos in max_clusters.items():
            if len(pontos) < 2:
                continue  # Ignorar clusters com apenas um ponto
            
            # Extrair √≠ndices e pre√ßos
            indices = [p[0] for p in pontos]
            precos = [p[1] for p in pontos]
            
            # Calcular m√©dia dos pre√ßos no cluster
            preco_medio = np.mean(precos)
            
            # Calcular for√ßa baseado no n√∫mero de toques e volumes
            volumes = [df_sr['volume'].iloc[idx] for idx in indices]
            forca = len(indices) * (1 + np.mean(volumes) / df_sr['volume'].mean())
            
            resistencias.append({
                'preco': preco_medio,
                'toques': len(indices),
                'forca': forca,
                'indice_ultimo_toque': max(indices)
            })
        
        suportes = []
        for label, pontos in min_clusters.items():
            if len(pontos) < 2:
                continue
            
            # Extrair √≠ndices e pre√ßos
            indices = [p[0] for p in pontos]
            precos = [p[1] for p in pontos]
            
            # Calcular m√©dia dos pre√ßos no cluster
            preco_medio = np.mean(precos)
            
            # Calcular for√ßa baseado no n√∫mero de toques e volumes
            volumes = [df_sr['volume'].iloc[idx] for idx in indices]
            forca = len(indices) * (1 + np.mean(volumes) / df_sr['volume'].mean())
            
            suportes.append({
                'preco': preco_medio,
                'toques': len(indices),
                'forca': forca,
                'indice_ultimo_toque': max(indices)
            })
        
        # 4. Ordenar por for√ßa e filtrar para os mais relevantes
        resistencias = sorted(resistencias, key=lambda x: x['forca'], reverse=True)[:n_niveis]
        suportes = sorted(suportes, key=lambda x: x['forca'], reverse=True)[:n_niveis]
        
        # 5. Identificar n√≠veis de S/R "forte" (toques m√∫ltiplos e volumes significativos)
        suportes_fortes = [s for s in suportes if s['toques'] >= 3 or s['forca'] > 5]
        resistencias_fortes = [r for r in resistencias if r['toques'] >= 3 or r['forca'] > 5]
        
        # 6. Adicionar metadados para cada n√≠vel
        preco_atual = df_sr['close'].iloc[-1]
        
        for nivel in suportes + resistencias:
            # Calcular dist√¢ncia do pre√ßo atual
            distancia_pct = abs(nivel['preco'] - preco_atual) / preco_atual * 100
            nivel['distancia_pct'] = distancia_pct
            
            # Classificar por proximidade
            if distancia_pct < 1.0:
                nivel['proximidade'] = 'muito_proximo'
            elif distancia_pct < 3.0:
                nivel['proximidade'] = 'proximo'
            else:
                nivel['proximidade'] = 'distante'
                
            # Classificar por rec√™ncia (qtd de candles desde o √∫ltimo toque)
            candles_desde_toque = len(df_sr) - 1 - nivel['indice_ultimo_toque']
            nivel['candles_desde_toque'] = candles_desde_toque
            
            if candles_desde_toque <= 10:
                nivel['recencia'] = 'recente'
            elif candles_desde_toque <= 30:
                nivel['recencia'] = 'medio'
            else:
                nivel['recencia'] = 'antigo'
        
        # 7. Criar heatmap (densidade) de zonas de suporte e resist√™ncia
        # Vamos usar uma abordagem simplificada de heatmap em vez de visualiza√ß√£o
        range_preco = df_sr['high'].max() - df_sr['low'].min()
        n_bins = 100
        bin_size = range_preco / n_bins
        
        heatmap = np.zeros(n_bins)
        preco_min = df_sr['low'].min()
        
        # Fun√ß√µes para converter pre√ßo<->bin
        def preco_para_bin(preco):
            return min(n_bins-1, max(0, int((preco - preco_min) / bin_size)))
        
        def bin_para_preco(bin_idx):
            return preco_min + bin_idx * bin_size
        
        # Calcular heatmap baseado em pre√ßos hist√≥ricos e volumes
        for i in range(len(df_sr)):
            bin_low = preco_para_bin(df_sr['low'].iloc[i])
            bin_high = preco_para_bin(df_sr['high'].iloc[i])
            volume_normalizado = df_sr['volume'].iloc[i] / df_sr['volume'].mean()
            
            # Adicionar ao heatmap
            for bin_idx in range(bin_low, bin_high+1):
                heatmap[bin_idx] += volume_normalizado / (bin_high - bin_low + 1)
        
        # 8. Identificar zonas de alta densidade no heatmap
        zonas_heatmap = []
        threshold = np.mean(heatmap) * 2  # Zonas com pelo menos 2x a densidade m√©dia
        
        i = 0
        while i < n_bins:
            if heatmap[i] > threshold:
                inicio = i
                while i < n_bins and heatmap[i] > threshold:
                    i += 1
                fim = i - 1
                
                zonas_heatmap.append({
                    'preco_inicio': bin_para_preco(inicio),
                    'preco_fim': bin_para_preco(fim),
                    'densidade': np.mean(heatmap[inicio:fim+1]),
                    'largura_pct': (bin_para_preco(fim) - bin_para_preco(inicio)) / preco_atual * 100
                })
            i += 1
        
        return {
            'suportes': suportes,
            'resistencias': resistencias,
            'suportes_fortes': suportes_fortes,
            'resistencias_fortes': resistencias_fortes,
            'preco_atual': preco_atual,
            'zonas_heatmap': zonas_heatmap
        }
    def identificar_suporte_resistencia(self, df):
        """Identificar zonas de suporte e resist√™ncia com m√©todo aprimorado"""
        if len(df) < 100:  # Aumentado para ter dados mais confi√°veis
            return
        
        # Usar dados mais extensos para S/R
        df_sr = df.iloc[-100:].copy()
        
        # Encontrar picos (m√°ximos locais) com janela maior
        resistencias = []
        for i in range(3, len(df_sr) - 3):
            if (df_sr['high'].iloc[i] > df_sr['high'].iloc[i-1] and 
                df_sr['high'].iloc[i] > df_sr['high'].iloc[i-2] and
                df_sr['high'].iloc[i] > df_sr['high'].iloc[i-3] and
                df_sr['high'].iloc[i] > df_sr['high'].iloc[i+1] and
                df_sr['high'].iloc[i] > df_sr['high'].iloc[i+2] and
                df_sr['high'].iloc[i] > df_sr['high'].iloc[i+3]):
                resistencias.append(df_sr['high'].iloc[i])
        
        # Encontrar vales (m√≠nimos locais) com janela maior
        suportes = []
        for i in range(3, len(df_sr) - 3):
            if (df_sr['low'].iloc[i] < df_sr['low'].iloc[i-1] and 
                df_sr['low'].iloc[i] < df_sr['low'].iloc[i-2] and
                df_sr['low'].iloc[i] < df_sr['low'].iloc[i-3] and
                df_sr['low'].iloc[i] < df_sr['low'].iloc[i+1] and
                df_sr['low'].iloc[i] < df_sr['low'].iloc[i+2] and
                df_sr['low'].iloc[i] < df_sr['low'].iloc[i+3]):
                suportes.append(df_sr['low'].iloc[i])
        
        # Agrupar n√≠veis pr√≥ximos com margem reduzida para maior precis√£o
        self.zonas_sr = {
            "suportes": self._agrupar_niveis(suportes, margem_percentual=0.08),
            "resistencias": self._agrupar_niveis(resistencias, margem_percentual=0.08)
        }
        
        # Classificar por for√ßa (frequ√™ncia de toque)
        self._classificar_sr_por_forca(df)

    def _agrupar_niveis(self, niveis, margem_percentual=0.1):
        """Agrupar n√≠veis de pre√ßo pr√≥ximos com margem ajust√°vel"""
        if not niveis:
            return []
        
        # Ordenar n√≠veis
        niveis_ordenados = sorted(niveis)
        grupos = []
        grupo_atual = [niveis_ordenados[0]]
        
        for i in range(1, len(niveis_ordenados)):
            ultimo_nivel = grupo_atual[-1]
            nivel_atual = niveis_ordenados[i]
            
            if (nivel_atual - ultimo_nivel) / ultimo_nivel <= margem_percentual / 100:
                # Adicionar ao grupo atual
                grupo_atual.append(nivel_atual)
            else:
                # Criar um novo grupo
                grupos.append(grupo_atual)
                grupo_atual = [nivel_atual]
        
        # Adicionar o √∫ltimo grupo
        if grupo_atual:
            grupos.append(grupo_atual)
        
        # Calcular m√©dia de cada grupo
        return [sum(grupo) / len(grupo) for grupo in grupos]

    def _classificar_sr_por_forca(self, df):
        """Classificar zonas S/R por for√ßa (frequ√™ncia de toques)"""
        precos = list(df['high']) + list(df['low'])
        
        # Contar "toques" pr√≥ximos a cada n√≠vel
        forca_suportes = []
        for suporte in self.zonas_sr["suportes"]:
            toques = sum(1 for preco in precos if abs(preco - suporte) / suporte <= 0.1 / 100)
            forca_suportes.append((suporte, toques))
        
        forca_resistencias = []
        for resistencia in self.zonas_sr["resistencias"]:
            toques = sum(1 for preco in precos if abs(preco - resistencia) / resistencia <= 0.1 / 100)
            forca_resistencias.append((resistencia, toques))
        
        # Ordenar por for√ßa (n√∫mero de toques)
        forca_suportes.sort(key=lambda x: x[1], reverse=True)
        forca_resistencias.sort(key=lambda x: x[1], reverse=True)
        
        # Guardar apenas os 5 n√≠veis mais fortes, com seus valores de for√ßa
        self.zonas_sr["suportes_fortes"] = forca_suportes[:5]
        self.zonas_sr["resistencias_fortes"] = forca_resistencias[:5]

    def esta_proximo_sr(self, preco, margem_estreita=False):
        """Verificar se o pre√ßo est√° pr√≥ximo de uma zona de S/R"""
        # Margem mais estreita para entrada, mais ampla para alertas
        margem = 0.05 if margem_estreita else 0.1  # % de dist√¢ncia
        
        # Verificar suportes fortes primeiro
        if "suportes_fortes" in self.zonas_sr:
            for suporte, forca in self.zonas_sr["suportes_fortes"]:
                if abs(preco - suporte) / suporte <= margem / 100:
                    return True, f"Pr√≥ximo ao suporte em {suporte:.2f} (for√ßa: {forca})"
        
        # Verificar resist√™ncias fortes
        if "resistencias_fortes" in self.zonas_sr:
            for resistencia, forca in self.zonas_sr["resistencias_fortes"]:
                if abs(preco - resistencia) / resistencia <= margem / 100:
                    return True, f"Pr√≥ximo √† resist√™ncia em {resistencia:.2f} (for√ßa: {forca})"
        
        # Verificar suportes normais
        for suporte in self.zonas_sr["suportes"]:
            if abs(preco - suporte) / suporte <= margem / 100:
                return True, f"Pr√≥ximo ao suporte em {suporte:.2f}"
        
        # Verificar resist√™ncias normais
        for resistencia in self.zonas_sr["resistencias"]:
            if abs(preco - resistencia) / resistencia <= margem / 100:
                return True, f"Pr√≥ximo √† resist√™ncia em {resistencia:.2f}"
        
        return False, ""

    def verificar_horario_operacao(self):
        """Verificar se o hor√°rio atual √© adequado para opera√ß√µes"""
        horario_atual = datetime.now(timezone.utc).strftime("%H:%M")
        hora_atual_utc = datetime.now(timezone.utc).hour
        
        # Adicionar restri√ß√µes para per√≠odos de madrugada com liquidez muito baixa
        periodos_baixa_liquidez = [
            {'inicio': '01:00', 'fim': '03:30'},  # Per√≠odo de liquidez extremamente baixa
        ]
        
        # Per√≠odos a evitar (combinando os existentes com os novos)
        todos_periodos = HORARIOS_EVITAR + periodos_baixa_liquidez
        
        for periodo in todos_periodos:
            if periodo['inicio'] <= horario_atual <= periodo['fim']:
                return False, f"Hor√°rio n√£o recomendado para opera√ß√µes: {horario_atual} UTC"
        
        return True, ""

    def check_signal(self, df):
        """Verificar se h√° sinal de entrada com m√∫ltiplos filtros e sistema de pontua√ß√£o flex√≠vel"""
        pontuacao = 0
        motivos = []
        contra_indicacoes = []
        forca_sinal = "FRACO"  # Padr√£o
        criterios_atendidos = 0
        criterios_total = 0
        
        # Substitua seus pesos atuais por:
        self.config = {
            "peso_tendencia": 0.5,     # Baseado na melhor combina√ß√£o dos seus testes
            "peso_volume": 2.1,        # Volume parece ter import√¢ncia
            "peso_rsi": 0.8,           # RSI com peso moderado
            "peso_cruzamento": 1.2,    # Cruzamentos com peso moderado
            "peso_alinhamento": 1.9,   # Alinhamento parece importante
            "min_score_tecnico": 5.5   # Aumentando para ser mais seletivo
        }

        # Verificar e aplicar ajustes para per√≠odo de baixa liquidez
        modo_baixa_liquidez, criterios_noturnos = self.ajustar_criterios_noturnos()
        
        # Verificar contexto de mercado para ajustar crit√©rios
        criterios_contexto = self.ajustar_criterios_por_contexto(df)
        min_score = criterios_contexto['min_pontuacao'] if criterios_contexto else self.config.get("min_score_tecnico", 4.0)
        volume_minimo_pct = criterios_contexto['volume_minimo_pct'] if criterios_contexto else VOLUME_MINIMO_PERCENTUAL
        ma_alinhamento_obrigatorio = criterios_contexto['ma_alinhamento_obrigatorio'] if criterios_contexto else True
        
        # Aplicar crit√©rios noturnos se estiver em per√≠odo de baixa liquidez
        if modo_baixa_liquidez and criterios_noturnos:
            min_score = criterios_noturnos['pontuacao_minima']
            volume_minimo_pct = criterios_noturnos['volume_minimo_pct']

        # Incorporar an√°lise macro se ativada
        scores_macro = {}
        if USAR_ANALISE_MACRO:
            try:
                # Obter an√°lises macro
                sentimento_score, sentimento_desc, fear_greed_index = self.analisar_sentimento_mercado()
                correlacao_score, correlacao_desc, btc_correlation, eth_correlation = self.analisar_correlacoes()
                dominancia_score, dominancia_desc, btc_dominance, market_cap_total = self.analisar_dominancia_btc()
                
                # Salvar dados para hist√≥rico
                self.salvar_analise_macro(
                    fear_greed_index, 
                    btc_dominance, 
                    market_cap_total, 
                    btc_correlation,
                    eth_correlation,
                    sentimento_score, 
                    correlacao_score, 
                    dominancia_score
                )
                
                # Registrar scores para uso no fator final
                scores_macro['sentimento'] = sentimento_score
                scores_macro['correlacao'] = correlacao_score
                scores_macro['dominancia'] = dominancia_score
                
                # Adicionar informa√ß√µes √†s justificativas
                if sentimento_score > 1.05:
                    motivos.append(f"Sentimento: {sentimento_desc}")
                elif sentimento_score < 0.95:
                    contra_indicacoes.append(f"Sentimento: {sentimento_desc}")
                    
                if correlacao_score > 1.05:
                    motivos.append(f"Correla√ß√£o: {correlacao_desc}")
                elif correlacao_score < 0.95:
                    contra_indicacoes.append(f"Correla√ß√£o: {correlacao_desc}")
                    
                if dominancia_score > 1.05:
                    motivos.append(f"Domin√¢ncia: {dominancia_desc}")
                elif dominancia_score < 0.95:
                    contra_indicacoes.append(f"Domin√¢ncia: {dominancia_desc}")
            
            except Exception as e:
                self.registrar_log(f"ERRO na an√°lise macro: {str(e)}")
        
        if len(df) < 100:  # Requer mais dados hist√≥ricos para an√°lise confi√°vel
            return False, "Dados hist√≥ricos insuficientes para an√°lise confi√°vel"
        
        # Verificar hor√°rio de opera√ß√£o
        horario_ok, msg_horario = self.verificar_horario_operacao()
        if not horario_ok:
            contra_indicacoes.append(msg_horario)
            pontuacao -= 1.2  # Penaliza√ß√£o forte para hor√°rio inadequado
        
        # Limitar n√∫mero de opera√ß√µes di√°rias
        dia_atual = datetime.now().day
        if dia_atual != self.ultima_verificacao_dia:
            self.operacoes_hoje = 0
            self.ultima_verificacao_dia = dia_atual
            
        if self.operacoes_hoje >= MAX_OPERACOES_DIA:
            return False, f"Limite de opera√ß√µes di√°rias atingido ({MAX_OPERACOES_DIA})"
        
        # Classificar padr√£o de mercado atual
        classificacao = self.classificar_padrao_mercado(df)

        # Ajustar pontua√ß√£o baseado no padr√£o detectado
        if classificacao['padrao'] != 'indeterminado':
            # Ajustar com base no tipo de padr√£o e sua confian√ßa
            confianca = classificacao['confianca']
            
            if classificacao['padrao'] == 'tendencia_alta':
                motivos.append(f"Padr√£o: Tend√™ncia de alta (conf: {confianca:.2f})")
                pontuacao += confianca * 1.5
                criterios_atendidos += 1
                
            elif classificacao['padrao'] == 'acumulacao':
                motivos.append(f"Padr√£o: Acumula√ß√£o detectada (conf: {confianca:.2f})")
                pontuacao += confianca * 1.0
                criterios_atendidos += 1
                
            elif classificacao['padrao'] == 'breakout_iminente':
                motivos.append(f"Padr√£o: Breakout iminente (conf: {confianca:.2f})")
                pontuacao += confianca * 1.2
                criterios_atendidos += 1
                
            elif classificacao['padrao'] == 'compressao_volatilidade':
                motivos.append(f"Padr√£o: Compress√£o de volatilidade (conf: {confianca:.2f})")
                pontuacao += confianca * 0.5  # Menor impacto - pode ser breakout para cima ou para baixo
                
            elif classificacao['padrao'] == 'consolidacao':
                motivos.append(f"Padr√£o: Mercado em consolida√ß√£o (conf: {confianca:.2f})")
                # Neutro - n√£o altera pontua√ß√£o
                
            elif classificacao['padrao'] == 'distribuicao':
                contra_indicacoes.append(f"Padr√£o: Distribui√ß√£o detectada (conf: {confianca:.2f})")
                pontuacao -= confianca * 1.5
                
            elif classificacao['padrao'] == 'tendencia_baixa':
                contra_indicacoes.append(f"Padr√£o: Tend√™ncia de baixa (conf: {confianca:.2f})")
                pontuacao -= confianca * 2.0
        
        criterios_total += 1  # Contar padr√£o de mercado como um crit√©rio
            
        # Dados mais recentes do mercado
        penultimo = df.iloc[-2]
        ultimo = df.iloc[-1]
        
        # 1. Verificar ATR (volatilidade suficiente)
        atr_atual_percent = ultimo.get('atr_percent', 0)
        atr_minimo_ajustado = ATR_MINIMO_OPERACAO * 1.2
        mercado_ativo = atr_atual_percent >= atr_minimo_ajustado
        
        # Filtrar alta volatilidade
        if atr_atual_percent > ATR_MINIMO_OPERACAO * 3:
            contra_indicacoes.append(f"Volatilidade excessiva: ATR {atr_atual_percent:.2f}%")
            pontuacao -= 1
        
        if not mercado_ativo:
            contra_indicacoes.append(f"Volatilidade insuficiente: ATR {atr_atual_percent:.2f}% (m√≠n: {atr_minimo_ajustado:.2f}%)")
            pontuacao -= 1.2  # Penaliza√ß√£o mais forte
        else:
            motivos.append(f"Volatilidade adequada: ATR {atr_atual_percent:.2f}%")
            pontuacao += 0.5
            criterios_atendidos += 1
        
        criterios_total += 1  # Contar volatilidade como um crit√©rio
        
        # 2. Verificar inclina√ß√£o da MA Longa (tend√™ncia de fundo)
        inclinacao_ma_min = 0.02
        if 'ma_longa_inclinacao' in df.columns:
            inclinacao_ma_longa = float(df['ma_longa_inclinacao'].iloc[-1])
            tendencia_alta_forte = inclinacao_ma_longa > inclinacao_ma_min
        else:
            # Fallback para compara√ß√£o direta de m√©dias m√≥veis
            tendencia_alta_forte = float(ultimo[f'ma_{MA_LONGA}']) > float(penultimo[f'ma_{MA_LONGA}'])
        
        if tendencia_alta_forte:
            motivos.append(f"Tend√™ncia de alta na MA{MA_LONGA}: {inclinacao_ma_longa:.3f}%")
            pontuacao += 1.5  # Mais peso para tend√™ncia forte
            criterios_atendidos += 1
        elif inclinacao_ma_longa > 0:
            motivos.append(f"Tend√™ncia de alta fraca na MA{MA_LONGA}: {inclinacao_ma_longa:.3f}%")
            pontuacao += 0.5
        else:
            contra_indicacoes.append(f"Sem tend√™ncia de alta na MA{MA_LONGA}: {inclinacao_ma_longa:.3f}%")
            pontuacao -= 0.9  # Penalizar mais fortemente
        
        criterios_total += 1  # Contar tend√™ncia como um crit√©rio
        
        # 3. Verificar m√©dias m√≥veis com toler√¢ncia
        resultados_ma = self.verificar_mas_com_tolerancia(df)
        cruzamento_para_cima = resultados_ma['cruzamento']
        ma_curta_acima_media = ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}']
        todas_mas_alinhadas = resultados_ma['alinhamento']
        
        if cruzamento_para_cima:
            motivos.append("Cruzamento MA7 > MA25 (sinal de entrada)")
            pontuacao += 2  # Peso importante para cruzamento
            criterios_atendidos += 1
        elif ma_curta_acima_media:
            motivos.append("MA7 acima da MA25 (tend√™ncia de curto prazo)")
            pontuacao += 1
            criterios_atendidos += 0.5  # Meio crit√©rio
        
        if todas_mas_alinhadas:
            motivos.append("M√©dias m√≥veis alinhadas (MA7 > MA25 > MA99)")
            pontuacao += 1.5  # Aumentado o peso para m√©dias alinhadas
            criterios_atendidos += 1
        elif ma_alinhamento_obrigatorio:
            # Se alinhamento √© obrigat√≥rio por contexto mas n√£o est√° alinhado
            contra_indicacoes.append("M√©dias m√≥veis n√£o alinhadas")
            pontuacao -= 1.5
        
        criterios_total += 1  # Contar m√©dias m√≥veis como um crit√©rio
        
        # 4. Verificar RSI
        rsi_atual = ultimo['rsi']
        rsi_ok = 40 <= rsi_atual <= 60
        rsi_sobrevenda = 30 <= rsi_atual < 40
        
        # Verificar se RSI est√° subindo nos √∫ltimos 3 candles
        rsi_subindo = False
        if len(df) >= 4:
            rsi_3_candles = df['rsi'].iloc[-4:].values
            rsi_subindo = (rsi_3_candles[-1] > rsi_3_candles[-2] > rsi_3_candles[-3])
        
        if rsi_ok:
            motivos.append(f"RSI em zona √≥tima ({rsi_atual:.2f})")
            pontuacao += 1.5
            criterios_atendidos += 1
        elif rsi_sobrevenda and rsi_subindo:
            motivos.append(f"RSI recuperando de sobrevenda ({rsi_atual:.2f})")
            pontuacao += 1
            criterios_atendidos += 0.5
        elif rsi_subindo:
            motivos.append(f"RSI em tend√™ncia de alta ({rsi_atual:.2f})")
            pontuacao += 0.5
        else:
            contra_indicacoes.append(f"RSI desfavor√°vel ({rsi_atual:.2f})")
            pontuacao -= 1  # Penalizar mais o RSI desfavor√°vel
        
        criterios_total += 1  # Contar RSI como um crit√©rio
        
        # 5. Verificar volume
        volume_ok = ultimo['volume'] >= ultimo['volume_media'] * (volume_minimo_pct / 100)
        volume_aceitavel = ultimo['volume'] >= ultimo['volume_media'] * 1.1  # 110% da m√©dia
        
        if volume_ok:
            motivos.append(f"Volume alto ({ultimo['volume']/ultimo['volume_media']*100:.0f}% da m√©dia)")
            pontuacao += 1.5  # Aumentado para 1.5
            criterios_atendidos += 1
        elif volume_aceitavel:
            motivos.append(f"Volume aceit√°vel ({ultimo['volume']/ultimo['volume_media']*100:.0f}% da m√©dia)")
            pontuacao += 0.3
        else:
            contra_indicacoes.append(f"Volume baixo ({ultimo['volume']/ultimo['volume_media']*100:.0f}% da m√©dia)")
            pontuacao -= 0.9  # Penalizar mais fortemente
        
        criterios_total += 1  # Contar volume como um crit√©rio
        
        # 6. Verificar Bandas de Bollinger
        if 'bb_upper' in df.columns and 'bb_lower' in df.columns:
            preco = ultimo['close']
            bb_lower = ultimo['bb_lower']
            bb_upper = ultimo['bb_upper']
            
            # Proximidade √† banda inferior (potencial revers√£o para cima)
            if preco < bb_lower * 1.01:  # Dentro de 1% da banda inferior
                motivos.append("Pre√ßo pr√≥ximo/abaixo da banda inferior de Bollinger")
                pontuacao += 1
                criterios_atendidos += 0.5
            
            # Evitar entradas pr√≥ximas √† banda superior
            if preco > bb_upper * 0.97:  # Dentro de 3% da banda superior
                contra_indicacoes.append("Pre√ßo pr√≥ximo/acima da banda superior de Bollinger")
                pontuacao -= 0.9  # Penalizar mais fortemente
        
        criterios_total += 0.5  # Contar Bollinger como meio crit√©rio
        
        # 7. Verificar suporte e resist√™ncia
        sr_modelo = self.modelar_suporte_resistencia_avancado(df)
        
        # Verificar proximidade a suportes fortes (positivo para compras)
        proximo_suporte = False
        for suporte in sr_modelo['suportes_fortes']:
            if suporte['proximidade'] == 'muito_proximo':
                motivos.append(f"Pre√ßo pr√≥ximo a suporte forte em {suporte['preco']:.2f} (for√ßa: {suporte['forca']:.1f})")
                pontuacao += min(1.5, suporte['forca'] * 0.2)  # Limitar o b√¥nus
                criterios_atendidos += 0.5
                proximo_suporte = True
                break

        # Verificar proximidade a resist√™ncias fortes (negativo para compras)
        proximo_resistencia = False
        for resistencia in sr_modelo['resistencias_fortes']:
            if resistencia['proximidade'] == 'muito_proximo':
                contra_indicacoes.append(f"Pre√ßo pr√≥ximo a resist√™ncia forte em {resistencia['preco']:.2f} (for√ßa: {resistencia['forca']:.1f})")
                pontuacao -= min(1.5, resistencia['forca'] * 0.2)  # Limitar a penalidade
                proximo_resistencia = True
                break
        
        criterios_total += 0.5  # Contar S/R como meio crit√©rio
        
        # 8. Calcular b√¥nus para situa√ß√µes especiais
        bonus_pontuacao, bonus_justificativas = self.calcular_bonus_especiais(df)
        if bonus_pontuacao > 0:
            pontuacao += bonus_pontuacao
            motivos.extend(bonus_justificativas)
            criterios_atendidos += 0.5  # Considerar como meio crit√©rio adicional
        
        criterios_total += 0.5  # Contar b√¥nus como meio crit√©rio
        
        # 9. An√°lise de diverg√™ncias
        divergencias = self.detectar_divergencias(df) or []
        if divergencias:
            for div in divergencias:
                if div['tipo'] == 'positiva':
                    motivos.append(f"Diverg√™ncia positiva em {div['indicador']} (for√ßa: {div['forca']:.1f}%)")
                    pontuacao += 1.5  # Aumentar pontua√ß√£o significativamente
                    criterios_atendidos += 0.5
                elif div['tipo'] == 'negativa':
                    contra_indicacoes.append(f"Diverg√™ncia negativa em {div['indicador']} (for√ßa: {div['forca']:.1f}%)")
                    pontuacao -= 1.5  # Diminuir pontua√ß√£o significativamente
        
        criterios_total += 0.5  # Contar diverg√™ncias como meio crit√©rio
        
        # 10. Detec√ß√£o de manipula√ß√£o e armadilhas
        manipulacoes = self.detectar_manipulacao(df)
        if manipulacoes:
            for manip in manipulacoes:
                if manip['tipo'] in ['armadilha_baixa', 'falso_breakout_baixa'] and manip['candles_atras'] <= 3:
                    # Armadilha de baixa recente pode ser oportunidade de compra
                    motivos.append(f"Poss√≠vel armadilha de baixa detectada ({manip['descricao']})")
                    pontuacao += 0.5  # B√¥nus pequeno
                    criterios_atendidos += 0.5
                    
                elif manip['tipo'] in ['armadilha_alta', 'falso_breakout_alta'] and manip['candles_atras'] <= 3:
                    # Armadilha de alta recente √© contra-indica√ß√£o para compra
                    contra_indicacoes.append(f"Poss√≠vel armadilha de alta detectada ({manip['descricao']})")
                    pontuacao -= 1.5  # Penalidade significativa
        
        criterios_total += 0.5  # Contar manipula√ß√£o como meio crit√©rio
        
        # 11. An√°lise de Smart Money e Volume Delta
        df_volume = self.calcular_volume_delta(df)
        ultimo_volume = df_volume.iloc[-1]
        
        if ultimo_volume['acumulacao']:
            motivos.append("Acumula√ß√£o de volume detectada (press√£o compradora)")
            pontuacao += 1.0
            criterios_atendidos += 0.5
        
        if ultimo_volume['distribuicao']:
            contra_indicacoes.append("Distribui√ß√£o de volume detectada (press√£o vendedora)")
            pontuacao -= 1.0
        
        # An√°lise de Smart Money
        analise_smart = self.analisar_smart_money(df)
        
        if analise_smart['acumulacao_detectada']:
            motivos.append(f"Smart Money: Acumula√ß√£o detectada (for√ßa: {analise_smart['forca_sinal']:.1f})")
            pontuacao += min(1.5, analise_smart['forca_sinal'] * 0.3)  # Limitar a contribui√ß√£o
            criterios_atendidos += 0.5
        
        if analise_smart['distribuicao_detectada']:
            contra_indicacoes.append(f"Smart Money: Distribui√ß√£o detectada (for√ßa: {analise_smart['forca_sinal']:.1f})")
            pontuacao -= min(1.5, analise_smart['forca_sinal'] * 0.3)  # Limitar a penalidade
        
        criterios_total += 0.5  # Contar volume delta/smart money como meio crit√©rio
        
        # Aplicar ajuste da an√°lise macro na pontua√ß√£o final
        if USAR_ANALISE_MACRO and scores_macro:
            # Calcular m√©dia dos scores macro
            macro_score_medio = sum(scores_macro.values()) / len(scores_macro)
            
            # Ajustar pontua√ß√£o t√©cnica usando o peso definido
            pontuacao_ajustada = pontuacao * (1 - PESO_ANALISE_MACRO) + pontuacao * macro_score_medio * PESO_ANALISE_MACRO
            
            # Registrar ajuste no log
            self.registrar_log(f"Pontua√ß√£o original: {pontuacao:.2f} | Ajuste macro: {macro_score_medio:.2f} | Pontua√ß√£o final: {pontuacao_ajustada:.2f}")
            
            # Usar pontua√ß√£o ajustada
            pontuacao = pontuacao_ajustada
        
        # Normalizar a propor√ß√£o de crit√©rios atendidos para evitar divis√£o por zero
        proporcao_criterios = criterios_atendidos / criterios_total if criterios_total > 0 else 0
        
        # Determinar n√≠vel de confian√ßa e multiplicador de capital
        nivel_confianca, multiplicador_capital = self.determinar_nivel_confianca(pontuacao, criterios_atendidos, criterios_total)
        
        # Determinar for√ßa do sinal com base na pontua√ß√£o e n√≠vel de confian√ßa
        if nivel_confianca == "alta":
            forca_sinal = "FORTE"
        elif nivel_confianca == "m√©dia":
            forca_sinal = "MODERADO"
        else:
            forca_sinal = "FRACO"
        
        # Formata√ß√£o dos motivos/contra-indica√ß√µes para log
        motivos_txt = ", ".join(motivos)
        contra_indicacoes_txt = ", ".join(contra_indicacoes)
        
        # Mensagem detalhada
        mensagem = f"An√°lise [{forca_sinal}] - Pontua√ß√£o: {pontuacao:.1f}/10"
        mensagem += f" | N√≠vel: {nivel_confianca.upper()} (Capital: {multiplicador_capital*100:.0f}%)"
        
        if motivos:
            mensagem += f"\nMotivos: {motivos_txt}"
        if contra_indicacoes:
            mensagem += f"\nContra-indica√ß√µes: {contra_indicacoes_txt}"
        
        # Determinar se o sinal √© v√°lido
        max_contra_indicacoes = 1  # Valor padr√£o
        if modo_baixa_liquidez and criterios_noturnos:
            max_contra_indicacoes = criterios_noturnos['contra_indicacoes_max']
        
        # Sistema flex√≠vel: permitir entrada mesmo com pontua√ß√£o mais baixa se tiver crit√©rios suficientes
        min_criterios_atendidos = 3  # Pelo menos 3 crit√©rios importantes atendidos
        
        # Adicione este trecho no m√©todo check_signal antes da determina√ß√£o final de sinal_valido

        # Verificar tend√™ncia geral do mercado
        tendencia_baixa = False
        if 'ma_longa_inclinacao' in df.columns:
            inclinacao_ma_longa = float(df['ma_longa_inclinacao'].iloc[-1])
            tendencia_baixa = inclinacao_ma_longa < -0.02  # Detecta tend√™ncia de baixa
        elif len(df) > MA_LONGA + 10:
            media_longa_atual = df[f'ma_{MA_LONGA}'].iloc[-1]
            media_longa_anterior = df[f'ma_{MA_LONGA}'].iloc[-10]
            tendencia_baixa = media_longa_atual < media_longa_anterior

        # Se estiver em tend√™ncia de baixa, ser ainda mais restritivo
        if tendencia_baixa and nivel_confianca != "alta":
            sinal_valido = False
            mensagem += "\n‚ùå Mercado em tend√™ncia de baixa - entrando apenas com sinais muito fortes"
            
        # Verificar se temos um sinal v√°lido baseado no n√≠vel de confian√ßa e contexto
        # Determinar se o sinal √© v√°lido
        sinal_valido = False

        # Caso 1: N√≠vel de confian√ßa alta ou m√©dia
        if nivel_confianca in ["alta", "m√©dia"]:
            sinal_valido = len(contra_indicacoes) <= max_contra_indicacoes

        # Caso 2: N√≠vel de confian√ßa baixa mas em contexto favor√°vel (RSI extremo ou suporte forte)
        elif nivel_confianca == "baixa" and (rsi_sobrevenda or proximo_suporte):
            sinal_valido = len(contra_indicacoes) <= max_contra_indicacoes + 1  # Toler√¢ncia maior

        # Caso 3: Crit√©rios especiais - diverg√™ncia positiva forte ou armadilha de baixa
        elif (divergencias and any(d['tipo'] == 'positiva' and d['forca'] > 50 for d in divergencias)) or \
            (manipulacoes and any(m['tipo'] == 'armadilha_baixa' and m['candles_atras'] <= 2 for m in manipulacoes)):
            sinal_valido = pontuacao >= 0  # CAMADA DE RESGATE: apenas exige pontua√ß√£o n√£o negativa
            mensagem += "\n‚ö†Ô∏è Entrada baseada em crit√©rios especiais (diverg√™ncia/armadilha)"

        # Substitua completamente as linhas 2991-2996 com:
        elif pontuacao > 4.0:  # Limiar muito mais alto
            # Verificar se ATR √© adequado
            if atr_atual_percent >= ATR_MINIMO_OPERACAO * 1.2:  # 20% acima do m√≠nimo
                sinal_valido = True
                mensagem += "\n‚ö†Ô∏è CAMADA DE RESGATE: Entrada com pontua√ß√£o elevada e ATR adequado"
                self.registrar_log(f"CAMADA RESGATE ATIVADA: Pontua√ß√£o={pontuacao:.2f}, RSI={rsi_atual:.1f}, ATR%={atr_atual_percent:.2f}%")
            else:
                sinal_valido = False
                mensagem += "\n‚ùå ATR insuficiente para ativa√ß√£o da camada de resgate"
        
        # Caso 2: N√≠vel de confian√ßa baixa mas em contexto favor√°vel (RSI extremo ou suporte forte)
        elif nivel_confianca == "baixa" and (rsi_sobrevenda or proximo_suporte):
            sinal_valido = len(contra_indicacoes) <= max_contra_indicacoes + 1  # Toler√¢ncia maior
        
        # Caso 3: Crit√©rios especiais - diverg√™ncia positiva forte ou armadilha de baixa
        elif (divergencias and any(d['tipo'] == 'positiva' and d['forca'] > 70 for d in divergencias)) or \
            (manipulacoes and any(m['tipo'] == 'armadilha_baixa' and m['candles_atras'] <= 2 for m in manipulacoes)):
            sinal_valido = True
            mensagem += "\n‚ö†Ô∏è Entrada baseada em crit√©rios especiais (diverg√™ncia/armadilha)"
        
        # Armazenar informa√ß√µes para uso posterior
        if sinal_valido:
            self.motivo_entrada = motivos_txt
            self.atr_atual = ultimo.get('atr', ultimo['close'] * ATR_MINIMO_OPERACAO / 100)
            self.atr_percent_atual = atr_atual_percent
            self.forca_sinal = forca_sinal
            self.nivel_confianca = nivel_confianca
            self.multiplicador_capital = multiplicador_capital
            return True, mensagem
        
        return False, mensagem

    def calcular_niveis_fibonacci(self, df, tendencia='auto', periodos_swing=50):
        """
        Calcula n√≠veis de Fibonacci baseados na tend√™ncia detectada
        
        Args:
            df: DataFrame com dados OHLCV
            tendencia: 'alta', 'baixa' ou 'auto' para detec√ß√£o autom√°tica
            periodos_swing: n√∫mero de per√≠odos para encontrar swing high/low
            
        Returns:
            dict: Dicion√°rio com n√≠veis Fibonacci e informa√ß√µes adicionais
        """
        # Precisamos de dados suficientes
        if len(df) < periodos_swing:
            return {'erro': 'Dados insuficientes para calcular n√≠veis Fibonacci'}
        
        # Detectar tend√™ncia automaticamente se solicitado
        if tendencia == 'auto':
            # Verificar inclina√ß√£o da m√©dia m√≥vel longa
            if f'ma_{MA_LONGA}' in df.columns:
                ma_longa_atual = df[f'ma_{MA_LONGA}'].iloc[-1]
                ma_longa_anterior = df[f'ma_{MA_LONGA}'].iloc[-10]
                
                # Decidir baseado na inclina√ß√£o da MA longa
                if ma_longa_atual > ma_longa_anterior:
                    tendencia = 'alta'
                else:
                    tendencia = 'baixa'
            else:
                # Verificar se o pre√ßo atual √© maior que h√° 20 per√≠odos
                preco_atual = df['close'].iloc[-1]
                preco_anterior = df['close'].iloc[-20]
                
                tendencia = 'alta' if preco_atual > preco_anterior else 'baixa'
        
        # Definir pontos de swing com base na tend√™ncia
        if tendencia == 'alta':
            # Em tend√™ncia de alta, buscamos da m√≠nima √† m√°xima
            swing_low_preco = df['low'].iloc[-periodos_swing:].min()
            swing_low_idx = df['low'].iloc[-periodos_swing:].idxmin()
            
            # Calcular a m√°xima ap√≥s o swing low
            df_apos_swing = df.loc[swing_low_idx:]
            swing_high_preco = df_apos_swing['high'].max()
            
            # Range do movimento
            preco_range = swing_high_preco - swing_low_preco
            
            # N√≠veis de retra√ß√£o (para corre√ß√µes)
            niveis_retracao = {
                '0.0': swing_high_preco,
                '0.236': swing_high_preco - 0.236 * preco_range,
                '0.382': swing_high_preco - 0.382 * preco_range,
                '0.5': swing_high_preco - 0.5 * preco_range,
                '0.618': swing_high_preco - 0.618 * preco_range,
                '0.786': swing_high_preco - 0.786 * preco_range,
                '1.0': swing_low_preco
            }
            
            # N√≠veis de extens√£o (para proje√ß√µes)
            niveis_extensao = {
                '1.0': swing_high_preco,
                '1.272': swing_high_preco + 0.272 * preco_range,
                '1.414': swing_high_preco + 0.414 * preco_range,
                '1.618': swing_high_preco + 0.618 * preco_range,
                '2.0': swing_high_preco + 1.0 * preco_range,
                '2.618': swing_high_preco + 1.618 * preco_range
            }
            
        else:  # tendencia == 'baixa'
            # Em tend√™ncia de baixa, buscamos da m√°xima √† m√≠nima
            swing_high_preco = df['high'].iloc[-periodos_swing:].max()
            swing_high_idx = df['high'].iloc[-periodos_swing:].idxmax()
            
            # Calcular a m√≠nima ap√≥s o swing high
            df_apos_swing = df.loc[swing_high_idx:]
            swing_low_preco = df_apos_swing['low'].min()
            
            # Range do movimento
            preco_range = swing_high_preco - swing_low_preco
            
            # N√≠veis de retra√ß√£o (para corre√ß√µes)
            niveis_retracao = {
                '0.0': swing_low_preco,
                '0.236': swing_low_preco + 0.236 * preco_range,
                '0.382': swing_low_preco + 0.382 * preco_range,
                '0.5': swing_low_preco + 0.5 * preco_range,
                '0.618': swing_low_preco + 0.618 * preco_range,
                '0.786': swing_low_preco + 0.786 * preco_range,
                '1.0': swing_high_preco
            }
            
            # N√≠veis de extens√£o (para proje√ß√µes)
            niveis_extensao = {
                '1.0': swing_low_preco,
                '1.272': swing_low_preco - 0.272 * preco_range,
                '1.414': swing_low_preco - 0.414 * preco_range,
                '1.618': swing_low_preco - 0.618 * preco_range,
                '2.0': swing_low_preco - 1.0 * preco_range,
                '2.618': swing_low_preco - 1.618 * preco_range
            }
        
        # Verificar n√≠veis pr√≥ximos ao pre√ßo atual
        preco_atual = df['close'].iloc[-1]
        niveis_proximos = {}
        
        for nivel, valor in niveis_retracao.items():
            # Proximidade em percentual
            proximidade = abs(preco_atual - valor) / preco_atual * 100
            
            # Considerar pr√≥ximo se estiver a menos de 1% de dist√¢ncia
            if proximidade < 1.0:
                niveis_proximos[f'Retra√ß√£o {nivel}'] = {
                    'preco': valor,
                    'distancia_pct': proximidade
                }
        
        for nivel, valor in niveis_extensao.items():
            # Proximidade em percentual
            proximidade = abs(preco_atual - valor) / preco_atual * 100
            
            # Considerar pr√≥ximo se estiver a menos de 1% de dist√¢ncia
            if proximidade < 1.0:
                niveis_proximos[f'Extens√£o {nivel}'] = {
                    'preco': valor,
                    'distancia_pct': proximidade
                }
        
        # Retornar resultado completo
        return {
            'niveis_retracao': niveis_retracao,
            'niveis_extensao': niveis_extensao,
            'niveis_proximos': niveis_proximos,
            'preco_atual': preco_atual,
            'tendencia': tendencia,
            'swing_low': swing_low_preco,
            'swing_high': swing_high_preco
        }
    def calcular_parametros_ordem(self, preco_atual):
        """Calcular par√¢metros para ordens com stop loss din√¢mico baseado no ATR e take profit em n√≠veis"""
        # Stop loss din√¢mico baseado no ATR
        atr_valor = getattr(self, 'atr_atual', preco_atual * STOP_LOSS_PERCENTUAL_MINIMO / 100)
        stop_loss_dinamico = max(
            STOP_LOSS_MULTIPLICADOR_ATR * atr_valor,
            preco_atual * STOP_LOSS_PERCENTUAL_MINIMO / 100
        )
        # Limitar ao m√°ximo estabelecido
        stop_loss_dinamico = min(stop_loss_dinamico, preco_atual * STOP_LOSS_PERCENTUAL_MAXIMO / 100)
        
        stop_price = preco_atual - stop_loss_dinamico
        stop_limit_price = stop_price * 0.9997  # Ligeiramente abaixo para garantir execu√ß√£o
        
        # Valores para take profit em n√≠veis
        take_profit_1 = preco_atual * (1 + ALVO_LUCRO_PERCENTUAL_1 / 100)
        take_profit_2 = preco_atual * (1 + ALVO_LUCRO_PERCENTUAL_2 / 100)
        take_profit_3 = preco_atual * (1 + ALVO_LUCRO_PERCENTUAL_3 / 100)
        
        # Calcular quantidade com base no capital por opera√ß√£o
        ticker = self.client.get_symbol_ticker(symbol=self.symbol)
        preco_mercado = float(ticker['price'])
        
        # Extrair a base asset do symbol (por exemplo, "BTC" de "BTCUSDT")
        base_asset = self.symbol.replace('USDT', '')
        
        # Calcular n√≠veis de Fibonacci para alvos mais precisos
        niveis_fib = self.calcular_niveis_fibonacci(df)

        # Verificar se estamos numa tend√™ncia de alta
        if niveis_fib['tendencia'] == 'alta':
            # Ajustar take profit baseado em n√≠veis Fibonacci
            if 'niveis_extensao' in niveis_fib:
                # Ajustar TP1 para o primeiro n√≠vel de extens√£o (1.272)
                if '1.272' in niveis_fib['niveis_extensao']:
                    params["take_profit_1"] = max(params["take_profit_1"], 
                                                niveis_fib['niveis_extensao']['1.272'])
                
                # Ajustar TP2 para o segundo n√≠vel de extens√£o (1.414 ou 1.618)
                if '1.414' in niveis_fib['niveis_extensao']:
                    params["take_profit_2"] = max(params["take_profit_2"], 
                                                niveis_fib['niveis_extensao']['1.414'])
                
                # Ajustar TP3 para um n√≠vel de extens√£o maior (1.618 ou 2.0)
                if '1.618' in niveis_fib['niveis_extensao']:
                    params["take_profit_3"] = max(params["take_profit_3"], 
                                                niveis_fib['niveis_extensao']['1.618'])
            
            # Ajustar stop loss usando n√≠veis de retra√ß√£o Fibonacci
            if 'niveis_retracao' in niveis_fib:
                # Usar Fib 0.618 ou 0.786 como potencial stop, mas n√£o mais longe que o stop original
                candidatos_stop = []
                
                if '0.618' in niveis_fib['niveis_retracao']:
                    candidatos_stop.append(niveis_fib['niveis_retracao']['0.618'])
                    
                if '0.786' in niveis_fib['niveis_retracao']:
                    candidatos_stop.append(niveis_fib['niveis_retracao']['0.786'])
                
                if candidatos_stop:
                    # Escolher o stop mais pr√≥ximo do pre√ßo atual, mas n√£o mais longe que o original
                    melhor_stop = max([s for s in candidatos_stop if s < preco_atual], 
                                    default=params["stop_price"])
                    
                    # Usar este stop apenas se for melhor que o original
                    if melhor_stop > params["stop_price"]:
                        params["stop_price"] = melhor_stop
                        params["stop_limit_price"] = melhor_stop * 0.9997

        # Verificar balances dispon√≠veis
        try:
            account_info = self.client.get_account()
            balances = {asset['asset']: float(asset['free']) for asset in account_info['balances']}
            
            # Obter saldo USDT dispon√≠vel
            usdt_disponivel = balances.get('USDT', 0)
            print(f"Saldo USDT dispon√≠vel: {usdt_disponivel} USDT")
            
            # Usar capital ajustado dinamicamente
            capital_ajustado = self.ajustar_capital_operacao()
            print(f"Capital ajustado dinamicamente: {capital_ajustado:.2f} USDT (base: {CAPITAL_POR_OPERACAO:.2f})")
            
            # Ajustar a aloca√ß√£o de capital se o saldo dispon√≠vel for menor que o desejado
            valor_minimo_compra = 20.0  # M√≠nimo para operar na Binance
            valor_para_operar = min(capital_ajustado, usdt_disponivel * 0.98)  # 98% do saldo dispon√≠vel
            
            # Verificar se temos saldo suficiente
            if valor_para_operar < valor_minimo_compra:
                return None, (
                    f"‚ùå Opera√ß√£o cancelada: saldo dispon√≠vel ({usdt_disponivel:.2f} USDT) insuficiente. "
                    f"M√≠nimo recomendado: {valor_minimo_compra:.2f} USDT"
                )
                    
            print(f"Valor ajustado para operar: {valor_para_operar:.2f} USDT de {capital_ajustado:.2f} USDT desejados")
            
        except Exception as e:
            print(f"Erro ao verificar saldo: {e}. Usando valor padr√£o.")
            # Fallback para o caso de erro
            valor_minimo_compra = 20.0
            valor_para_operar = capital_ajustado
        
        # Definir o valor a ser usado na opera√ß√£o: o maior entre valor m√≠nimo e valor calculado
        valor_para_operar = max(valor_minimo_compra, valor_para_operar)
        print(f"Valor final para operar: {valor_para_operar} USDT")

        # Calcular a quantidade baseada nesse valor, reservando ~5% para taxas e arredondamentos
        quantidade_estimada = (valor_para_operar * 0.95) / preco_mercado
        print(f"Quantidade estimada: {quantidade_estimada} {base_asset}")
        quantidade = self.normalize_quantity(quantidade_estimada)
        print(f"Quantidade normalizada final: {quantidade} {base_asset} (aproximadamente {quantidade * preco_mercado} USDT)")

        # Se a quantidade calculada ainda for inv√°lida (por algum erro de arredondamento extremo), cancelar
        if quantidade <= 0 or quantidade < self.min_qty:
            return None, (
                f"‚ùå Opera√ß√£o cancelada: quantidade ({quantidade:.8f}) abaixo do m√≠nimo permitido ({self.min_qty})."
            )
        
        # Log do stop loss din√¢mico
        stop_loss_percent = (preco_atual - stop_price) / preco_atual * 100
        
        # Normalizar todos os pre√ßos
        preco_atual = self.normalize_price(preco_atual)
        take_profit_1 = self.normalize_price(take_profit_1)
        take_profit_2 = self.normalize_price(take_profit_2)
        take_profit_3 = self.normalize_price(take_profit_3)
        stop_price = self.normalize_price(stop_price)
        stop_limit_price = self.normalize_price(stop_limit_price)
        
        return {
            "preco_entrada": preco_atual,
            "quantidade": quantidade,
            "take_profit_1": take_profit_1,   # Primeiro alvo (25% da posi√ß√£o)
            "take_profit_2": take_profit_2,   # Segundo alvo (25% da posi√ß√£o)
            "take_profit_3": take_profit_3,   # Alvo final (50% da posi√ß√£o)
            "stop_price": stop_price,
            "stop_limit_price": stop_limit_price,
            "stop_loss_percent": stop_loss_percent
        }, f"Stop loss: {stop_loss_percent:.2f}% ({STOP_LOSS_MULTIPLICADOR_ATR}x ATR), Take profits: {ALVO_LUCRO_PERCENTUAL_1}%, {ALVO_LUCRO_PERCENTUAL_2}%, {ALVO_LUCRO_PERCENTUAL_3}%"

        
    # 8. Adicionar um novo m√©todo para verificar se a opera√ß√£o √© vi√°vel considerando as taxas

    def verificar_viabilidade_operacao(self, preco_atual, parametros):
        """Verifica se a opera√ß√£o √© vi√°vel considerando as taxas e retornos esperados"""
        # Obter par√¢metros
        quantidade = parametros["quantidade"]
        stop_price = parametros["stop_price"]
        take_profit_1 = parametros["take_profit_1"]
        
        # Calcular taxa de compra e venda
        taxa_compra = preco_atual * quantidade * self.taxa_efetiva
        taxa_venda_tp1 = take_profit_1 * quantidade * 0.25 * self.taxa_efetiva  # 25% da posi√ß√£o no TP1
        taxa_venda_tp2 = parametros["take_profit_2"] * quantidade * 0.25 * self.taxa_efetiva  # 25% no TP2
        taxa_venda_tp3 = parametros["take_profit_3"] * quantidade * 0.5 * self.taxa_efetiva  # 50% no TP3
        taxa_venda_sl = stop_price * quantidade * self.taxa_efetiva  # Venda total no SL
        
        # Taxas total para take profit completo
        taxa_total_tp = taxa_compra + taxa_venda_tp1 + taxa_venda_tp2 + taxa_venda_tp3
        
        # Taxas total para stop loss
        taxa_total_sl = taxa_compra + taxa_venda_sl
        
        # Calcular lucro potencial no primeiro take profit (25% da posi√ß√£o)
        lucro_bruto_tp1 = (take_profit_1 - preco_atual) * quantidade * 0.25
        lucro_liquido_tp1 = lucro_bruto_tp1 - (taxa_compra * 0.25) - taxa_venda_tp1
        
        # Calcular perda potencial no stop loss
        perda_bruta_sl = (preco_atual - stop_price) * quantidade
        perda_liquida_sl = perda_bruta_sl + taxa_total_sl
        
        # Verificar se o primeiro take profit compensa as taxas
        tp1_compensa_taxa = lucro_liquido_tp1 > 0
        
        # Calcular raz√£o risco/recompensa considerando as taxas
        # Aqui calculamos quanto ganhamos no melhor cen√°rio (TP3) vs quanto perdemos no pior (SL)
        lucro_maximo = (
            (take_profit_1 - preco_atual) * quantidade * 0.25 +
            (parametros["take_profit_2"] - preco_atual) * quantidade * 0.25 +
            (parametros["take_profit_3"] - preco_atual) * quantidade * 0.5
        ) - taxa_total_tp
        
        perda_maxima = perda_liquida_sl
        
        if perda_maxima > 0:  # Evitar divis√£o por zero
            risk_reward_ratio = lucro_maximo / perda_maxima
        else:
            risk_reward_ratio = float('inf')  # Sem risco (cen√°rio improv√°vel)
        
        # Adicionar verifica√ß√£o de ROI m√≠nimo considerando taxas
        roi_minimo = 0.5  # ROI m√≠nimo de 0.5% para compensar taxas
        
        # Calcular ROI potencial no cen√°rio m√©dio (considerar m√©dia ponderada dos TPs)
        roi_potencial = (
            (ALVO_LUCRO_PERCENTUAL_1 * 0.25) +  # 25% da posi√ß√£o no TP1
            (ALVO_LUCRO_PERCENTUAL_2 * 0.25) +  # 25% da posi√ß√£o no TP2
            (ALVO_LUCRO_PERCENTUAL_3 * 0.5)     # 50% da posi√ß√£o no TP3
        )
        
        # Calcular ROI l√≠quido ap√≥s taxas
        taxa_percentual = self.taxa_efetiva * 100 * 2  # Taxa de entrada e sa√≠da
        roi_liquido = roi_potencial - taxa_percentual
        
        # Verificar ROI m√≠nimo
        if roi_liquido < roi_minimo:
            viavel = False
            mensagem += f"\n- ROI l√≠quido estimado ({roi_liquido:.2f}%) abaixo do m√≠nimo aceit√°vel ({roi_minimo:.2f}%)"
        # Determinar viabilidade
        viavel = tp1_compensa_taxa and risk_reward_ratio >= 0.6 and roi_liquido >= roi_minimo
        
        # Preparar mensagem com detalhes
        mensagem = (
            f"An√°lise de viabilidade (com taxas):\n"
            f"- Custo total em taxas (TP completo): {taxa_total_tp:.6f} USDT\n"
            f"- Primeiro TP gera lucro ap√≥s taxas: {'SIM' if tp1_compensa_taxa else 'N√ÉO'} (lucro l√≠quido TP1: {lucro_liquido_tp1:.6f} USDT)\n"
            f"- Raz√£o risco/recompensa: {risk_reward_ratio:.2f} (m√≠n. recomendado: 1.5)\n"
            f"- Opera√ß√£o considerada {'VI√ÅVEL' if viavel else 'N√ÉO VI√ÅVEL'}"
        )
        
        # Adicionar detalhes ao log
        self.registrar_log(f"VIABILIDADE: {viavel} | R/R={risk_reward_ratio:.2f} | Taxas={taxa_total_tp:.6f}")
        
        return viavel, mensagem

    def executar_ordem_compra(self, params):
        """Executar ordem de compra com sistema de sa√≠das parciais e c√°lculo de taxas"""
        if MODO_SIMULACAO:
            print("üî∏ MODO SIMULA√á√ÉO: Simulando ordem de compra")
            # Em modo simula√ß√£o, fingimos que a ordem foi executada ao pre√ßo atual
            self.preco_entrada = params["preco_entrada"]
            self.quantidade = params["quantidade"]  # Quantidade calculada
            self.quantidade_restante = self.quantidade  # Inicializar quantidade restante
            self.em_operacao = True
            self.tempo_entrada = datetime.now()
            self.posicao_parcial = False
            self.saidas_parciais = []
            
            # Calcular e registrar taxa de compra
            self.taxa_compra = self.preco_entrada * self.quantidade * self.taxa_efetiva
            self.taxa_total_operacao = self.taxa_compra
            
            # Registrar detalhes da opera√ß√£o
            timestamp = datetime.now()
            self.log_operacoes.append({
                'timestamp': timestamp,
                'tipo': 'ENTRADA (SIMULA√á√ÉO)',
                'preco': self.preco_entrada,
                'quantidade': self.quantidade,
                'taxa': self.taxa_compra,
                'motivo': self.motivo_entrada,
                'forca_sinal': getattr(self, 'forca_sinal', 'N/A')
            })
            
            # Calcular o valor total da opera√ß√£o em d√≥lares
            valor_operacao = self.preco_entrada * self.quantidade

            # Calcular patrim√¥nio atual
            patrimonio_total = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria

            # Enviar alerta com informa√ß√£o sobre taxa
            self.send_telegram_alert(
                f"‚úÖ COMPRA SIMULADA\n\n"
                f"Pre√ßo: {self.preco_entrada:.4f} USDT\n"
                f"Qtd: {self.quantidade:.6f} {self.symbol.replace('USDT', '')}\n"
                f"Valor total: {valor_operacao:.2f} USDT\n"
                f"Taxa: {self.taxa_compra:.6f} USDT\n"
                f"Sinal: {getattr(self, 'forca_sinal', 'N/A')}\n"
                f"Motivo: {self.motivo_entrada}\n\n"
                f"üí∞ Patrim√¥nio atual: {patrimonio_total:.2f} USDT"
)
            
            # Registrar no log
            self.registrar_log(f"ENTRADA (SIMULA√á√ÉO): Pre√ßo={self.preco_entrada} | Qtd={self.quantidade} | Taxa={self.taxa_compra:.6f} | Motivo={self.motivo_entrada}")
            
            # Incrementar contador de opera√ß√µes do dia
            self.operacoes_hoje += 1
            
            # Atualizar valor m√°ximo da carteira
            carteira_atual = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria - self.taxas_pagas_total
            if carteira_atual > self.valor_maximo_carteira:
                self.valor_maximo_carteira = carteira_atual
                
            return True
        
        try:
            # Ordem de compra a mercado
            ordem = self.client.create_order(
                symbol=self.symbol,
                side=SIDE_BUY,
                type=ORDER_TYPE_MARKET,
                quantity=params["quantidade"]
            )
            
            print(f"Ordem de compra executada: {ordem}")
            self.preco_entrada = float(ordem['fills'][0]['price'])
            self.quantidade = float(ordem['executedQty'])  # usa a quantidade real executada
            self.quantidade_restante = self.quantidade  # Inicializar quantidade restante
            self.em_operacao = True
            self.tempo_entrada = datetime.now()
            self.posicao_parcial = False
            self.saidas_parciais = []
            
            # Calcular taxa da compra em modo real
            # Usa o commission e commissionAsset dos fills para c√°lculo preciso
            self.taxa_compra = 0
            for fill in ordem['fills']:
                if 'commission' in fill and 'commissionAsset' in fill:
                    commission = float(fill['commission'])
                    commission_asset = fill['commissionAsset']
                    
                    # Se a taxa foi paga em BNB, converter para USDT
                    if commission_asset == 'BNB':
                        # Obter cota√ß√£o do BNB
                        bnb_price = float(self.client.get_symbol_ticker(symbol='BNBUSDT')['price'])
                        self.taxa_compra += commission * bnb_price
                    elif commission_asset == 'USDT':
                        self.taxa_compra += commission
                    else:
                        # Taxa paga no asset base (BTC neste caso)
                        self.taxa_compra += commission * self.preco_entrada
            
            self.taxa_total_operacao = self.taxa_compra
            self.taxas_pagas_total += self.taxa_compra
            
            # Calcular o valor total da opera√ß√£o em d√≥lares
            valor_operacao = self.preco_entrada * self.quantidade

            # Calcular patrim√¥nio atual
            patrimonio_total = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria

            # Enviar alerta com informa√ß√µes adicionais
            self.send_telegram_alert(
                f"‚úÖ COMPRA REALIZADA\n\n"
                f"Pre√ßo: {self.preco_entrada:.4f} USDT\n"
                f"Qtd: {self.quantidade:.6f} {self.symbol.replace('USDT', '')}\n"
                f"Valor total: {valor_operacao:.2f} USDT\n"
                f"Taxa: {self.taxa_compra:.6f} USDT\n"
                f"Sinal: {getattr(self, 'forca_sinal', 'N/A')}\n"
                f"Motivo: {self.motivo_entrada}\n\n"
                f"üí∞ Patrim√¥nio atual: {patrimonio_total:.2f} USDT"
            )
            
            # Registrar detalhes da opera√ß√£o
            timestamp = datetime.now()
            self.log_operacoes.append({
                'timestamp': timestamp,
                'tipo': 'ENTRADA',
                'preco': self.preco_entrada,
                'quantidade': self.quantidade,
                'taxa': self.taxa_compra,
                'motivo': self.motivo_entrada,
                'forca_sinal': getattr(self, 'forca_sinal', 'N/A')
            })
            
            # Registrar no log
            self.registrar_log(f"ENTRADA: Pre√ßo={self.preco_entrada} | Qtd={self.quantidade} | Taxa={self.taxa_compra:.6f} | Motivo={self.motivo_entrada}")
            
            # Configurar stop loss inicial
            self.configurar_stop_loss(params)
            
            # Incrementar contador de opera√ß√µes do dia
            self.operacoes_hoje += 1
            
            # Atualizar valor m√°ximo da carteira
            carteira_atual = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria - self.taxas_pagas_total
            if carteira_atual > self.valor_maximo_carteira:
                self.valor_maximo_carteira = carteira_atual
                
            return True
        except BinanceAPIException as e:
            print(f"Erro ao executar ordem: {e}")
            return False
    def configurar_stop_loss(self, params):
        """Configurar ordem de stop loss ap√≥s entrada com fallback para stop virtual"""
        if not self.em_operacao:
            return False
            
        # Obter par√¢metros de stop loss
        stop_price = params["stop_price"]
        stop_limit_price = params["stop_limit_price"]
        
        # Flag para controlar se estamos usando stop virtual
        self.usando_stop_virtual = False
        
        # Se estamos em modo simula√ß√£o, n√£o tentamos configurar stop real
        if MODO_SIMULACAO:
            self.stop_virtual_preco = stop_price
            self.usando_stop_virtual = True
            self.registrar_log(f"STOP VIRTUAL: Configurado em {stop_price:.2f} ({params['stop_loss_percent']:.2f}%)")
            return True
        
        try:
            # Tentar criar ordem de stop loss real
            ordem_stop = self.client.create_order(
                symbol=self.symbol,
                side=SIDE_SELL,
                type=ORDER_TYPE_STOP_LOSS_LIMIT,
                timeInForce=TIME_IN_FORCE_GTC,
                quantity=self.quantidade,
                price=self.normalize_price(stop_limit_price),
                stopPrice=self.normalize_price(stop_price)
            )
            
            self.ordem_stop_id = ordem_stop['orderId']
            print(f"Stop Loss configurado: {stop_price:.2f} USDT ({params['stop_loss_percent']:.2f}%)")
            self.registrar_log(f"STOP LOSS: Configurado em {stop_price:.2f} ({params['stop_loss_percent']:.2f}%)")
            
            return True
        except BinanceAPIException as e:
            print(f"Erro ao configurar stop loss: {e}")
            self.registrar_log(f"ERRO STOP LOSS: {e}")
            
            # FALLBACK: Configurar stop virtual se n√£o conseguir criar stop real
            self.stop_virtual_preco = stop_price
            self.usando_stop_virtual = True
            print(f"FALLBACK: Stop Virtual ativado em {stop_price:.2f} USDT ({params['stop_loss_percent']:.2f}%)")
            self.registrar_log(f"STOP VIRTUAL: Configurado em {stop_price:.2f} ({params['stop_loss_percent']:.2f}%)")
            
            # Enviar alerta sobre o fallback
            self.send_telegram_alert(
                f"‚ö†Ô∏è AVISO: N√£o foi poss√≠vel configurar stop loss autom√°tico.\n\n"
                f"Um stop loss virtual foi ativado em {stop_price:.2f} USDT.\n"
                f"Erro da Binance: {e}"
            )
            
            return True

    def verificar_stop_loss_movel(self, preco_atual, params=None):
        """Stop Loss M√≥vel (Trailing Stop) melhorado com n√≠veis din√¢micos"""
        if not self.em_operacao or not self.trailing_stop_ativo:
            return False
            
        # Se j√° tivemos sa√≠das parciais, ajustar o trailing stop para break-even
        if self.posicao_parcial:
            # Garantir que n√£o vamos sair com preju√≠zo ap√≥s ter tido lucro parcial
            novo_stop = max(self.preco_entrada * 1.001, preco_atual * 0.99)
            self.trailing_stop_nivel = max(self.trailing_stop_nivel, novo_stop)
        
        # Verificar se o pre√ßo atingiu novos patamares para ajustar o trailing stop
        lucro_percentual = (preco_atual - self.preco_entrada) / self.preco_entrada * 100
        
        # N√≠veis din√¢micos para trailing stop com base no lucro percentual
        # - At√© 0.3%: N√£o movimenta
        # - 0.3% a 0.6%: Move para 0.15% abaixo do pre√ßo atual
        # - 0.6% a 1.0%: Move para 0.25% abaixo do pre√ßo atual
        # - Acima de 1.0%: Move para 0.4% abaixo do pre√ßo atual
        
        if lucro_percentual >= 0.2 and lucro_percentual < 0.4:
            novo_stop = preco_atual * 0.9985  # 0.15% abaixo (ativa√ß√£o mais r√°pida)
            msg_trail = "0.15% abaixo"
        elif lucro_percentual >= 0.4 and lucro_percentual < 0.8:
            novo_stop = preco_atual * 0.9975  # 0.25% abaixo
            msg_trail = "0.25% abaixo"
        elif lucro_percentual >= 0.8:
            novo_stop = preco_atual * 0.996   # 0.4% abaixo
            msg_trail = "0.4% abaixo"
        else:
            return False  # Lucro insuficiente para mover o stop
                
        # S√≥ ajustar se o novo stop for maior que o anterior
        if novo_stop <= self.trailing_stop_nivel:
            return False
            
        # Atualizar n√≠vel
        self.trailing_stop_nivel = novo_stop
        
        if MODO_SIMULACAO:
            print(f"üî∏ MODO SIMULA√á√ÉO: Trailing Stop ajustado para {self.trailing_stop_nivel:.2f} ({msg_trail})")
            self.registrar_log(f"TRAILING STOP (SIMULA√á√ÉO): Ajustado para {self.trailing_stop_nivel:.2f} ({msg_trail})")
            return True
            
        try:
            # Cancelar ordem de stop loss anterior
            if self.ordem_stop_id:
                self.client.cancel_order(symbol=self.symbol, orderId=self.ordem_stop_id)
                
            # Calcular pre√ßo limite (ligeiramente abaixo para garantir execu√ß√£o)
            stop_limit_price = self.trailing_stop_nivel * 0.999
                
            # Criar nova ordem de stop loss
            quantidade_venda = self.quantidade_restante if hasattr(self, 'quantidade_restante') else self.quantidade
            
            ordem_stop = self.client.create_order(
                symbol=self.symbol,
                side=SIDE_SELL,
                type=ORDER_TYPE_STOP_LOSS_LIMIT,
                timeInForce=TIME_IN_FORCE_GTC,
                quantity=quantidade_venda,
                price=self.normalize_price(stop_limit_price),
                stopPrice=self.normalize_price(self.trailing_stop_nivel)
            )
                
            self.ordem_stop_id = ordem_stop['orderId']
            print(f"Trailing Stop ajustado: Novo n√≠vel={self.trailing_stop_nivel:.2f} ({msg_trail})")
            self.registrar_log(f"TRAILING STOP: Ajustado para {self.trailing_stop_nivel:.2f} ({msg_trail})")
                
            return True
        except BinanceAPIException as e:
            print(f"Erro ao ajustar trailing stop: {e}")
            return False
    # 4. Modificar o m√©todo verificar_take_profit_parcial para contabilizar taxas nas sa√≠das parciais

    def verificar_take_profit_parcial(self, preco_atual, params):
        """Verificar e executar sa√≠das parciais com base nos n√≠veis de take profit, contabilizando taxas"""
        if not self.em_operacao or self.posicao_parcial and not hasattr(self, 'quantidade_restante'):
            return False
            
        # Verificar se estamos em modo simula√ß√£o
        if MODO_SIMULACAO:
            # Obter n√≠veis de take profit do par√¢metro ou usar valores padr√µes
            tp1 = params.get('take_profit_1', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_1 / 100))
            tp2 = params.get('take_profit_2', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_2 / 100))
            tp3 = params.get('take_profit_3', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_3 / 100))
            
            # Verificar se o pre√ßo atingiu o n√≠vel 3 (alvo final) e ainda temos posi√ß√£o parcial
            if preco_atual >= tp3 and hasattr(self, 'quantidade_restante') and self.quantidade_restante > 0:
                # Calcular taxa de venda para a quantidade restante
                taxa_venda = preco_atual * self.quantidade_restante * self.taxa_efetiva
                
                # Simular sa√≠da total da posi√ß√£o restante considerando taxas
                resultado_bruto = (preco_atual - self.preco_entrada) * self.quantidade_restante
                resultado = resultado_bruto - taxa_venda  # Resultado l√≠quido ap√≥s taxa
                percentual = (preco_atual - self.preco_entrada) / self.preco_entrada * 100
                
                # Atualizar taxa total da opera√ß√£o
                self.taxa_total_operacao += taxa_venda
                self.taxas_pagas_total += taxa_venda
                
                saida_parcial = {
                    'nivel': 'Alvo Final',
                    'preco': preco_atual,
                    'quantidade': self.quantidade_restante,
                    'resultado_bruto': resultado_bruto,
                    'taxa': taxa_venda,
                    'resultado': resultado,  # Resultado l√≠quido
                    'percentual': percentual
                }
                
                self.saidas_parciais.append(saida_parcial)
                self.lucro_diario += resultado  # Adiciona resultado l√≠quido
                
                # Registrar no log
                self.registrar_log(f"TAKE PROFIT FINAL (SIMULA√á√ÉO): {resultado:.2f} USDT ({percentual:.2f}%) | Taxa: {taxa_venda:.6f}")
                
                # Enviar alerta
                self.send_telegram_alert(
                    f"‚úÖ TAKE PROFIT FINAL\n\n"
                    f"Pre√ßo: {preco_atual:.2f} USDT\n"
                    f"Resultado bruto: +{resultado_bruto:.2f} USDT\n"
                    f"Taxa: {taxa_venda:.6f} USDT\n"
                    f"Resultado l√≠quido: +{resultado:.2f} USDT ({percentual:.2f}%)\n"
                    f"Lucro total opera√ß√£o: {sum(s['resultado'] for s in self.saidas_parciais):.2f} USDT"
                )
                
                # Resetar posi√ß√£o
                self.em_operacao = False
                
                # Adicionar √† lista de opera√ß√µes do dia
                self.operacoes_dia.append({
                    'entrada': self.preco_entrada,
                    'saida': preco_atual,
                    'resultado': sum(s['resultado'] for s in self.saidas_parciais),
                    'taxas': self.taxa_total_operacao,
                    'lucro_percentual': percentual,
                    'timestamp': datetime.now(),
                    'duracao_minutos': (datetime.now() - self.tempo_entrada).total_seconds() / 60,
                    'motivo_entrada': self.motivo_entrada,
                    'motivo_saida': 'Take Profit Final',
                    'saidas_parciais': self.saidas_parciais
                })
                
                # Atualizar estat√≠sticas
                self.trades_vencedores += 1
                self.sequencia_perdas_atual = 0
                
                return True
                
            # Verificar se o pre√ßo atingiu o n√≠vel 2 e ainda n√£o tivemos sa√≠da parcial neste n√≠vel
            elif preco_atual >= tp2 and (not self.posicao_parcial or 
                (self.saidas_parciais and all(s['nivel'] != 'Alvo 2' for s in self.saidas_parciais))):
                
                # Quantidade para sa√≠da parcial (25% da posi√ß√£o original)
                quantidade_saida = self.quantidade * 0.25
                
                # Calcular taxa para esta sa√≠da parcial
                taxa_venda = preco_atual * quantidade_saida * self.taxa_efetiva
                
                # Calculamos o resultado desta sa√≠da considerando taxas
                resultado_bruto = (preco_atual - self.preco_entrada) * quantidade_saida
                resultado = resultado_bruto - taxa_venda
                percentual = (preco_atual - self.preco_entrada) / self.preco_entrada * 100
                
                # Atualizar taxa total da opera√ß√£o
                self.taxa_total_operacao += taxa_venda
                self.taxas_pagas_total += taxa_venda
                
                # Registro da sa√≠da parcial
                saida_parcial = {
                    'nivel': 'Alvo 2',
                    'preco': preco_atual,
                    'quantidade': quantidade_saida,
                    'resultado_bruto': resultado_bruto,
                    'taxa': taxa_venda,
                    'resultado': resultado,
                    'percentual': percentual
                }
                
                # Atualizar a quantidade restante e marcar como posi√ß√£o parcial
                if not hasattr(self, 'quantidade_restante'):
                    self.quantidade_restante = self.quantidade
                
                self.quantidade_restante -= quantidade_saida
                self.posicao_parcial = True
                self.saidas_parciais.append(saida_parcial)
                
                # Adicionar lucro ao dia
                self.lucro_diario += resultado
                
                # Registrar no log
                self.registrar_log(f"TAKE PROFIT PARCIAL 2 (SIMULA√á√ÉO): {resultado:.2f} USDT ({percentual:.2f}%) | Taxa: {taxa_venda:.6f}")
                
                # Enviar alerta
                self.send_telegram_alert(
                    f"‚úÖ TAKE PROFIT PARCIAL (25%)\n\n"
                    f"Pre√ßo: {preco_atual:.2f} USDT\n"
                    f"Resultado bruto: +{resultado_bruto:.2f} USDT\n"
                    f"Taxa: {taxa_venda:.6f} USDT\n"
                    f"Resultado l√≠quido: +{resultado:.2f} USDT ({percentual:.2f}%)\n"
                    f"Restante da posi√ß√£o: {self.quantidade_restante:.6f} BTC"
                )
                
                # Ativar trailing stop quando lucro atingir determinado n√≠vel
                lucro_atual = (preco_atual - self.preco_entrada) / self.preco_entrada * 100
                if lucro_atual >= 0.2:  # Ativar mais cedo quando lucro for >= 0.2%
                    self.trailing_stop_ativo = True
                    self.trailing_stop_nivel = preco_atual * 0.998  # Inicialmente 0.2% abaixo
                    print(f"Trailing Stop ativado ap√≥s take profit parcial: {self.trailing_stop_nivel:.2f}")
                    self.registrar_log(f"TRAILING STOP ATIVADO: {self.trailing_stop_nivel:.2f}")
                
                return True
                
            # Verificar se o pre√ßo atingiu o n√≠vel 1 e ainda n√£o tivemos sa√≠da parcial
            elif preco_atual >= tp1 and not self.posicao_parcial:
                # Quantidade para sa√≠da parcial (25% da posi√ß√£o original)
                quantidade_saida = self.quantidade * 0.25
                
                # Calcular taxa para esta sa√≠da parcial
                taxa_venda = preco_atual * quantidade_saida * self.taxa_efetiva
                
                # Calculamos o resultado desta sa√≠da
                resultado_bruto = (preco_atual - self.preco_entrada) * quantidade_saida
                resultado = resultado_bruto - taxa_venda
                percentual = (preco_atual - self.preco_entrada) / self.preco_entrada * 100
                
                # Atualizar taxa total e acumulada
                self.taxa_total_operacao += taxa_venda
                self.taxas_pagas_total += taxa_venda
                
                # Registro da sa√≠da parcial
                saida_parcial = {
                    'nivel': 'Alvo 1',
                    'preco': preco_atual,
                    'quantidade': quantidade_saida,
                    'resultado_bruto': resultado_bruto,
                    'taxa': taxa_venda,
                    'resultado': resultado,
                    'percentual': percentual
                }
                
                # Atualizar a quantidade restante e marcar como posi√ß√£o parcial
                self.quantidade_restante = self.quantidade - quantidade_saida
                self.posicao_parcial = True
                self.saidas_parciais.append(saida_parcial)
                
                # Adicionar lucro ao dia
                self.lucro_diario += resultado
                
                # Registrar no log
                self.registrar_log(f"TAKE PROFIT PARCIAL 1 (SIMULA√á√ÉO): {resultado:.2f} USDT ({percentual:.2f}%) | Taxa: {taxa_venda:.6f}")
                
                # Enviar alerta
                self.send_telegram_alert(
                    f"‚úÖ TAKE PROFIT PARCIAL (25%)\n\n"
                    f"Pre√ßo: {preco_atual:.2f} USDT\n"
                    f"Resultado bruto: +{resultado_bruto:.2f} USDT\n"
                    f"Taxa: {taxa_venda:.6f} USDT\n"
                    f"Resultado l√≠quido: +{resultado:.2f} USDT ({percentual:.2f}%)\n"
                    f"Restante da posi√ß√£o: {self.quantidade_restante:.6f} BTC"
                )
                
                # Ativar trailing stop
                self.trailing_stop_ativo = True
                self.trailing_stop_nivel = self.preco_entrada  # Inicialmente no break-even
                print(f"Trailing Stop ativado no break-even: {self.trailing_stop_nivel:.2f}")
                self.registrar_log(f"TRAILING STOP ATIVADO NO BREAK-EVEN: {self.trailing_stop_nivel:.2f}")
                
                return True
            
            return False
            
        # Modo de opera√ß√£o real (n√£o simulado)
        else:
            # Implementar l√≥gica para sa√≠das parciais em modo real com considera√ß√£o de taxas
            # Este √© apenas um exemplo que precisaria ser adaptado √† API da Binance
            try:
                # Obter n√≠veis de take profit do par√¢metro
                tp1 = params.get('take_profit_1', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_1 / 100))
                tp2 = params.get('take_profit_2', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_2 / 100))
                tp3 = params.get('take_profit_3', self.preco_entrada * (1 + ALVO_LUCRO_PERCENTUAL_3 / 100))
                
                # Verificar n√≠veis e executar ordens de venda parciais conforme necess√°rio
                # [Implementa√ß√£o das ordens reais de venda aqui]
                
                return False  # Placeholder - implementar l√≥gica real
                
            except BinanceAPIException as e:
                print(f"Erro ao executar take profit parcial: {e}")
                return False
        
    def verificar_status_ordens(self):
        """Verificar status das ordens abertas e processar execu√ß√µes"""
        if not self.em_operacao:
            return
            
        try:
            # Verificar stop virtual se estiver ativado
            if hasattr(self, 'usando_stop_virtual') and self.usando_stop_virtual:
                try:
                    ticker = self.client.get_symbol_ticker(symbol=self.symbol)
                    preco_atual = float(ticker['price'])
                    
                    # Verificar se o pre√ßo caiu abaixo do stop virtual
                    if preco_atual <= self.stop_virtual_preco:
                        print(f"‚ö†Ô∏è STOP VIRTUAL ACIONADO: Pre√ßo atual ({preco_atual:.2f}) abaixo do stop ({self.stop_virtual_preco:.2f})")
                        self.registrar_log(f"STOP VIRTUAL ACIONADO: {preco_atual:.2f} <= {self.stop_virtual_preco:.2f}")
                        
                        # Executar venda de emerg√™ncia
                        self.executar_venda_emergencia(preco_atual, "Stop Loss Virtual")
                        return
                except Exception as e:
                    print(f"Erro ao verificar stop virtual: {e}")
            
            # O resto da fun√ß√£o permanece igual para verificar ordens reais
            if MODO_SIMULACAO:
                # Em modo simula√ß√£o, verificamos se o pre√ßo atingiu o stop loss
                try:
                    ticker = self.client.get_symbol_ticker(symbol=self.symbol)
                    preco_atual = float(ticker['price'])
                    
                    # Verificar se o pre√ßo caiu abaixo do trailing stop
                    if self.trailing_stop_ativo and preco_atual < self.trailing_stop_nivel:
                        self.executar_venda_manual(preco_atual, "Stop Loss M√≥vel Simulado")
                except Exception as e:
                    print(f"Erro ao verificar pre√ßo em simula√ß√£o: {e}")
                return
                
            ordens_abertas = self.client.get_open_orders(symbol=self.symbol)
            
            # Se n√£o h√° ordens abertas e est√°vamos em opera√ß√£o, significa que uma ordem foi executada
            if len(ordens_abertas) == 0 and self.em_operacao:
                # Verificar hist√≥rico de ordens recentes para determinar resultado
                historico = self.client.get_all_orders(symbol=self.symbol, limit=10)
                
                # Filtrar apenas as ordens executadas (status = FILLED)
                ordens_executadas = [ordem for ordem in historico if ordem['status'] == 'FILLED']
                
                if ordens_executadas:
                    ultima_ordem = ordens_executadas[-1]
                    
                    # Se a √∫ltima ordem foi uma venda
                    if ultima_ordem['side'] == 'SELL':
                        preco_venda = float(ultima_ordem['price'] or ultima_ordem.get('lastPrice', 0))
                        if preco_venda == 0:  # Fallback se n√£o conseguir o pre√ßo diretamente
                            ticker = self.client.get_symbol_ticker(symbol=self.symbol)
                            preco_venda = float(ticker['price'])
                            
                        quantidade = float(ultima_ordem['executedQty'])
                        
                        # Se t√≠nhamos sa√≠das parciais, usar a quantidade restante
                        quantidade_inicial = self.quantidade_restante if hasattr(self, 'quantidade_restante') else self.quantidade
                        
                        # Verificar se a quantidade vendida corresponde ao que esper√°vamos
                        if abs(quantidade - quantidade_inicial) / quantidade_inicial < 0.01:  # dentro de 1% de toler√¢ncia
                            resultado = (preco_venda - self.preco_entrada) * quantidade
                            
                            # Determinar motivo da sa√≠da
                            if preco_venda >= self.preco_entrada:
                                motivo_saida = "Take Profit Autom√°tico"
                            else:
                                motivo_saida = "Stop Loss Autom√°tico"
                            
                            # Registrar opera√ß√£o como encerrada
                            self.executar_venda_manual(preco_venda, motivo_saida)
        except BinanceAPIException as e:
            print(f"Erro ao verificar ordens: {e}")

    # 5. Modificar o m√©todo executar_venda_manual para considerar taxas

    def executar_venda_manual(self, preco_venda, motivo_saida):
        """Encerrar posi√ß√£o manualmente ou registrar execu√ß√£o de sa√≠da autom√°tica, considerando taxas"""
        if not self.em_operacao:
            print("N√£o h√° opera√ß√£o em andamento para encerrar")
            return False
        
        # CORRE√á√ÉO: Cancelar qualquer ordem de stop loss pendente
        if hasattr(self, 'ordem_stop_id') and self.ordem_stop_id:
            try:
                self.client.cancel_order(symbol=self.symbol, orderId=self.ordem_stop_id)
                print(f"Stop loss anterior cancelado: {self.ordem_stop_id}")
                self.registrar_log(f"CANCELAMENTO: Stop loss anterior {self.ordem_stop_id} cancelado")
                self.ordem_stop_id = None
            except Exception as e:
                print(f"Erro ao cancelar stop loss anterior: {e}")
                self.registrar_log(f"ERRO: Falha ao cancelar stop loss anterior: {e}")
        
        # Calcular resultado
        if hasattr(self, 'quantidade_restante'):
            quantidade_venda = self.quantidade_restante
        else:
            quantidade_venda = self.quantidade
        
        # CORRE√á√ÉO: Executar venda real antes de calcular taxas e resultados
        ordem_executada = False
        if not MODO_SIMULACAO:
            try:
                print(f"Executando venda real a mercado de {quantidade_venda} {self.symbol}")
                ordem = self.client.create_order(
                    symbol=self.symbol,
                    side=SIDE_SELL,
                    type=ORDER_TYPE_MARKET,
                    quantity=self.normalize_quantity(quantidade_venda)
                )
                
                # Verificar se a ordem foi executada
                if 'fills' in ordem and len(ordem['fills']) > 0:
                    # Usar o pre√ßo m√©dio de execu√ß√£o real
                    preco_total = 0
                    qtd_total = 0
                    for fill in ordem['fills']:
                        preco_fill = float(fill['price'])
                        qtd_fill = float(fill['qty'])
                        preco_total += preco_fill * qtd_fill
                        qtd_total += qtd_fill
                    
                    if qtd_total > 0:
                        preco_venda = preco_total / qtd_total
                        print(f"Venda executada ao pre√ßo m√©dio: {preco_venda}")
                        
                    ordem_executada = True
                else:
                    print("‚ö†Ô∏è Ordem enviada, mas sem confirma√ß√£o de execu√ß√£o - verificando status")
                    # Verificar status da ordem
                    try:
                        ordem_status = self.client.get_order(symbol=self.symbol, orderId=ordem['orderId'])
                        if ordem_status['status'] == 'FILLED':
                            ordem_executada = True
                            print(f"Ordem confirmada como executada: {ordem_status['status']}")
                        else:
                            print(f"‚ö†Ô∏è Ordem n√£o executada completamente: {ordem_status['status']}")
                            self.registrar_log(f"ALERTA: Venda n√£o completada, status={ordem_status['status']}")
                    except Exception as e_status:
                        print(f"Erro ao verificar status da ordem: {e_status}")
                
                if not ordem_executada:
                    self.registrar_log(f"ERRO: Falha na execu√ß√£o da venda manual")
                    return False
                    
            except Exception as e:
                print(f"Erro ao executar venda: {e}")
                self.registrar_log(f"ERRO VENDA: {e}")
                # Continuar com c√°lculos mesmo em caso de erro
                # mas marcar explicitamente no log
                self.registrar_log("AVISO: Calculando resultado com base no pre√ßo te√≥rico devido a erro")
        
        # Calcular taxa de venda
        if MODO_SIMULACAO:
            taxa_venda = preco_venda * quantidade_venda * self.taxa_efetiva
        else:
            if ordem_executada and 'fills' in ordem:
                # Calcular taxa real baseada nos fills
                taxa_venda = 0
                for fill in ordem['fills']:
                    if 'commission' in fill and 'commissionAsset' in fill:
                        commission = float(fill['commission'])
                        commission_asset = fill['commissionAsset']
                        
                        # Converter taxa para USDT dependendo do asset
                        if commission_asset == 'BNB':
                            bnb_price = float(self.client.get_symbol_ticker(symbol='BNBUSDT')['price'])
                            taxa_venda += commission * bnb_price
                        elif commission_asset == 'USDT':
                            taxa_venda += commission
                        else:
                            taxa_venda += commission * preco_venda
            else:
                # Estimativa se n√£o temos dados reais
                taxa_venda = preco_venda * quantidade_venda * self.taxa_efetiva
        
        # Atualizar taxa total da opera√ß√£o e acumulada
        self.taxa_total_operacao += taxa_venda
        self.taxas_pagas_total += taxa_venda
        
        # Calcular resultado da opera√ß√£o (bruto e l√≠quido)
        resultado_bruto = (preco_venda - self.preco_entrada) * quantidade_venda
        resultado = resultado_bruto - taxa_venda  # Resultado l√≠quido ap√≥s taxa
        percentual = (preco_venda - self.preco_entrada) / self.preco_entrada * 100
        
        # Adicionar ao lucro ou perda di√°ria (valor l√≠quido)
        if resultado > 0:
            self.lucro_diario += resultado
            self.trades_vencedores += 1
            self.sequencia_perdas_atual = 0
            status = "LUCRO"
        else:
            self.perda_diaria += abs(resultado)
            self.trades_perdedores += 1
            self.sequencia_perdas_atual += 1
            self.maior_sequencia_perdas = max(self.maior_sequencia_perdas, self.sequencia_perdas_atual)
            status = "PERDA"
        
        # Incluir resultados de sa√≠das parciais se houver
        resultado_total = resultado
        taxas_total = taxa_venda
        if self.posicao_parcial and self.saidas_parciais:
            for saida in self.saidas_parciais:
                resultado_total += saida['resultado']
                taxas_total += saida.get('taxa', 0)
        
        # Calcular percentual total considerando sa√≠das parciais
        percentual_total = (resultado_total + taxas_total) / (self.preco_entrada * self.quantidade) * 100
        
        # Adicionar √† lista de opera√ß√µes do dia
        self.operacoes_dia.append({
            'entrada': self.preco_entrada,
            'saida': preco_venda,
            'resultado_bruto': resultado_bruto + (sum(s.get('resultado_bruto', 0) for s in self.saidas_parciais) if self.saidas_parciais else 0),
            'taxas': self.taxa_total_operacao,
            'resultado': resultado_total,  # Resultado l√≠quido total
            'lucro_percentual': percentual_total,
            'timestamp': datetime.now(),
            'duracao_minutos': (datetime.now() - self.tempo_entrada).total_seconds() / 60,
            'motivo_entrada': self.motivo_entrada,
            'motivo_saida': motivo_saida,
            'saidas_parciais': self.saidas_parciais if hasattr(self, 'saidas_parciais') else []
        })
        
        # Registrar detalhes da opera√ß√£o no log
        self.log_operacoes.append({
            'timestamp': datetime.now(),
            'tipo': f'SA√çDA ({status})',
            'preco': preco_venda,
            'quantidade': quantidade_venda,
            'taxa': taxa_venda,
            'resultado_bruto': resultado_bruto,
            'resultado': resultado,
            'percentual': percentual,
            'resultado_total': resultado_total,
            'taxas_total': taxas_total,
            'percentual_total': percentual_total,
            'motivo': motivo_saida
        })
        
        # Registrar no log
        self.registrar_log(
            f"SA√çDA {status}: Pre√ßo={preco_venda:.2f} | " +
            f"Resultado bruto={resultado_bruto:.2f} | Taxa={taxa_venda:.6f} | " +
            f"Resultado l√≠quido={resultado:.2f} USDT ({percentual:.2f}%) | " +
            f"Motivo: {motivo_saida}"
        )
        
        # Calcular patrim√¥nio antes e depois
        patrimonio_antes = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria
        patrimonio_depois = patrimonio_antes + resultado

        # Enviar alerta com emoji adequado e informa√ß√µes adicionais
        emoji = "‚úÖ" if resultado > 0 else "‚ùå"
        self.send_telegram_alert(
            f"{emoji} POSI√á√ÉO ENCERRADA: {status}\n\n"
            f"Entrada: {self.preco_entrada:.4f} USDT\n"
            f"Sa√≠da: {preco_venda:.4f} USDT\n"
            f"Resultado bruto: {resultado_bruto:.2f} USDT\n"
            f"Taxa: {taxa_venda:.6f} USDT\n"
            f"Resultado l√≠quido: {resultado:.2f} USDT ({percentual:.2f}%)\n"
            f"Resultado total da opera√ß√£o: {resultado_total:.2f} USDT\n"
            f"Taxas totais: {taxas_total:.6f} USDT\n"
            f"Motivo: {motivo_saida}\n"
            f"Dura√ß√£o: {(datetime.now() - self.tempo_entrada).total_seconds() / 60:.1f} min\n\n"
            f"üí∞ Patrim√¥nio antes: {patrimonio_antes:.2f} USDT\n"
            f"üí∞ Patrim√¥nio depois: {patrimonio_depois:.2f} USDT ({(patrimonio_depois/patrimonio_antes - 1)*100:.3f}%)"
        )
        
        # Resetar vari√°veis de controle
        self.em_operacao = False
        self.trailing_stop_ativo = False
        self.preco_entrada = 0
        self.quantidade = 0
        self.ordem_id = None
        self.ordem_stop_id = None
        self.posicao_parcial = False
        self.saidas_parciais = []
        self.taxa_total_operacao = 0
        if hasattr(self, 'quantidade_restante'):
            delattr(self, 'quantidade_restante')
        self.ultima_operacao_resultado = resultado
        self.ultima_operacao_motivo = motivo_saida
        self.ultimo_preco_saida = preco_venda
        self.ultima_operacao_timestamp = datetime.now()
        
        return True 
        
    def executar_venda_emergencia(self, preco_atual, motivo_saida):
        """Executar venda de emerg√™ncia quando o stop virtual √© acionado"""
        if not self.em_operacao:
            print("N√£o h√° opera√ß√£o em andamento para encerrar")
            return False
        
        print(f"‚ö†Ô∏è EXECUTANDO VENDA DE EMERG√äNCIA: {motivo_saida}")
        self.registrar_log(f"VENDA DE EMERG√äNCIA: {motivo_saida} a {preco_atual:.2f}")
        
        # Se estamos em modo simula√ß√£o, apenas registrar
        if MODO_SIMULACAO:
            self.executar_venda_manual(preco_atual, motivo_saida)
            return True
        
        try:
            # Tentar vender a quantidade restante ao pre√ßo de mercado
            quantidade_venda = self.quantidade_restante if hasattr(self, 'quantidade_restante') else self.quantidade
            
            # Verificar se a quantidade √© v√°lida
            if quantidade_venda <= 0:
                print(f"Quantidade inv√°lida para venda: {quantidade_venda}")
                return False
                
            # Executar ordem de venda a mercado
            ordem = self.client.create_order(
                symbol=self.symbol,
                side=SIDE_SELL,
                type=ORDER_TYPE_MARKET,
                quantity=self.normalize_quantity(quantidade_venda)
            )
            
            print(f"Ordem de venda de emerg√™ncia executada: {ordem}")
            
            # Calcular pre√ßo m√©dio de venda a partir do fill
            preco_venda = 0
            quantidade_vendida = 0
            
            for fill in ordem['fills']:
                quantidade_fill = float(fill['qty'])
                preco_fill = float(fill['price'])
                quantidade_vendida += quantidade_fill
                preco_venda += preco_fill * quantidade_fill
            
            if quantidade_vendida > 0:
                preco_venda = preco_venda / quantidade_vendida
            else:
                preco_venda = preco_atual
                
            # Registrar com o mecanismo normal de sa√≠da
            self.executar_venda_manual(preco_venda, f"{motivo_saida} (Venda Emergencial)")
            return True
            
        except BinanceAPIException as e:
            print(f"Erro ao executar venda de emerg√™ncia: {e}")
            self.registrar_log(f"ERRO VENDA EMERG√äNCIA: {e}")
            
            # Ainda registrar a sa√≠da para efeitos de contabilidade, mesmo que falhe
            self.executar_venda_manual(preco_atual, f"{motivo_saida} (Falha na Execu√ß√£o)")
            return False
    
    def verificar_alertas(self, df):
        """Verificar condi√ß√µes para alertas de potenciais oportunidades"""
        # Se j√° estamos em uma opera√ß√£o, n√£o enviar alertas de entrada
        if self.em_operacao:
            return
            
        if len(df) < 2:
            return
            
        # Obter os √∫ltimos dois candles
        penultimo = df.iloc[-2]
        ultimo = df.iloc[-1]
        
        # Verificar condi√ß√µes espec√≠ficas para alerta
        
        # 1. Cruzamento MA7 acima de MA25
        cruzamento = (penultimo[f'ma_{MA_CURTA}'] <= penultimo[f'ma_{MA_MEDIA}'] and
                    ultimo[f'ma_{MA_CURTA}'] > ultimo[f'ma_{MA_MEDIA}'])
                        
        # 2. MA99 em tend√™ncia de alta
        if 'ma_longa_inclinacao' in df.columns:
            tendencia_alta_forte = float(df['ma_longa_inclinacao'].iloc[-1]) > 0
        else:
            tendencia_alta_forte = float(ultimo[f'ma_{MA_LONGA}']) > float(penultimo[f'ma_{MA_LONGA}'])
        
        # 3. RSI entre valores √≥timos
        rsi_otimo = RSI_ZONA_OTIMA_MIN <= ultimo['rsi'] <= RSI_ZONA_OTIMA_MAX
        
        # 4. Volume acima da m√©dia
        volume_alto = ultimo['volume'] >= ultimo['volume_media'] * (VOLUME_MINIMO_PERCENTUAL / 100)
        
        # 5. Verificar padr√µes de candles
        padrao_candle, nome_padrao, _ = self.identificar_padrao_candle(df)
        
        # Verificar proximidade a zonas S/R
        preco_atual = ultimo['close']
        proximo_sr, msg_sr = self.esta_proximo_sr(preco_atual)
        
        # Construir condi√ß√µes presentes
        condicoes = []
        if cruzamento:
            condicoes.append("MA7 cruzou acima da MA25")
        if tendencia_alta_forte:
            condicoes.append("MA99 em tend√™ncia de alta")
        if rsi_otimo:
            condicoes.append(f"RSI em zona √≥tima ({ultimo['rsi']:.2f})")
        if volume_alto:
            condicoes.append(f"Volume alto ({ultimo['volume']/ultimo['volume_media']*100:.0f}% da m√©dia)")
        if padrao_candle:
            condicoes.append(f"Padr√£o de candle: {nome_padrao}")
        if proximo_sr:
            condicoes.append(f"‚ö†Ô∏è {msg_sr}")
        
        # Determinar tipo e for√ßa do sinal
        if len(condicoes) >= 3 and (cruzamento or padrao_candle) and tendencia_alta_forte:
            # Montar mensagem de alerta
            mensagem = f"üîî *ALERTA: Condi√ß√µes Favor√°veis* üîî\n\n"
            mensagem += f"*{self.symbol}: ${ultimo['close']:.2f}*\n\n"
            mensagem += "Condi√ß√µes detectadas:\n"
            for cond in condicoes:
                mensagem += f"‚Ä¢ {cond}\n"
            
            # Adicionar avalia√ß√£o geral
            if len(condicoes) >= 4 and not (proximo_sr and "resist√™ncia" in msg_sr):
                mensagem += "\n‚≠ê‚≠ê‚≠ê *SINAL FORTE* ‚≠ê‚≠ê‚≠ê"
            elif len(condicoes) >= 3:
                mensagem += "\n‚≠ê‚≠ê *SINAL MODERADO* ‚≠ê‚≠ê"
            else:
                mensagem += "\n‚≠ê *SINAL FRACO* ‚≠ê"
            
            # Enviar alerta
            # Verificar configura√ß√µes de cada usu√°rio antes de enviar
            for user_id in self.alert_system.user_settings.settings:
                # Verificar se este usu√°rio quer receber alertas de condi√ß√µes favor√°veis
                if self.alert_system.user_wants_alerts(user_id):
                    # Enviar alerta para este usu√°rio espec√≠fico
                    self.alert_system.send_telegram(mensagem, chat_id=user_id)
            
    def verificar_metas_diarias(self):
        """Verificar se atingimos as metas ou limites di√°rios - Apenas registra, n√£o interrompe execu√ß√£o"""
        percentual_lucro = (self.lucro_diario / CAPITAL_TOTAL) * 100
        percentual_perda = (self.perda_diaria / CAPITAL_TOTAL) * 100
        
        print(f"Status atual: Lucro {percentual_lucro:.2f}% | Perda {percentual_perda:.2f}%")
        self.registrar_log(f"STATUS: Lucro {percentual_lucro:.2f}% | Perda {percentual_perda:.2f}%")
        
        # Verificar se √© um novo dia
        dia_atual = datetime.now().day
        if dia_atual != self.ultima_verificacao_dia:
            # Resetar contadores para o novo dia
            self.lucro_diario = 0
            self.perda_diaria = 0
            self.operacoes_dia = []
            self.operacoes_hoje = 0
            self.ultima_verificacao_dia = dia_atual
            self.registrar_log("NOVO DIA: Contadores resetados")
            return False
        
        # Verificar se atingiu a meta di√°ria - apenas registra, n√£o para execu√ß√£o
        if percentual_lucro >= ALVO_DIARIO_PERCENTUAL:
            print(f"META DI√ÅRIA ATINGIDA! Lucro de {self.lucro_diario:.2f} USDT ({percentual_lucro:.2f}%)")
            self.registrar_log(f"META DI√ÅRIA ATINGIDA! Lucro de {self.lucro_diario:.2f} USDT ({percentual_lucro:.2f}%)")
            
            # Enviar alerta
            self.send_telegram_alert(
                f"üéØ META DI√ÅRIA ATINGIDA!\n\n"
                f"Lucro: {self.lucro_diario:.2f} USDT ({percentual_lucro:.2f}%)\n"
                f"Total de opera√ß√µes: {len(self.operacoes_dia)}\n"
                f"Taxa de acerto: {(self.trades_vencedores / max(1, self.trades_vencedores + self.trades_perdedores)) * 100:.1f}%\n\n"
                f"Continuando a buscar oportunidades com gest√£o de risco refor√ßada."
            )
            
            return True  # Retorna True apenas para indicar meta atingida, mas n√£o interrompe execu√ß√£o
        
        # Verificar se atingiu o limite de perda - apenas registra, n√£o para execu√ß√£o
        if percentual_perda >= PERDA_MAXIMA_PERCENTUAL:
            print(f"LIMITE DE PERDA ATINGIDO! Perda de {self.perda_diaria:.2f} USDT ({percentual_perda:.2f}%)")
            self.registrar_log(f"LIMITE DE PERDA ATINGIDO! Perda de {self.perda_diaria:.2f} USDT ({percentual_perda:.2f}%)")
            
            # Enviar alerta
            self.send_telegram_alert(
                f"‚õî LIMITE DE PERDA ATINGIDO!\n\n"
                f"Perda: {self.perda_diaria:.2f} USDT ({percentual_perda:.2f}%)\n"
                f"Continuando com tamanho reduzido de opera√ß√µes e gest√£o de risco refor√ßada."
            )
            
            return True  # Retorna True apenas para indicar limite atingido, mas n√£o interrompe execu√ß√£o
        
        # Verificar drawdown excessivo
        drawdown = (self.valor_maximo_carteira - (CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria)) / self.valor_maximo_carteira * 100
        if drawdown > 2.0:  # Drawdown de 2% em rela√ß√£o ao pico
            print(f"ALERTA DE DRAWDOWN! {drawdown:.2f}% abaixo do m√°ximo da carteira")
            self.registrar_log(f"ALERTA DE DRAWDOWN: {drawdown:.2f}% abaixo do m√°ximo")
            
            # N√£o encerra opera√ß√µes, mas avisa
            if drawdown > 5.0 and not hasattr(self, 'alerta_drawdown_enviado'):
                self.alerta_drawdown_enviado = True
                self.send_telegram_alert(
                    f"‚ö†Ô∏è DRAWDOWN SIGNIFICATIVO!\n\n"
                    f"Atual: {drawdown:.2f}% abaixo do m√°ximo\n"
                    f"Reduzindo tamanho das posi√ß√µes automaticamente para 50% do valor padr√£o."
                )
        
        return False

    def registrar_log(self, mensagem):
        """Registrar mensagem no arquivo de log"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_line = f"{timestamp} - {mensagem}\n"
        
        # Nome do arquivo de log com a data atual
        data_atual = datetime.now().strftime("%Y%m%d")
        nome_arquivo = f"{self.pasta_logs}/log_{data_atual}.txt"
        
        with open(nome_arquivo, "a", encoding='utf-8') as f:
            f.write(log_line)

    def send_telegram_alert(self, message):
        """Enviar alerta via Telegram com throttling"""
        if not hasattr(self, 'telegram_token') or self.telegram_token == 'SEU_TOKEN_AQUI':
            print("Telegram n√£o configurado corretamente")
            return False
                
        # Evitar spam de alertas (m√≠nimo 30 segundos entre alertas do mesmo tipo)
        current_time = time.time()
        message_type = message.split('\n')[0]  # Usar primeira linha como tipo
        
        # Inicializar dicion√°rio se n√£o existir
        if not hasattr(self, 'last_alert_times'):
            self.last_alert_times = {}
                
        # Verificar se este tipo de mensagem foi enviado recentemente
        if message_type in self.last_alert_times:
            if current_time - self.last_alert_times[message_type] < 30:
                print(f"Alerta ignorado (cooldown ativo para {message_type})")
                return False
                    
        # Atualizar timestamp para este tipo de alerta
        self.last_alert_times[message_type] = current_time
        
        try:
            # Sanitizar a mensagem para evitar problemas de formata√ß√£o
            # Remover caracteres que podem causar problemas no Telegram
            sanitized_message = message.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            data = {
                "chat_id": self.telegram_chat_id,
                "text": sanitized_message,
                "parse_mode": "MarkdownV2"  # Mudado para MarkdownV2 que lida melhor com escapes
            }
            
            response = requests.post(url, data=data)
            success = response.status_code == 200
            
            if success:
                print(f"Alerta Telegram enviado com sucesso!")
            else:
                # Se falhar com MarkdownV2, tentar sem formata√ß√£o
                if 'parse_mode' in data:
                    del data['parse_mode']
                    data['text'] = message  # Usar mensagem original sem escapes
                    response = requests.post(url, data=data)
                    success = response.status_code == 200
                    print(f"Alerta enviado sem formata√ß√£o ap√≥s falha inicial")
                else:
                    print(f"Erro ao enviar alerta: {response.text}")
                        
            return success
        except Exception as e:
            print(f"Erro ao enviar alerta Telegram: {e}")
            return False

    def plotar_grafico(self, df, mostrar_sinais=True, salvar=True):
        """Plotar gr√°fico com indicadores e sinais"""
        plt.figure(figsize=(14, 10))
        
        # Subplot para pre√ßo e m√©dias m√≥veis
        ax1 = plt.subplot(4, 1, 1)
        ax1.plot(df['timestamp'], df['close'], label='Pre√ßo', color='black')
        ax1.plot(df['timestamp'], df[f'ma_{MA_CURTA}'], label=f'MA {MA_CURTA}', color='blue')
        ax1.plot(df['timestamp'], df[f'ma_{MA_MEDIA}'], label=f'MA {MA_MEDIA}', color='orange')
        ax1.plot(df['timestamp'], df[f'ma_{MA_LONGA}'], label=f'MA {MA_LONGA}', color='red')
        
        # Marcar zonas de suporte e resist√™ncia
        ultimo_preco = df['close'].iloc[-1]
        y_min, y_max = ultimo_preco * 0.95, ultimo_preco * 1.05
        
        # Mostrar suportes e resist√™ncias fortes
        if "suportes_fortes" in self.zonas_sr:
            for suporte, forca in self.zonas_sr["suportes_fortes"]:
                if y_min <= suporte <= y_max:
                    ax1.axhline(y=suporte, color='green', linestyle='--', alpha=0.5)
                    ax1.text(df['timestamp'].iloc[-1], suporte, f"S: {suporte:.2f} ({forca})", color='green')
        
        if "resistencias_fortes" in self.zonas_sr:
            for resistencia, forca in self.zonas_sr["resistencias_fortes"]:
                if y_min <= resistencia <= y_max:
                    ax1.axhline(y=resistencia, color='red', linestyle='--', alpha=0.5)
                    ax1.text(df['timestamp'].iloc[-1], resistencia, f"R: {resistencia:.2f} ({forca})", color='red')
        
        # Mostrar bandas de Bollinger se dispon√≠veis
        if 'bb_upper' in df.columns and 'bb_lower' in df.columns:
            ax1.plot(df['timestamp'], df['bb_upper'], 'k--', alpha=0.3)
            ax1.plot(df['timestamp'], df['bb_lower'], 'k--', alpha=0.3)
            ax1.fill_between(df['timestamp'], df['bb_upper'], df['bb_lower'], color='gray', alpha=0.1)
        
        # Marcar sinais
        if mostrar_sinais:
            # Cruzamentos
            for i in range(1, len(df)):
                if (df[f'ma_{MA_CURTA}'].iloc[i-1] <= df[f'ma_{MA_MEDIA}'].iloc[i-1] and
                    df[f'ma_{MA_CURTA}'].iloc[i] > df[f'ma_{MA_MEDIA}'].iloc[i]):
                    ax1.scatter(df['timestamp'].iloc[i], df['close'].iloc[i], color='green', marker='^', s=100)
            
            # Marcar opera√ß√µes do dia no gr√°fico
            for op in self.operacoes_dia:
                # Marcar entrada
                entrada_idx = df[df['close'] == op['entrada']].index.tolist()
                if not entrada_idx and len(df) > 0:
                    # Procurar o candle mais pr√≥ximo se n√£o achar o pre√ßo exato
                    entrada_idx = [df['close'].sub(op['entrada']).abs().idxmin()]
                
                if entrada_idx:
                    ax1.scatter(df['timestamp'].iloc[entrada_idx[0]], op['entrada'], color='blue', marker='o', s=100)
                    ax1.text(df['timestamp'].iloc[entrada_idx[0]], op['entrada']*1.001, "E", color='blue')
                
                # Marcar sa√≠da
                saida_idx = df[df['close'] == op['saida']].index.tolist()
                if not saida_idx and len(df) > 0:
                    # Procurar o candle mais pr√≥ximo
                    saida_idx = [df['close'].sub(op['saida']).abs().idxmin()]
                
                if saida_idx:
                    marker_color = 'green' if op['resultado'] > 0 else 'red'
                    ax1.scatter(df['timestamp'].iloc[saida_idx[0]], op['saida'], color=marker_color, marker='x', s=100)
                    ax1.text(df['timestamp'].iloc[saida_idx[0]], op['saida']*1.001, "S", color=marker_color)
        
        ax1.set_title(f'{self.symbol} - {self.timeframe} - {datetime.now().strftime("%Y-%m-%d %H:%M")}')
        ax1.set_ylabel('Pre√ßo')
        ax1.legend()
        ax1.grid(True)
        
        # Subplot para MACD
        if 'macd' in df.columns and 'macd_signal' in df.columns and 'macd_hist' in df.columns:
            ax2 = plt.subplot(4, 1, 2, sharex=ax1)
            ax2.plot(df['timestamp'], df['macd'], label='MACD', color='blue')
            ax2.plot(df['timestamp'], df['macd_signal'], label='Signal', color='red')
            
            # Histograma MACD
            for i in range(len(df)):
                if i > 0:
                    hist = df['macd_hist'].iloc[i]
                    color = 'green' if hist > 0 else 'red'
                    ax2.bar(df['timestamp'].iloc[i], hist, color=color, alpha=0.5, width=0.7)
            
            ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax2.set_ylabel('MACD')
            ax2.legend()
            ax2.grid(True)
        
        # Subplot para volume
        ax3 = plt.subplot(4, 1, 3, sharex=ax1)
        
        # Barras de volume coloridas de acordo com dire√ß√£o do pre√ßo
        for i in range(len(df)):
            if i > 0:
                color = 'green' if df['close'].iloc[i] >= df['open'].iloc[i] else 'red'
                ax3.bar(df['timestamp'].iloc[i], df['volume'].iloc[i], color=color, alpha=0.5, width=0.7)
        
        ax3.plot(df['timestamp'], df['volume_media'], color='blue', label=f'M√©dia ({VOLUME_PERIODO} per√≠odos)')
        ax3.set_ylabel('Volume')
        ax3.legend()
        ax3.grid(True)
        
        # Subplot para RSI
        ax4 = plt.subplot(4, 1, 4, sharex=ax1)
        ax4.plot(df['timestamp'], df['rsi'], color='blue', label='RSI')
        ax4.axhline(y=RSI_SOBRECOMPRA, color='red', linestyle='--')
        ax4.axhline(y=RSI_SOBREVENDA, color='green', linestyle='--')
        ax4.axhline(y=RSI_ZONA_OTIMA_MAX, color='orange', linestyle='--', alpha=0.5)
        ax4.axhline(y=RSI_ZONA_OTIMA_MIN, color='orange', linestyle='--', alpha=0.5)
        ax4.fill_between(df['timestamp'], RSI_ZONA_OTIMA_MIN, RSI_ZONA_OTIMA_MAX, color='green', alpha=0.1)
        ax4.set_ylim(0, 100)
        ax4.set_ylabel('RSI')
        ax4.grid(True)
        
        plt.tight_layout()
        
        # Salvar gr√°fico na pasta de logs
        if salvar:
            data_hora = datetime.now().strftime("%Y%m%d_%H%M%S")
            plt.savefig(f"{self.pasta_logs}/{self.symbol}_{self.timeframe}_{data_hora}.png")
            plt.close()
        else:
            plt.show()

    def executar_venda_manual(self, preco_venda, motivo_saida):
        """Encerrar posi√ß√£o manualmente ou registrar execu√ß√£o de sa√≠da autom√°tica, considerando taxas"""
        if not self.em_operacao:
            print("N√£o h√° opera√ß√£o em andamento para encerrar")
            return False
        
        # CORRE√á√ÉO: Cancelar qualquer ordem de stop loss pendente
        if hasattr(self, 'ordem_stop_id') and self.ordem_stop_id:
            try:
                self.client.cancel_order(symbol=self.symbol, orderId=self.ordem_stop_id)
                print(f"Stop loss anterior cancelado: {self.ordem_stop_id}")
                self.registrar_log(f"CANCELAMENTO: Stop loss anterior {self.ordem_stop_id} cancelado")
                self.ordem_stop_id = None
            except Exception as e:
                print(f"Erro ao cancelar stop loss anterior: {e}")
                self.registrar_log(f"ERRO: Falha ao cancelar stop loss anterior: {e}")
        
        # Calcular resultado
        if hasattr(self, 'quantidade_restante'):
            quantidade_venda = self.quantidade_restante
        else:
            quantidade_venda = self.quantidade
        
        # CORRE√á√ÉO: Executar venda real antes de calcular taxas e resultados
        ordem_executada = False
        if not MODO_SIMULACAO:
            try:
                print(f"Executando venda real a mercado de {quantidade_venda} {self.symbol}")
                ordem = self.client.create_order(
                    symbol=self.symbol,
                    side=SIDE_SELL,
                    type=ORDER_TYPE_MARKET,
                    quantity=self.normalize_quantity(quantidade_venda)
                )
                
                # Verificar se a ordem foi executada
                if 'fills' in ordem and len(ordem['fills']) > 0:
                    # Usar o pre√ßo m√©dio de execu√ß√£o real
                    preco_total = 0
                    qtd_total = 0
                    for fill in ordem['fills']:
                        preco_fill = float(fill['price'])
                        qtd_fill = float(fill['qty'])
                        preco_total += preco_fill * qtd_fill
                        qtd_total += qtd_fill
                    
                    if qtd_total > 0:
                        preco_venda = preco_total / qtd_total
                        print(f"Venda executada ao pre√ßo m√©dio: {preco_venda}")
                        
                    ordem_executada = True
                else:
                    print("‚ö†Ô∏è Ordem enviada, mas sem confirma√ß√£o de execu√ß√£o - verificando status")
                    # Verificar status da ordem
                    try:
                        ordem_status = self.client.get_order(symbol=self.symbol, orderId=ordem['orderId'])
                        if ordem_status['status'] == 'FILLED':
                            ordem_executada = True
                            print(f"Ordem confirmada como executada: {ordem_status['status']}")
                        else:
                            print(f"‚ö†Ô∏è Ordem n√£o executada completamente: {ordem_status['status']}")
                            self.registrar_log(f"ALERTA: Venda n√£o completada, status={ordem_status['status']}")
                    except Exception as e_status:
                        print(f"Erro ao verificar status da ordem: {e_status}")
                
                if not ordem_executada:
                    self.registrar_log(f"ERRO: Falha na execu√ß√£o da venda manual")
                    return False
                    
            except Exception as e:
                print(f"Erro ao executar venda: {e}")
                self.registrar_log(f"ERRO VENDA: {e}")
                # Continuar com c√°lculos mesmo em caso de erro
                # mas marcar explicitamente no log
                self.registrar_log("AVISO: Calculando resultado com base no pre√ßo te√≥rico devido a erro")
        
        # Calcular taxa de venda
        if MODO_SIMULACAO:
            taxa_venda = preco_venda * quantidade_venda * self.taxa_efetiva
        else:
            if ordem_executada and 'fills' in ordem:
                # Calcular taxa real baseada nos fills
                taxa_venda = 0
                for fill in ordem['fills']:
                    if 'commission' in fill and 'commissionAsset' in fill:
                        commission = float(fill['commission'])
                        commission_asset = fill['commissionAsset']
                        
                        # Converter taxa para USDT dependendo do asset
                        if commission_asset == 'BNB':
                            bnb_price = float(self.client.get_symbol_ticker(symbol='BNBUSDT')['price'])
                            taxa_venda += commission * bnb_price
                        elif commission_asset == 'USDT':
                            taxa_venda += commission
                        else:
                            taxa_venda += commission * preco_venda
            else:
                # Estimativa se n√£o temos dados reais
                taxa_venda = preco_venda * quantidade_venda * self.taxa_efetiva
        
        # Atualizar taxa total da opera√ß√£o e acumulada
        self.taxa_total_operacao += taxa_venda
        self.taxas_pagas_total += taxa_venda
        
        # Calcular resultado da opera√ß√£o (bruto e l√≠quido)
        resultado_bruto = (preco_venda - self.preco_entrada) * quantidade_venda
        resultado = resultado_bruto - taxa_venda  # Resultado l√≠quido ap√≥s taxa
        percentual = (preco_venda - self.preco_entrada) / self.preco_entrada * 100
        
        # Adicionar ao lucro ou perda di√°ria (valor l√≠quido)
        if resultado > 0:
            self.lucro_diario += resultado
            self.trades_vencedores += 1
            self.sequencia_perdas_atual = 0
            status = "LUCRO"
        else:
            self.perda_diaria += abs(resultado)
            self.trades_perdedores += 1
            self.sequencia_perdas_atual += 1
            self.maior_sequencia_perdas = max(self.maior_sequencia_perdas, self.sequencia_perdas_atual)
            status = "PERDA"
        
        # Incluir resultados de sa√≠das parciais se houver
        resultado_total = resultado
        taxas_total = taxa_venda
        if self.posicao_parcial and self.saidas_parciais:
            for saida in self.saidas_parciais:
                resultado_total += saida['resultado']
                taxas_total += saida.get('taxa', 0)
        
        # Calcular percentual total considerando sa√≠das parciais
        percentual_total = (resultado_total + taxas_total) / (self.preco_entrada * self.quantidade) * 100
        
        # Adicionar √† lista de opera√ß√µes do dia
        self.operacoes_dia.append({
            'entrada': self.preco_entrada,
            'saida': preco_venda,
            'resultado_bruto': resultado_bruto + (sum(s.get('resultado_bruto', 0) for s in self.saidas_parciais) if self.saidas_parciais else 0),
            'taxas': self.taxa_total_operacao,
            'resultado': resultado_total,  # Resultado l√≠quido total
            'lucro_percentual': percentual_total,
            'timestamp': datetime.now(),
            'duracao_minutos': (datetime.now() - self.tempo_entrada).total_seconds() / 60,
            'motivo_entrada': self.motivo_entrada,
            'motivo_saida': motivo_saida,
            'saidas_parciais': self.saidas_parciais if hasattr(self, 'saidas_parciais') else []
        })
        
        # Registrar detalhes da opera√ß√£o no log
        self.log_operacoes.append({
            'timestamp': datetime.now(),
            'tipo': f'SA√çDA ({status})',
            'preco': preco_venda,
            'quantidade': quantidade_venda,
            'taxa': taxa_venda,
            'resultado_bruto': resultado_bruto,
            'resultado': resultado,
            'percentual': percentual,
            'resultado_total': resultado_total,
            'taxas_total': taxas_total,
            'percentual_total': percentual_total,
            'motivo': motivo_saida
        })
        
        # Registrar no log
        self.registrar_log(
            f"SA√çDA {status}: Pre√ßo={preco_venda:.2f} | " +
            f"Resultado bruto={resultado_bruto:.2f} | Taxa={taxa_venda:.6f} | " +
            f"Resultado l√≠quido={resultado:.2f} USDT ({percentual:.2f}%) | " +
            f"Motivo: {motivo_saida}"
        )
        
        # Calcular patrim√¥nio antes e depois
        patrimonio_antes = CAPITAL_TOTAL + self.lucro_diario - self.perda_diaria
        patrimonio_depois = patrimonio_antes + resultado

        # Enviar alerta com emoji adequado e informa√ß√µes adicionais
        emoji = "‚úÖ" if resultado > 0 else "‚ùå"
        self.send_telegram_alert(
            f"{emoji} POSI√á√ÉO ENCERRADA: {status}\n\n"
            f"Entrada: {self.preco_entrada:.4f} USDT\n"
            f"Sa√≠da: {preco_venda:.4f} USDT\n"
            f"Resultado bruto: {resultado_bruto:.2f} USDT\n"
            f"Taxa: {taxa_venda:.6f} USDT\n"
            f"Resultado l√≠quido: {resultado:.2f} USDT ({percentual:.2f}%)\n"
            f"Resultado total da opera√ß√£o: {resultado_total:.2f} USDT\n"
            f"Taxas totais: {taxas_total:.6f} USDT\n"
            f"Motivo: {motivo_saida}\n"
            f"Dura√ß√£o: {(datetime.now() - self.tempo_entrada).total_seconds() / 60:.1f} min\n\n"
            f"üí∞ Patrim√¥nio antes: {patrimonio_antes:.2f} USDT\n"
            f"üí∞ Patrim√¥nio depois: {patrimonio_depois:.2f} USDT ({(patrimonio_depois/patrimonio_antes - 1)*100:.3f}%)"
        )
        
        # Resetar vari√°veis de controle
        self.em_operacao = False
        self.trailing_stop_ativo = False
        self.preco_entrada = 0
        self.quantidade = 0
        self.ordem_id = None
        self.ordem_stop_id = None
        self.posicao_parcial = False
        self.saidas_parciais = []
        self.taxa_total_operacao = 0
        if hasattr(self, 'quantidade_restante'):
            delattr(self, 'quantidade_restante')
        self.ultima_operacao_resultado = resultado
        self.ultima_operacao_motivo = motivo_saida
        self.ultimo_preco_saida = preco_venda
        self.ultima_operacao_timestamp = datetime.now()
        
        return True

    def iniciar(self, intervalo_segundos=5):
        """Iniciar o bot em loop cont√≠nuo sem interrup√ß√£o"""
        print(f"Bot iniciado em modo cont√≠nuo. Verificando a cada {intervalo_segundos} segundos.")
        print(f"Modo: {'SIMULA√á√ÉO' if MODO_SIMULACAO else 'REAL - OPERA√á√ïES COM CAPITAL REAL'}")
        
        self.registrar_log(
            f"BOT INICIADO EM MODO CONT√çNUO: Capital={CAPITAL_TOTAL} USDT | "
            f"Meta={ALVO_DIARIO_PERCENTUAL}% | "
            f"Modo={'SIMULA√á√ÉO' if MODO_SIMULACAO else 'REAL'}"
        )
        
        # Flag para controle de execu√ß√£o cont√≠nua
        execucao_continua = True
        
        while execucao_continua:  # Loop infinito
            try:
                print(f"\n--- {datetime.now()} ---")
                
                # Verificar se j√° vamos procurar uma moeda alternativa:
                # 1. Se n√£o estamos em nenhuma opera√ß√£o 
                # 2. E j√° passou tempo suficiente desde a √∫ltima busca (20 minutos)
                # 3. E estamos sem oportunidades h√° algum tempo (3 minutos)
                agora = datetime.now()
                if (not self.em_operacao and 
                    (agora - self.ultima_busca_moedas).total_seconds() > 1200 and  # 20 minutos
                    self.tempo_sem_oportunidades > 180):  # 3 minutos
                    
                    moeda_sugerida = self.buscar_moeda_alternativa()
                    
                    if moeda_sugerida:
                        self.send_telegram_alert(
                            f"‚ö†Ô∏è AUS√äNCIA DE OPORTUNIDADES\n\n"
                            f"Atual: {self.symbol}\n"
                            f"Tempo sem boas oportunidades: {self.tempo_sem_oportunidades//60} minutos\n\n"
                            f"Uma moeda alternativa foi sugerida. Responda com /mudar_{moeda_sugerida} para alterar."
                        )
                    
                    # Resetar contadores
                    self.ultima_busca_moedas = agora
                    self.tempo_sem_oportunidades = 0
                
                # Executar ciclo normal
                self.executar_ciclo()
                
                # Se n√£o estamos em opera√ß√£o, incrementar contador de tempo sem oportunidades
                if not self.em_operacao:
                    self.tempo_sem_oportunidades += intervalo_segundos
                else:
                    # Resetar contador quando estamos em opera√ß√£o
                    self.tempo_sem_oportunidades = 0
                    
                time.sleep(intervalo_segundos)
                
            except KeyboardInterrupt:
                print("\nBot interrompido manualmente pelo usu√°rio.")
                execucao_continua = False  # √önica forma de sair do loop √© interrup√ß√£o manual
                self.registrar_log("BOT INTERROMPIDO MANUALMENTE PELO USU√ÅRIO")
                
            except Exception as e:
                print(f"Erro recuper√°vel: {e}")
                import traceback
                traceback.print_exc()
                self.registrar_log(f"ERRO RECUPER√ÅVEL: {str(e)}")
                
                # Tentar enviar alerta de erro, mas n√£o interromper o bot
                try:
                    self.send_telegram_alert(f"‚ö†Ô∏è ERRO RECUPER√ÅVEL\n\n{str(e)}\n\nO bot continuar√° operando.")
                except:
                    pass
                
                # Tempo para recupera√ß√£o antes de continuar
                print("Aguardando 60 segundos para recupera√ß√£o...")
                time.sleep(60)
                
        # Relat√≥rio final somente se sair do loop
        self.gerar_relatorio()
    # 6. Modificar o m√©todo gerar_relatorio para incluir informa√ß√µes sobre taxas

    def gerar_relatorio(self):
        """Gerar relat√≥rio de desempenho incluindo an√°lise de taxas"""
        print("\n--- RELAT√ìRIO DE DESEMPENHO ---")
        print(f"In√≠cio: {self.data_inicio}")
        print(f"Fim: {datetime.now()}")
        print(f"Total de opera√ß√µes: {len(self.operacoes_dia)}")
        print(f"Lucro total: {self.lucro_diario:.2f} USDT ({(self.lucro_diario/CAPITAL_TOTAL)*100:.2f}%)")
        print(f"Perda total: {self.perda_diaria:.2f} USDT ({(self.perda_diaria/CAPITAL_TOTAL)*100:.2f}%)")
        print(f"Taxas pagas: {self.taxas_pagas_total:.4f} USDT ({(self.taxas_pagas_total/CAPITAL_TOTAL)*100:.4f}%)")
        
        # Calcular resultado l√≠quido (considerando taxas)
        resultado_liquido = self.lucro_diario - self.perda_diaria
        resultado_percentual = (resultado_liquido / CAPITAL_TOTAL) * 100
        
        # Calcular impacto das taxas no resultado
        if resultado_liquido > 0 and self.taxas_pagas_total > 0:
            impacto_taxas_percentual = (self.taxas_pagas_total / (resultado_liquido + self.taxas_pagas_total)) * 100
            print(f"Impacto das taxas: {impacto_taxas_percentual:.2f}% do resultado bruto")
        
        # Inicializa taxa_acerto com valor padr√£o
        taxa_acerto = 0.0
        
        # Performance
        if self.trades_vencedores + self.trades_perdedores > 0:
            taxa_acerto = self.trades_vencedores / (self.trades_vencedores + self.trades_perdedores) * 100
            print(f"Taxa de acerto: {taxa_acerto:.2f}% ({self.trades_vencedores}/{self.trades_vencedores + self.trades_perdedores})")
            print(f"Maior sequ√™ncia de perdas: {self.maior_sequencia_perdas}")
        else:
            print("N√£o h√° trades computados para calcular taxa de acerto.")
        
        # Valor m√°ximo da carteira
        print(f"Valor m√°ximo da carteira: {self.valor_maximo_carteira:.2f} USDT")
        
        # Maior drawdown
        carteira_atual = CAPITAL_TOTAL + resultado_liquido - self.taxas_pagas_total
        drawdown = (self.valor_maximo_carteira - carteira_atual) / self.valor_maximo_carteira * 100
        if self.valor_maximo_carteira > CAPITAL_TOTAL:
            print(f"Drawdown m√°ximo: {drawdown:.2f}%")
        
        if self.operacoes_dia:
            # Calcular estat√≠sticas incluindo taxas
            resultado_bruto_total = sum(op.get('resultado_bruto', 0) for op in self.operacoes_dia)
            taxas_total = sum(op.get('taxas', 0) for op in self.operacoes_dia)
            resultado_liquido_total = sum(op.get('resultado', 0) for op in self.operacoes_dia)
            
            print(f"Resultado bruto total: {resultado_bruto_total:.2f} USDT")
            print(f"Taxas totais: {taxas_total:.4f} USDT")
            print(f"Resultado l√≠quido total: {resultado_liquido_total:.2f} USDT")
            
            # Estat√≠sticas adicionais
            lucros = [op['resultado'] for op in self.operacoes_dia if op['resultado'] > 0]
            perdas = [abs(op['resultado']) for op in self.operacoes_dia if op['resultado'] < 0]
            
            if lucros:
                print(f"Lucro m√©dio: {sum(lucros)/len(lucros):.2f} USDT")
                print(f"Maior lucro: {max(lucros):.2f} USDT")
            
            if perdas:
                print(f"Perda m√©dia: {sum(perdas)/len(perdas):.2f} USDT")
                print(f"Maior perda: {max(perdas):.2f} USDT")
            
            # Tempo m√©dio em opera√ß√£o
            if 'duracao_minutos' in self.operacoes_dia[0]:
                tempo_medio = sum(op.get('duracao_minutos', 0) for op in self.operacoes_dia) / len(self.operacoes_dia)
                print(f"Tempo m√©dio em opera√ß√£o: {tempo_medio:.1f} minutos")
            
            # Detalhes das opera√ß√µes
            print("\nDetalhes das opera√ß√µes:")
            for i, op in enumerate(self.operacoes_dia, 1):
                resultado = "LUCRO" if op['resultado'] > 0 else "PERDA"
                taxas_op = op.get('taxas', 0)
                
                print(f"Op #{i}: {resultado} {op['resultado']:.2f} USDT ({op.get('lucro_percentual', 0):.2f}%) | " +
                    f"Taxas: {taxas_op:.4f} USDT | " +
                    f"Entrada: {op['entrada']} | Sa√≠da: {op['saida']} | " +
                    f"Motivo entrada: {op.get('motivo_entrada', 'N/A')} | " +
                    f"Motivo sa√≠da: {op.get('motivo_saida', 'N/A')}")
                
                # Mostrar sa√≠das parciais se houver
                if 'saidas_parciais' in op and op['saidas_parciais']:
                    for saida in op['saidas_parciais']:
                        print(f"  - Sa√≠da Parcial {saida['nivel']}: {saida['resultado']:.2f} USDT ({saida['percentual']:.2f}%) | Taxa: {saida.get('taxa', 0):.4f} USDT")
        
        # Incluir informa√ß√µes de an√°lise macro no relat√≥rio
        if USAR_ANALISE_MACRO:
            print("\n--- AN√ÅLISE MACRO ---")
            
            try:
                # Obter an√°lises macro mais recentes
                sentimento_score, sentimento_desc, _ = self.analisar_sentimento_mercado()
                correlacao_score, correlacao_desc, _, _ = self.analisar_correlacoes()
                dominancia_score, dominancia_desc, _, _ = self.analisar_dominancia_btc()
                
                print(f"Sentimento de mercado: {sentimento_desc} (multiplicador: {sentimento_score:.2f})")
                print(f"Correla√ß√£o: {correlacao_desc} (multiplicador: {correlacao_score:.2f})")
                print(f"Domin√¢ncia BTC: {dominancia_desc} (multiplicador: {dominancia_score:.2f})")
                
                # Gerar gr√°fico final
                caminho_grafico = self.visualizar_indicadores_macro()
                if caminho_grafico:
                    print(f"Gr√°fico de indicadores macro gerado: {caminho_grafico}")
            except Exception as e:
                print(f"Erro ao gerar relat√≥rio de an√°lise macro: {e}")

        # Enviar relat√≥rio por Telegram
        if hasattr(self, 'telegram_token') and self.telegram_token != 'SEU_TOKEN_AQUI':
            resultado_emoji = "üìà" if resultado_liquido > 0 else "üìâ"
            
            # Calcular patrim√¥nio inicial e final
            patrimonio_inicial = CAPITAL_TOTAL
            patrimonio_final = CAPITAL_TOTAL + resultado_liquido
            
            mensagem = (
                f"{resultado_emoji} *RELAT√ìRIO DE DESEMPENHO*\n\n"
                f"Per√≠odo: {self.data_inicio.strftime('%d/%m/%Y %H:%M')} a {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
                f"Total de opera√ß√µes: *{len(self.operacoes_dia)}*\n"
                f"Resultado bruto: *{resultado_liquido + self.taxas_pagas_total:.2f} USDT*\n"
                f"Taxas: *{self.taxas_pagas_total:.4f} USDT*\n"
                f"Resultado l√≠quido: *{resultado_liquido:.2f} USDT ({resultado_percentual:.2f}%)*\n"
                f"Taxa de acerto: *{taxa_acerto:.1f}%*\n\n"
                f"üîπ Lucros: {self.lucro_diario:.2f} USDT ({(self.lucro_diario/CAPITAL_TOTAL)*100:.2f}%)\n"
                f"üî∏ Perdas: {self.perda_diaria:.2f} USDT\n"
                f"üí∞ Impacto das taxas: {(self.taxas_pagas_total / max(1, resultado_liquido + self.taxas_pagas_total)) * 100:.2f}% do resultado bruto\n\n"
                f"üíº Patrim√¥nio inicial: *{patrimonio_inicial:.2f} USDT*\n"
                f"üíº Patrim√¥nio final: *{patrimonio_final:.2f} USDT* ({(patrimonio_final/patrimonio_inicial - 1)*100:.2f}%)"
            )
            
            # Adicionar informa√ß√µes de an√°lise macro, se dispon√≠veis
            if USAR_ANALISE_MACRO:
                try:
                    sentimento_score, sentimento_desc, _ = self.analisar_sentimento_mercado()
                    dominancia_score, dominancia_desc, _, _ = self.analisar_dominancia_btc()
                    
                    mensagem += f"\n*AN√ÅLISE MACRO ATUAL:*\n"
                    mensagem += f"üß† Sentimento: {sentimento_desc}\n"
                    mensagem += f"üëë Domin√¢ncia BTC: {dominancia_desc}\n"
                except Exception as e:
                    self.registrar_log(f"Erro ao adicionar an√°lise macro ao relat√≥rio: {e}")
            
            self.send_telegram_alert(mensagem)
        
        # Registrar relat√≥rio no log
        self.registrar_log(
            f"RELAT√ìRIO FINAL: Opera√ß√µes={len(self.operacoes_dia)} | " +
            f"Resultado bruto={resultado_liquido + self.taxas_pagas_total:.2f} USDT | " +
            f"Taxas={self.taxas_pagas_total:.4f} USDT | " +
            f"Resultado l√≠quido={resultado_liquido:.2f} USDT ({resultado_percentual:.2f}%) | " +
            f"Taxa de acerto={taxa_acerto:.1f}%"
        )
        
        # Salvar relat√≥rio detalhado em CSV
        self.salvar_relatorio_csv()
        
        # Plotar gr√°fico de performance
        self.plotar_performance()

    def send_telegram_image(self, image_path, caption=""):
        """Enviar imagem via Telegram"""
        if not hasattr(self, 'telegram_token') or self.telegram_token == 'SEU_TOKEN_AQUI':
            print("Telegram n√£o configurado corretamente")
            return False
            
        try:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendPhoto"
            
            # Verificar se o arquivo existe
            if not os.path.exists(image_path):
                print(f"Erro: arquivo de imagem n√£o encontrado em {image_path}")
                return False
                
            # Sanitizar a legenda para evitar problemas de formata√ß√£o
            sanitized_caption = caption.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            
            with open(image_path, 'rb') as img:
                files = {'photo': img}
                data = {
                    'chat_id': self.telegram_chat_id,
                    'caption': sanitized_caption,
                    'parse_mode': 'MarkdownV2'
                }
                
                response = requests.post(url, files=files, data=data)
                success = response.status_code == 200
                
                if success:
                    print(f"Imagem enviada com sucesso via Telegram!")
                    self.registrar_log(f"Imagem enviada via Telegram: {image_path}")
                else:
                    # Se falhar com MarkdownV2, tentar sem formata√ß√£o
                    if 'parse_mode' in data:
                        del data['parse_mode']
                        data['caption'] = caption  # Usar legenda original sem escapes
                        response = requests.post(url, files=files, data=data)
                        success = response.status_code == 200
                        print(f"Imagem enviada sem formata√ß√£o ap√≥s falha inicial")
                    else:
                        print(f"Erro ao enviar imagem: {response.text}")
                        self.registrar_log(f"Erro ao enviar imagem via Telegram: {response.text}")
                        
                return success
        except Exception as e:
            print(f"Erro ao enviar imagem via Telegram: {e}")
            self.registrar_log(f"Erro ao enviar imagem via Telegram: {str(e)}")
            return False
    
    def salvar_relatorio_csv(self):
        """Salvar relat√≥rio detalhado em CSV"""
        data_atual = datetime.now().strftime("%Y%m%d")
        arquivo_csv = f"{self.pasta_logs}/relatorio_{data_atual}.csv"
        
        # Criar DataFrame para log de opera√ß√µes
        if self.log_operacoes:
            df_log = pd.DataFrame(self.log_operacoes)
            df_log.to_csv(arquivo_csv, index=False)
            print(f"Relat√≥rio detalhado salvo em: {arquivo_csv}")
        
        # Salvar opera√ß√µes completas em formato mais estruturado
        if self.operacoes_dia:
            arquivo_operacoes = f"{self.pasta_logs}/operacoes_{data_atual}.csv"
            df_operacoes = pd.DataFrame(self.operacoes_dia)
            
            # Converter listas e dicts para strings para facilitar o CSV
            if 'saidas_parciais' in df_operacoes.columns:
                df_operacoes['saidas_parciais'] = df_operacoes['saidas_parciais'].apply(lambda x: str(x) if x else "")
            
            df_operacoes.to_csv(arquivo_operacoes, index=False)
            print(f"Opera√ß√µes detalhadas salvas em: {arquivo_operacoes}")

    # 7. Modificar o m√©todo plotar_performance para incluir an√°lises de taxas

    def plotar_performance(self):
        """Plotar gr√°fico de performance incluindo an√°lise de taxas"""
        if not self.operacoes_dia:
            return
        
        plt.figure(figsize=(14, 12))  # Aumentado em altura para acomodar gr√°fico adicional
        
        # Subplot para evolu√ß√£o do capital
        ax1 = plt.subplot(4, 1, 1)  # Modificado para 4 subplots (adicionamos um para taxas)
        
        # Preparar dados
        datas = []
        capital = []
        capital_atual = CAPITAL_TOTAL
        
        # Adicionar ponto inicial
        datas.append(self.data_inicio)
        capital.append(capital_atual)
        
        # Adicionar cada opera√ß√£o
        for op in sorted(self.operacoes_dia, key=lambda x: x.get('timestamp', self.data_inicio) if 'timestamp' in x else self.data_inicio):
            if 'timestamp' in op:
                data_op = op['timestamp']
            else:
                # Estimar timestamp se n√£o estiver dispon√≠vel
                data_op = self.data_inicio + timedelta(minutes=len(datas)*15)
            
            capital_atual += op['resultado']  # Valor j√° considera taxas
            datas.append(data_op)
            capital.append(capital_atual)
        
        # Plotar evolu√ß√£o do capital
        ax1.plot(datas, capital, 'b-', linewidth=2)
        ax1.axhline(y=CAPITAL_TOTAL, color='r', linestyle='--', alpha=0.5)
        ax1.set_title('Evolu√ß√£o do Capital (Ap√≥s Taxas)')
        ax1.set_ylabel('Capital (USDT)')
        ax1.grid(True)
        
        # Subplot para resultados individuais
        ax2 = plt.subplot(4, 1, 2)
        
        # Extrair resultados
        resultados = [op['resultado'] for op in self.operacoes_dia]
        taxas = [op.get('taxas', 0) for op in self.operacoes_dia]
        operacoes = list(range(1, len(resultados) + 1))
        
        # Cores baseadas no resultado
        cores = ['green' if res > 0 else 'red' for res in resultados]
        
        # Plotar barras de resultado
        ax2.bar(operacoes, resultados, color=cores)
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax2.set_title('Resultado L√≠quido por Opera√ß√£o (Ap√≥s Taxas)')
        ax2.set_xlabel('Opera√ß√£o #')
        ax2.set_ylabel('Resultado (USDT)')
        ax2.grid(True)
        
        # Subplot para taxas por opera√ß√£o
        ax3 = plt.subplot(4, 1, 3)
        
        # Plotar barras de taxas
        ax3.bar(operacoes, taxas, color='orange')
        ax3.set_title('Taxas por Opera√ß√£o')
        ax3.set_xlabel('Opera√ß√£o #')
        ax3.set_ylabel('Taxa (USDT)')
        ax3.grid(True)
        
        # Subplot para distribui√ß√£o de resultados
        ax4 = plt.subplot(4, 1, 4)
        
        # Adicionar resultados brutos e l√≠quidos para compara√ß√£o
        resultados_brutos = [op.get('resultado_bruto', op['resultado'] + op.get('taxas', 0)) for op in self.operacoes_dia]
        
        # Preparar bins para os histogramas
        todos_resultados = resultados + resultados_brutos
        max_val = max(todos_resultados)
        min_val = min(todos_resultados)
        bins = np.linspace(min_val, max_val, 15)
        
        # Histograma de resultados
        ax4.hist(resultados, bins=bins, alpha=0.7, color='blue', label='Resultado L√≠quido')
        ax4.hist(resultados_brutos, bins=bins, alpha=0.4, color='green', label='Resultado Bruto (antes das taxas)')
        ax4.axvline(x=0, color='r', linestyle='--', alpha=0.5)
        ax4.set_title('Distribui√ß√£o de Resultados')
        ax4.set_xlabel('Resultado (USDT)')
        ax4.set_ylabel('Frequ√™ncia')
        ax4.legend()
        ax4.grid(True)
        
        plt.tight_layout()
        
        # Salvar gr√°fico
        data_hora = datetime.now().strftime("%Y%m%d_%H%M%S")
        plt.savefig(f"{self.pasta_logs}/performance_{data_hora}.png")
        plt.close()
        print(f"Gr√°fico de performance salvo em: {self.pasta_logs}/performance_{data_hora}.png")
        
        # Criar gr√°fico adicional espec√≠fico para an√°lise de taxas
        plt.figure(figsize=(14, 8))
        
        # Subplot para propor√ß√£o taxas/resultado
        ax_prop = plt.subplot(1, 2, 1)
        
        # Calcular dados para o gr√°fico de pizza
        total_bruto = sum(resultados_brutos)
        total_liquido = sum(resultados)
        total_taxas = sum(taxas)
        
        if total_bruto > 0:
            # Gr√°fico de pizza para opera√ß√µes lucrativas
            labels = ['Resultado L√≠quido', 'Taxas']
            sizes = [max(0, total_liquido), total_taxas]
            explode = (0.1, 0)  # Explode a primeira fatia
            
            ax_prop.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
                    shadow=True, startangle=90, colors=['green', 'red'])
            ax_prop.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            ax_prop.set_title('Propor√ß√£o: Resultado L√≠quido vs Taxas')
        
        # Subplot para evolu√ß√£o das taxas acumuladas
        ax_tax = plt.subplot(1, 2, 2)
        
        # Preparar dados
        taxas_acumuladas = []
        acumulado = 0
        
        for taxa in taxas:
            acumulado += taxa
            taxas_acumuladas.append(acumulado)
        
        # Plotar evolu√ß√£o das taxas
        ax_tax.plot(operacoes, taxas_acumuladas, 'r-', linewidth=2)
        ax_tax.set_title('Taxas Acumuladas')
        ax_tax.set_xlabel('Opera√ß√£o #')
        ax_tax.set_ylabel('Taxas Acumuladas (USDT)')
        ax_tax.grid(True)
        
        plt.tight_layout()
        
        # Salvar gr√°fico de taxas
        plt.savefig(f"{self.pasta_logs}/taxas_analise_{data_hora}.png")
        plt.close()
        print(f"Gr√°fico de an√°lise de taxas salvo em: {self.pasta_logs}/taxas_analise_{data_hora}.png")

    # 8. Adicionar um novo m√©todo para verificar se a opera√ß√£o √© vi√°vel considerando as taxas

    
    def testar_parametros(capital_por_operacao_pct=3, alvo_diario=0.8, alvo_lucro_1=0.15, 
                        alvo_lucro_2=0.3, alvo_lucro_3=0.5, stop_loss_atr=1.0, 
                        stop_loss_min=0.3, volume_min=115, dias=1, simulacao=True):
        """Testar o bot com par√¢metros espec√≠ficos"""
        
        # Atualizar constantes globais
        global CAPITAL_POR_OPERACAO_PERCENTUAL, ALVO_DIARIO_PERCENTUAL, ALVO_LUCRO_PERCENTUAL_1
        global ALVO_LUCRO_PERCENTUAL_2, ALVO_LUCRO_PERCENTUAL_3, STOP_LOSS_MULTIPLICADOR_ATR
        global STOP_LOSS_PERCENTUAL_MINIMO, VOLUME_MINIMO_PERCENTUAL, MODO_SIMULACAO
        
        CAPITAL_POR_OPERACAO_PERCENTUAL = capital_por_operacao_pct
        ALVO_DIARIO_PERCENTUAL = alvo_diario
        ALVO_LUCRO_PERCENTUAL_1 = alvo_lucro_1
        ALVO_LUCRO_PERCENTUAL_2 = alvo_lucro_2
        ALVO_LUCRO_PERCENTUAL_3 = alvo_lucro_3
        STOP_LOSS_MULTIPLICADOR_ATR = stop_loss_atr
        STOP_LOSS_PERCENTUAL_MINIMO = stop_loss_min
        VOLUME_MINIMO_PERCENTUAL = volume_min
        MODO_SIMULACAO = simulacao
        
        # Recalcular capital por opera√ß√£o
        global CAPITAL_POR_OPERACAO
        CAPITAL_POR_OPERACAO = CAPITAL_TOTAL * CAPITAL_POR_OPERACAO_PERCENTUAL / 100
        
        # Inicializar e executar o bot
        bot = BinanceScalpingBotMelhorado(API_KEY, API_SECRET, SYMBOL, TIMEFRAME, CAPITAL_POR_OPERACAO)
        
        # Se for teste r√°pido, apenas verificar sinais
        if dias == 0:
            df = bot.get_klines()
            sinal, mensagem = bot.check_signal(df)
            print(f"An√°lise de sinal: {mensagem}")
            params, msg_params = bot.calcular_parametros_ordem(float(df['close'].iloc[-1]))
            if params:
                print(f"Par√¢metros: {msg_params}")
            return
        
        # Executar pelo n√∫mero de dias especificado
        inicio = datetime.now()
        fim = inicio + timedelta(days=dias)
        
        try:
            while datetime.now() < fim:
                print(f"\n--- {datetime.now()} ---")
                bot.executar_ciclo()
                time.sleep(30)
        except KeyboardInterrupt:
            print("\nTeste interrompido pelo usu√°rio.")
        finally:
            # Gerar relat√≥rio
            bot.gerar_relatorio()
            
            # Calcular taxa de acerto com valida√ß√£o para evitar divis√£o por zero
            taxa_acerto = 0
            if (bot.trades_vencedores + bot.trades_perdedores) > 0:
                taxa_acerto = 100 * bot.trades_vencedores / (bot.trades_vencedores + bot.trades_perdedores)
            
            # Retornar resultado para compara√ß√£o
            resultado = {
                'lucro': bot.lucro_diario,
                'perda': bot.perda_diaria,
                'resultado_liquido': bot.lucro_diario - bot.perda_diaria,
                'resultado_percentual': (bot.lucro_diario - bot.perda_diaria) / CAPITAL_TOTAL * 100,
                'trades_total': bot.trades_vencedores + bot.trades_perdedores,
                'taxa_acerto': taxa_acerto,
                'parametros': {
                    'capital_por_operacao_pct': capital_por_operacao_pct,
                    'alvo_diario': alvo_diario,
                    'alvo_lucro_1': alvo_lucro_1,
                    'alvo_lucro_2': alvo_lucro_2,
                    'alvo_lucro_3': alvo_lucro_3,
                    'stop_loss_atr': stop_loss_atr,
                    'stop_loss_min': stop_loss_min,
                    'volume_min': volume_min
                }
            }
            
            print(f"\nResultado do teste: {resultado['resultado_percentual']:.2f}% com taxa de acerto {resultado['taxa_acerto']:.1f}%")
            return resultado

# Exemplo de uso
if __name__ == "__main__":
    try:
        # Exibir informa√ß√µes do m√≥dulo
        print("\nVers√µes dos m√≥dulos:")
        from binance import __version__ as binance_version
        print(f"python-binance: {binance_version}")
        import pandas as pd
        print(f"pandas: {pd.__version__}")
        import numpy as np
        print(f"numpy: {np.__version__}")
        import talib
        print(f"talib: {talib.__version__}")
        
        # Verificar se √© para testar par√¢metros ou executar normalmente
        import sys
        if len(sys.argv) > 1 and sys.argv[1] == 'teste':
            print("\n--- MODO DE TESTE DE PAR√ÇMETROS ---")
            resultado = testar_parametros(
                capital_por_operacao_pct=3,  # % do capital total
                alvo_diario=0.8,             # % alvo di√°rio
                alvo_lucro_1=0.15,           # % primeiro take profit
                alvo_lucro_2=0.3,            # % segundo take profit
                alvo_lucro_3=0.5,            # % terceiro take profit
                stop_loss_atr=1.0,           # multiplicador ATR
                stop_loss_min=0.3,           # % m√≠nimo stop loss
                volume_min=115,              # % do volume m√©dio
                dias=1,                      # dias de teste
                simulacao=True               # modo simula√ß√£o
            )
        elif len(sys.argv) > 1 and sys.argv[1] == 'otimizacao':
            # Modo de otimiza√ß√£o de par√¢metros
            print("\n--- MODO DE OTIMIZA√á√ÉO DE PAR√ÇMETROS ---")
            resultados = []
            
            # Testar diferentes combina√ß√µes de par√¢metros
            for cap in [2, 3, 5]:
                for tp1 in [0.15, 0.2]:
                    for sl in [0.3, 0.4]:
                        print(f"\nTestando: Capital={cap}%, TP1={tp1}%, SL={sl}%")
                        res = testar_parametros(
                            capital_por_operacao_pct=cap,
                            alvo_lucro_1=tp1,
                            stop_loss_min=sl,
                            dias=1
                        )
                        resultados.append(res)
            
            # Ordenar resultados pelo resultado percentual
            resultados.sort(key=lambda x: x['resultado_percentual'], reverse=True)
            
            # Mostrar melhores resultados
            print("\n--- MELHORES COMBINA√á√ïES DE PAR√ÇMETROS ---")
            for i, res in enumerate(resultados[:3], 1):
                print(f"{i}. Resultado: {res['resultado_percentual']:.2f}% | " +
                     f"Taxa de acerto: {res['taxa_acerto']:.1f}% | " +
                     f"Par√¢metros: Cap={res['parametros']['capital_por_operacao_pct']}%, " +
                     f"TP1={res['parametros']['alvo_lucro_1']}%, " +
                     f"SL={res['parametros']['stop_loss_min']}%")
        else:
            # Modo normal - iniciar bot em produ√ß√£o
            print("\n--- INICIANDO BOT DE TRADING ---")
            bot = BinanceScalpingBotMelhorado(API_KEY, API_SECRET, SYMBOL, TIMEFRAME, CAPITAL_POR_OPERACAO)
            bot.iniciar(intervalo_segundos=5)
        
    except Exception as e:
        import traceback
        print(f"\nErro ao executar o bot: {e}")
        print("\nDetalhe do erro:")
        traceback.print_exc()
 
